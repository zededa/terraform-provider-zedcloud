{
    "swagger": "2.0",
    "info": {
        "title": "ZEDEDA IAM Service",
        "description": "ZEDEDA Identity and Access Management (IAM) Service helps you securely control access to zedcontrol resources. You use IAM to control who is authenticated (signed in) and authorized (has permissions) to use resources. ZEDEDA IAM Service helps you set up users and roles, and shows you how to protect your resources with role-based access control (RBAC). It also shows how to connect to other identity services to grant external users access to your enterprise resources.",
        "termsOfService": "https://www.zededa.com/terms",
        "version": "1.0",
        "contact": {
            "name": "ZEDEDA API Support",
            "url": "https://www.zededa.com/support",
            "email": "support@zededa.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [
        {
            "name": "IdentityAccessManagement"
        },
        {
            "name": "EnterpriseEntitlementsReport"
        }
    ],
    "basePath": "/api",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/v1/authorization/profiles": {
            "get": {
                "summary": "Query AAA profiles",
                "description": "Query the AAA profile records.",
                "operationId": "IdentityAccessManagement_QueryAuthProfiles",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "SfdcId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "HubspotId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Entpstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Userstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "all",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "post": {
                "summary": "Create AAA profile",
                "description": "Create an AAA profile record.",
                "operationId": "IdentityAccessManagement_CreateAuthProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this AAA profile record will conflict with an already existing AAA profile record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthorizationProfile"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/authorization/profiles/id/{id}": {
            "get": {
                "summary": "Get AAA profile",
                "description": "Get the configuration (without security details) of an AAA profile record.",
                "operationId": "IdentityAccessManagement_GetAuthProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "delete": {
                "summary": "Delete AAA profile",
                "description": "Delete an AAA profile record.",
                "operationId": "IdentityAccessManagement_DeleteAuthProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "put": {
                "summary": "Update AAA profile",
                "description": "Update an AAA profile record. The usual pattern to update an AAA profile record is to retrieve the record and update with the modified values in a new body to update the AAA profile record.",
                "operationId": "IdentityAccessManagement_UpdateAuthProfile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing AAA profile record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique system defined profile ID",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "enterpriseId": {
                                    "type": "string",
                                    "description": "Parent enterprise ID of the authorization profile",
                                    "pattern": "[0-9A-Za-z_=-]{28}",
                                    "uniqueItems": true
                                },
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the profile. Profile name is unique within an enterprise. Name can't be changed once created",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "type": {
                                    "$ref": "#/definitions/AuthType",
                                    "description": "Type of the profile"
                                },
                                "oauthProfile": {
                                    "$ref": "#/definitions/OAUTHProfile",
                                    "description": "Oauth profile configuration details"
                                },
                                "passwordProfile": {
                                    "$ref": "#/definitions/PasswordProfile"
                                },
                                "testOnly": {
                                    "type": "boolean"
                                },
                                "active": {
                                    "type": "boolean",
                                    "description": "Mark this profile as active. Only one profile can be active in a given enterprise"
                                },
                                "defaultRoleId": {
                                    "type": "string",
                                    "description": "Default Role ID to associate with the profile",
                                    "pattern": "[0-9A-Za-z_=-]{28}"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title for the profile. Title can be changed anytime",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the profile",
                                    "maxLength": 256
                                },
                                "profileType": {
                                    "$ref": "#/definitions/AuthProfileType",
                                    "description": "Authorization profile type"
                                },
                                "disableAutoUserCreate": {
                                    "type": "boolean",
                                    "description": "Do not automatically create new users if this is set"
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "system defined info",
                                    "readOnly": true
                                }
                            },
                            "description": "Authorization profile  meta data",
                            "title": "Authorization profile detail",
                            "required": [
                                "name",
                                "title",
                                "defaultRoleId"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/authorization/profiles/name/{name}": {
            "get": {
                "summary": "Get AAA profile",
                "description": "Get the configuration (without security details) of an AAA profile record.",
                "operationId": "IdentityAccessManagement_GetAuthProfileByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/cloud/policies": {
            "get": {
                "summary": "Query document policy",
                "description": "Query document policy",
                "operationId": "IdentityAccessManagement_QueryDocPolicy",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "SfdcId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "HubspotId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Entpstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Userstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "all",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "post": {
                "summary": "Create document policy",
                "description": "Create document policy.",
                "operationId": "IdentityAccessManagement_CreateDocPolicy",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing operation.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DocPolicy"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM/"
                }
            }
        },
        "/v1/cloud/policies/id/{id}": {
            "get": {
                "summary": "Get document policy by id",
                "description": "Get document policy by id",
                "operationId": "IdentityAccessManagement_GetDocPolicy",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "delete": {
                "summary": "Deletes document policy by id",
                "description": "Deletes document policy by id",
                "operationId": "IdentityAccessManagement_DeleteDocPolicy",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/cloud/policies/latest": {
            "put": {
                "summary": "Mark document policy as latest",
                "description": "Mark document policy as latest.",
                "operationId": "IdentityAccessManagement_UpdateDocPolicyLatest",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing AAA profile record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DocPolicy"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/credentials": {
            "post": {
                "summary": "Create IAM credential",
                "description": "Create an IAM credential record.",
                "operationId": "IdentityAccessManagement_CreateCredential",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this IAM credential record will conflict with an already existing IAM credential record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Credential"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "put": {
                "summary": "Update IAM credential",
                "description": "Update an IAM credential record.",
                "operationId": "IdentityAccessManagement_UpdateCredential",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing IAM credential record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Credential"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/credentials/id/{id}": {
            "delete": {
                "summary": "Delete IAM credential",
                "description": "Delete an IAM credential record.",
                "operationId": "IdentityAccessManagement_DeleteCredential",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/credentials/self": {
            "put": {
                "summary": "Update IAM credential",
                "description": "Update user's own IAM credential record.",
                "operationId": "IdentityAccessManagement_UpdateCredentialSelf",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing IAM credential record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Credential"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/enterprises": {
            "get": {
                "summary": "Query IAM Enterprises",
                "description": "Query the IAM Enterprises records.",
                "operationId": "IdentityAccessManagement_QueryEnterprises",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "SfdcId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "HubspotId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Entpstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Userstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "all",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "post": {
                "summary": "Create IAM Enterprise",
                "description": "Create an IAM enterprise record.",
                "operationId": "IdentityAccessManagement_CreateEnterprise",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this IAM role record will conflict with an already existing IAM role record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Enterprise"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/enterprises/id/{id}": {
            "get": {
                "summary": "Get enterprise",
                "description": "Get the configuration (without security details) and status of an enterprise record.",
                "operationId": "IdentityAccessManagement_GetEnterprise",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "delete": {
                "summary": "Delete IAM role",
                "description": "Delete an IAM enterprise record.",
                "operationId": "IdentityAccessManagement_DeleteEnterprise",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because there are IAM users of this IAM role",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "put": {
                "summary": "Update enterprise",
                "description": "Update an enterprise record. The usual pattern to update an enterprise record is to retrieve the record and update with the modified values in a new body to update the enterprise record.",
                "operationId": "IdentityAccessManagement_UpdateEnterprise2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing enterprise record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique system defined enterprise ID",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the enterprise. Once enterprise is created, name can\u2019t be changed",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "SfdcId": {
                                    "type": "string"
                                },
                                "HubspotId": {
                                    "type": "string"
                                },
                                "state": {
                                    "$ref": "#/definitions/EnterpriseState",
                                    "description": "Enterprise state"
                                },
                                "type": {
                                    "$ref": "#/definitions/EnterpriseType",
                                    "description": "Enterprise type"
                                },
                                "policyList": {
                                    "$ref": "#/definitions/PolicyVersionList",
                                    "description": "Policy version list"
                                },
                                "parentEntpId": {
                                    "type": "string",
                                    "description": "Parent enterprise ID",
                                    "title": "string id = 100;\nstring name = 101;",
                                    "pattern": "[0-9A-Za-z_=-]{28}"
                                },
                                "azureSubId": {
                                    "type": "string",
                                    "description": "Azure subscription ID tied to this enterprise"
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title for the enterprise. Title can be changed any time",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the enterprise",
                                    "maxLength": 256
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "system defined info",
                                    "readOnly": true
                                },
                                "realms": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "List of realms associated with the enterprise"
                                },
                                "attributes": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "enterprise level key-value pairs"
                                },
                                "inheritAuthFromParent": {
                                    "type": "boolean",
                                    "description": "Perform authorization using parent enterprise"
                                },
                                "childEnterprises": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/EnterpriseSummary"
                                    },
                                    "description": "List of all child enterprises"
                                },
                                "controllerHostURL": {
                                    "type": "string",
                                    "description": "zedcontrol host"
                                },
                                "streamEvents": {
                                    "$ref": "#/definitions/DataStream",
                                    "description": "Enable / Disable streaming of events to 3rd party end point"
                                },
                                "totpSettings": {
                                    "$ref": "#/definitions/TOTPSettings",
                                    "description": "Enterprise settings to enforce TOTP"
                                },
                                "apiTokenExpiryInSeconds": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "Enterprise settings for API Token expiry to be set in seconds"
                                }
                            },
                            "description": "Enterprise meta data",
                            "title": "Enterprise detail",
                            "required": [
                                "name",
                                "title"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/enterprises/name/{name}": {
            "get": {
                "summary": "Get enterprise",
                "description": "Get the configuration (without security details) and status of an enterprise record.",
                "operationId": "IdentityAccessManagement_GetEnterpriseByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/enterprises/self": {
            "get": {
                "summary": "Get own enterprise",
                "description": "Get the configuration (without security details) and status of user's own enterprise record.",
                "operationId": "IdentityAccessManagement_GetEnterpriseSelf",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                },
                "parameters": [
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "summary": "Update enterprise",
                "description": "Update an enterprise record. The usual pattern to update an enterprise record is to retrieve the record and update with the modified values in a new body to update the enterprise record.",
                "operationId": "IdentityAccessManagement_UpdateEnterprise",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing enterprise record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Enterprise"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/entitlements": {
            "get": {
                "summary": "Get entitlement data for a enterprise",
                "description": "Get entitlement data for a enterprise",
                "operationId": "EnterpriseEntitlementsReport_GetEnterpriseEntitlementData",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenantId",
                        "description": "Enterprise id for which we want to get summary report for all objects",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            },
            "put": {
                "summary": "Set entitlement data for a enterprise",
                "description": "Set entitlement data for a enterprise.",
                "operationId": "EnterpriseEntitlementsReport_CreateEnterpriseEntitlementData",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this entitlement record will conflict with an already entitlement record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Entitlement"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/entitlements/allowedenterprises": {
            "get": {
                "summary": "Get the list of enterprises of which the logged user can view/edit entitlements",
                "description": "Get the list of enterprises of which the logged user can view/edit entitlements",
                "operationId": "EnterpriseEntitlementsReport_GetAllowedEnterprisesForEntitlements",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "SfdcId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "HubspotId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Entpstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Userstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "all",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            }
        },
        "/v1/login": {
            "post": {
                "summary": "Login locally",
                "description": "Login with zedcontrol as identity provider.",
                "operationId": "IdentityAccessManagement_Login",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LoginWithPasswordRequest"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/login/external": {
            "post": {
                "summary": "Login externally",
                "description": "Login with external identity provider (e.g. Okta, gmail, Azure AD etc.). If the enterprise has an AAA Profile configured, zedcontrol will redirect the user to the login page of the external identity provider.",
                "operationId": "IdentityAccessManagement_LoginExternal",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LoginWithOauthRequest"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/login/forgot": {
            "post": {
                "summary": "Reset forgotten password",
                "description": "Reset password in case it is forgotten",
                "operationId": "IdentityAccessManagement_LoginForgotPassword",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AAARequestLoginForgotPassword"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/login/mode": {
            "post": {
                "summary": "Get AAA mode of the user",
                "description": "Get the AAA mode of the user. AAA mode can be authentication and authorization with zedcontrol as identity provider or authentication (and optionally authorization) with external identity provider. Oauth2 is supported for external authentication protocols.",
                "operationId": "IdentityAccessManagement_LoginMode",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LoginModeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LoginModeRequest"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/login/oauth/callback": {
            "post": {
                "summary": "Login callback",
                "description": "Login callback for external OAauth2 identity provider",
                "operationId": "IdentityAccessManagement_LoginExternalOAuth2Callback",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_OAUTHCallbackRequest"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/login/signup/enterprise": {
            "post": {
                "summary": "Sign up for a new enterprise account",
                "description": "Sign up for a new enterprise account in zedcontrol. Enterprise will not be active unless admin user is validated with email.",
                "operationId": "IdentityAccessManagement_SignupEnterprise",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAAResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AAARequestEnterpriseSignup"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/login/signup/user": {
            "post": {
                "summary": "Get enterprise",
                "description": "Get the configuration (without security details) and status of an enterprise record.",
                "operationId": "IdentityAccessManagement_SignupUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAAResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AAARequestAdminUserSignup"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/logout": {
            "post": {
                "summary": "Logout",
                "description": "Logout from zedcontrol. Current user session will be terminated. In case of login with external identity provider, user session in the identity provider will not be impacted.",
                "operationId": "IdentityAccessManagement_Logout",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LogoutResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_LogoutRequest"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/realms": {
            "get": {
                "summary": "Query all realms",
                "description": "Query all realms.",
                "operationId": "IdentityAccessManagement_QueryRealms",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "SfdcId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "HubspotId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Entpstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Userstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "all",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM/"
                }
            },
            "post": {
                "summary": "Create a realm for an enterprise",
                "description": "Create a realm. For example, zededa.com can be registered as a realm for an enterprise. Only those Oauth users who belong to this domain will be allowed to login to the enterprise.",
                "operationId": "IdentityAccessManagement_CreateRealm",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this realm will conflict with an already existing realm.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Realm"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM/"
                }
            }
        },
        "/v1/realms/id/{id}": {
            "get": {
                "summary": "Get a realm",
                "description": "Get the details of a realm",
                "operationId": "IdentityAccessManagement_GetRealm",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            },
            "delete": {
                "summary": "Delete a realm",
                "description": "Delete a realm.",
                "operationId": "IdentityAccessManagement_DeleteRealm",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM/"
                }
            },
            "put": {
                "summary": "Update a realm",
                "description": "Update a realm. The usual pattern to update a realm is to retrieve the record and update with the modified values in a new body to update the realm.",
                "operationId": "IdentityAccessManagement_UpdateRealm",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing realm.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique system defined realm ID",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "example": {
                                "id": "EAJ1ABAi-KOom7dJlrBoE8eq1pj9",
                                "name": "zededa.com",
                                "enterpriseId": "AAFlABDe6Nm63ixF5LJBbk9Keqp6",
                                "title": "zededa",
                                "description": "Test realm",
                                "revision": {
                                    "prev": "",
                                    "curr": "1",
                                    "createdAt": "2020-07-17T06:03:14Z",
                                    "createdBy": "us.root@zededa.com",
                                    "updatedAt": "2020-07-17T06:03:14Z",
                                    "updatedBy": "us.root@zededa.com"
                                }
                            },
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the realm. Name cannot be changed once created",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "enterpriseId": {
                                    "type": "string",
                                    "description": "Enterprise ID of the enterprise where the realm is to be created",
                                    "pattern": "[0-9A-Za-z_=-]{28}",
                                    "uniqueItems": true
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title of the realm. Title can be changed anytime",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the realm",
                                    "maxLength": 256
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "System defined info",
                                    "readOnly": true
                                }
                            },
                            "description": "Realm meta data",
                            "title": "Realm detail",
                            "required": [
                                "name",
                                "title",
                                "enterpriseId"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM/"
                }
            }
        },
        "/v1/realms/name/{name}": {
            "get": {
                "summary": "Get IAM realm",
                "description": "Get a realm by name.",
                "operationId": "IdentityAccessManagement_GetRealmByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            }
        },
        "/v1/reports/allowedenterprises": {
            "get": {
                "summary": "Get the list of enterprises of which the logged user can query reports",
                "description": "Get the list of enterprises of which the logged user can query reports",
                "operationId": "EnterpriseEntitlementsReport_GetAllowedEnterprises",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "SfdcId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "HubspotId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Entpstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Userstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "all",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            }
        },
        "/v1/reports/apps/instance": {
            "get": {
                "summary": "Get appInst report",
                "description": "Get appInst report",
                "operationId": "EnterpriseEntitlementsReport_GetAppInstReport",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AppInstReport"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenantId",
                        "description": "Enterprise id for which we want to get summary report for all objects",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            }
        },
        "/v1/reports/device": {
            "get": {
                "summary": "Get device report",
                "description": "Get device report",
                "operationId": "EnterpriseEntitlementsReport_GetDeviceReport",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/DeviceReport"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenantId",
                        "description": "Enterprise id for which we want to get summary report for all objects",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            }
        },
        "/v1/reports/plugin": {
            "get": {
                "summary": "Get plugin report",
                "description": "Get plugin report",
                "operationId": "EnterpriseEntitlementsReport_GetPluginReport",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/PluginReport"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenantId",
                        "description": "Enterprise id for which we want to get summary report for all objects",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            }
        },
        "/v1/reports/project": {
            "get": {
                "summary": "Get project report",
                "description": "Get project report",
                "operationId": "EnterpriseEntitlementsReport_GetProjectReport",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ProjectReport"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenantId",
                        "description": "Enterprise id for which we want to get summary report for all objects",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            }
        },
        "/v1/reports/user": {
            "get": {
                "summary": "Get user report",
                "description": "Get user report",
                "operationId": "EnterpriseEntitlementsReport_GetUserReport",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/UserReport"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "tenantId",
                        "description": "Enterprise id for which we want to get summary report for all objects",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EnterpriseEntitlementsReport"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/IAM"
                }
            }
        },
        "/v1/roles": {
            "get": {
                "summary": "Query IAM Roles",
                "description": "Query the IAM Role records.",
                "operationId": "IdentityAccessManagement_QueryRoles",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "SfdcId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "HubspotId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Entpstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Userstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "all",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "post": {
                "summary": "Create IAM role",
                "description": "Create an IAM role record.",
                "operationId": "IdentityAccessManagement_CreateRole",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this IAM role record will conflict with an already existing IAM role record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/roles/id/{id}": {
            "get": {
                "summary": "Get IAM role",
                "description": "Get the configuration (without security details) of an IAM role record.",
                "operationId": "IdentityAccessManagement_GetRole",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "delete": {
                "summary": "Delete IAM role",
                "description": "Delete an IAM role record.",
                "operationId": "IdentityAccessManagement_DeleteRole",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because there are IAM users of this IAM role",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "put": {
                "summary": "Update IAM role",
                "description": "Update an IAM role record. The usual pattern to update an IAM role record is to retrieve the record and update with the modified values in a new body to update the IAM role record.",
                "operationId": "IdentityAccessManagement_UpdateRole",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing IAM role record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique system defined role ID",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "example": {
                                "id": "AAGFABAEqnH4je5PHZTXSmHOs-XC",
                                "name": "SysRoot",
                                "title": "SysRoot",
                                "description": "",
                                "revision": {
                                    "prev": "",
                                    "curr": "1",
                                    "createdAt": "2020-07-16T18:19:56Z",
                                    "createdBy": "SYSTEM_ROOT",
                                    "updatedAt": "1970-01-01T00:00:01Z",
                                    "updatedBy": "SYSTEM_ROOT"
                                },
                                "type": "USER_ROLE_CLUSTER",
                                "state": "ROLE_STATE_ACTIVE",
                                "scopes": [
                                    {
                                        "accessDevice": "PermissionAccessCreateReadUpdateDelete",
                                        "accessApp": "PermissionAccessCreateReadUpdateDelete",
                                        "accessUser": "PermissionAccessCreateReadUpdateDelete",
                                        "accessStorage": "PermissionAccessCreateReadUpdateDelete",
                                        "accessEnterprise": "PermissionAccessCreateReadUpdateDelete",
                                        "enterpriseFilter": [
                                            "srAll"
                                        ],
                                        "projectFilter": [
                                            "srAll"
                                        ]
                                    }
                                ]
                            },
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the role. Name cannot be changed once created",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title of the role. Title can be changed anytime",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the role",
                                    "maxLength": 256
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "System defined info",
                                    "readOnly": true
                                },
                                "type": {
                                    "$ref": "#/definitions/UserRole",
                                    "description": "Type of the role"
                                },
                                "state": {
                                    "$ref": "#/definitions/RoleState",
                                    "description": "State of the role"
                                },
                                "scopes": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Scope"
                                    },
                                    "description": "Scopes/Permissions associated with the role"
                                },
                                "projectTags": {
                                    "type": "string",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Map of project tags filter"
                                }
                            },
                            "description": "Role meta data",
                            "title": "Role detail",
                            "required": [
                                "name",
                                "title",
                                "type",
                                "scopes"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/roles/name/{name}": {
            "get": {
                "summary": "Get IAM role",
                "description": "Get the configuration (without security details) of an IAM role record.",
                "operationId": "IdentityAccessManagement_GetRoleByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/roles/self": {
            "get": {
                "summary": "Get own IAM role",
                "description": "Get the configuration (without security details) of user's own IAM role record.",
                "operationId": "IdentityAccessManagement_GetRoleSelf",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                },
                "parameters": [
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/sessions": {
            "get": {
                "summary": "Query user sessions",
                "description": "Query all the active user sessions for all users.",
                "operationId": "IdentityAccessManagement_QueryUserSessions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAASuccessResponseQueryAllSessionDetails"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                },
                "parameters": [
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/sessions/refresh": {
            "put": {
                "summary": "Refresh current user session",
                "description": "Refresh the current user session. The current session will be extended for another 4 hours.",
                "operationId": "IdentityAccessManagement_RefreshUserSession",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_RefreshResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                },
                "parameters": [
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/sessions/self": {
            "get": {
                "summary": "Get current user session",
                "description": "Get the details of the current user session.",
                "operationId": "IdentityAccessManagement_GetUserSessionSelf",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_SessionDetailsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                },
                "parameters": [
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/sessions/token": {
            "get": {
                "summary": "Get user session",
                "description": "Get the details of a user session with given session token.",
                "operationId": "IdentityAccessManagement_GetUserSession2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_SessionDetailsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "sessionToken.base64",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/sessions/token/self": {
            "post": {
                "summary": "Generate a new session token",
                "description": "Generate a new token with an extended expiry time. The desired expiry time should be passed as number of seconds.",
                "operationId": "IdentityAccessManagement_CreateUserSessionSelf",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_GenerateTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                },
                "parameters": [
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/sessions/token/{sessionToken.base64}": {
            "get": {
                "summary": "Get user session",
                "description": "Get the details of a user session with given session token.",
                "operationId": "IdentityAccessManagement_GetUserSession",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/AAA_Frontend_SessionDetailsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "sessionToken.base64",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/users": {
            "get": {
                "summary": "Query IAM users",
                "description": "Query the IAM user records.",
                "operationId": "IdentityAccessManagement_QueryUsers",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "SfdcId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "HubspotId",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Entpstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "Userstate",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "project",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "all",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "post": {
                "summary": "Create IAM user",
                "description": "Create an IAM user record.",
                "operationId": "IdentityAccessManagement_CreateUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this IAM user record will conflict with an already existing IAM user record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DetailedUser"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/users/id/{id}": {
            "get": {
                "summary": "Get IAM user",
                "description": "Get the configuration (without security details) of an IAM user record.",
                "operationId": "IdentityAccessManagement_GetUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "delete": {
                "summary": "Delete IAM user",
                "description": "Delete an IAM user record.",
                "operationId": "IdentityAccessManagement_DeleteUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            },
            "put": {
                "summary": "Update IAM user",
                "description": "Update an IAM user record. The usual pattern to update an IAM user record is to retrieve the record and update with the modified values in a new body to update the IAM user record.",
                "operationId": "IdentityAccessManagement_UpdateUser2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing IAM user record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "Unique system defined user ID",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "username": {
                                    "type": "string",
                                    "description": "User defined name",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "SfdcId": {
                                    "type": "string"
                                },
                                "HubspotId": {
                                    "type": "string"
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "system defined info",
                                    "readOnly": true
                                },
                                "state": {
                                    "$ref": "#/definitions/UserState",
                                    "description": "User state",
                                    "readOnly": true
                                },
                                "firstName": {
                                    "type": "string",
                                    "description": "First name of the user"
                                },
                                "locale": {
                                    "type": "string",
                                    "description": "Locale of the user"
                                },
                                "fullName": {
                                    "type": "string",
                                    "description": "Full name of the user"
                                },
                                "timeZone": {
                                    "type": "string",
                                    "description": "Preferred time zone of the user"
                                },
                                "roleId": {
                                    "type": "string",
                                    "description": "Role associated with the user",
                                    "pattern": "[0-9A-Za-z_=-]{28}"
                                },
                                "type": {
                                    "$ref": "#/definitions/AuthType",
                                    "description": "Type of the user"
                                },
                                "email": {
                                    "type": "string",
                                    "description": "Email of the user"
                                },
                                "phone": {
                                    "type": "string",
                                    "description": "Phone number of the user"
                                },
                                "notifyPref": {
                                    "type": "string",
                                    "description": "Notification preference of the user"
                                },
                                "LastLoginTime": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "Last login time of the user",
                                    "title": "Operational Status to be returned to CLI/UI"
                                },
                                "LastLogoutTime": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "Last logout time of the user"
                                },
                                "emailState": {
                                    "$ref": "#/definitions/IdState",
                                    "description": "Email state",
                                    "readOnly": true
                                },
                                "phoneState": {
                                    "$ref": "#/definitions/IdState",
                                    "description": "Phone state",
                                    "readOnly": true
                                },
                                "customUserInput": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Custom user parameters"
                                },
                                "allowedEnterprises": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/AllowedEnterprise"
                                    },
                                    "description": "Permitted list of enterprises with their associated roles"
                                },
                                "enterpriseId": {
                                    "type": "string",
                                    "description": "Origin enterprise of the user",
                                    "readOnly": true
                                },
                                "totpEnabled": {
                                    "type": "boolean",
                                    "description": "Is TOTP enrolment enabled",
                                    "readOnly": true
                                }
                            },
                            "description": "User meta data",
                            "title": "User detail",
                            "required": [
                                "username",
                                "email",
                                "roleId"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/users/name/{name}": {
            "get": {
                "summary": "Get IAM user",
                "description": "Get the configuration (without security details) of an IAM user record.",
                "operationId": "IdentityAccessManagement_GetUserByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        },
        "/v1/users/self": {
            "get": {
                "summary": "Get own IAM user",
                "description": "Get the configuration (without security details) of user's own IAM user record.",
                "operationId": "IdentityAccessManagement_GetUserSelf",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponseRead"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                },
                "parameters": [
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "summary": "Update IAM user",
                "description": "Update an IAM user record. The usual pattern to update an IAM user record is to retrieve the record and update with the modified values in a new body to update the IAM user record.",
                "operationId": "IdentityAccessManagement_UpdateUser",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/CrudResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing IAM user record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DetailedUser"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "IdentityAccessManagement"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
                }
            }
        }
    },
    "definitions": {
        "AAAFailureResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/AAAFailureResponseType"
                },
                "login": {
                    "$ref": "#/definitions/AAAFailureResponseLogin"
                },
                "refresh": {
                    "$ref": "#/definitions/AAAFailureTokenRefresh"
                },
                "logout": {
                    "$ref": "#/definitions/AAAFailureResponseLogout"
                },
                "details": {
                    "$ref": "#/definitions/AAAFailureResponseSessionDetails"
                },
                "credential": {
                    "$ref": "#/definitions/AAAFailureResponseCredentialChange"
                },
                "querySessionDetails": {
                    "$ref": "#/definitions/AAAFailureResponseQueryAllSessionDetails"
                },
                "generateToken": {
                    "$ref": "#/definitions/AAAFailureResponseGenerateToken"
                }
            }
        },
        "AAAFailureResponseCredentialChange": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAAFailureResponseCredentialChangeCause"
                }
            }
        },
        "AAAFailureResponseCredentialChangeCause": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAFailureResponseCredentialChangeCauseUnknown",
                "AAAFailureResponseCredentialChangeCauseAuthenticationFailure",
                "AAAFailureResponseCredentialChangeCausePermissionDenied",
                "AAAFailureResponseCredentialChangeCauseInternalServerError",
                "AAAFailureResponseCredentialChangeCauseAlreadyExists",
                "AAAFailureResponseCredentialChangeCausePasswordTooSimple",
                "AAAFailureResponseCredentialChangeCauseNotFound"
            ],
            "default": "__INVALID__"
        },
        "AAAFailureResponseGenerateToken": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAAFailureResponseGenerateTokenCause"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "AAAFailureResponseGenerateTokenCause": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAFailureResponseGenerateTokenCauseUserUnknown",
                "AAAFailureResponseGenerateTokenCauseException",
                "AAAFailureResponseGenerateTokenCauseEnterpriseUnknown",
                "AAAFailureResponseGenerateTokenCauseForbidden",
                "AAAFailureResponseGenerateTokenCauseInternalError"
            ],
            "default": "__INVALID__"
        },
        "AAAFailureResponseLogin": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAAFailureResponseLoginCause"
                },
                "error": {
                    "type": "string"
                },
                "noOfLoginAttemptsLeft": {
                    "type": "integer",
                    "format": "int64"
                },
                "tempToken": {
                    "$ref": "#/definitions/Token64"
                },
                "tempSuccessResponse": {
                    "$ref": "#/definitions/AAASuccessResponseLogin",
                    "description": "Sessions depend heavily on AAASuccessResponseLogin. In case of password expired,\nwe need temporary token. We can not generate a temporary token for password reset with\nAAAFailureResponseLogin itself. Therefore, adding this tempSuccessResponse, to be used to create new session."
                }
            }
        },
        "AAAFailureResponseLoginCause": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAFailureResponseLoginCauseGarbage",
                "AAAFailureResponseLoginCauseRealmUnknown",
                "AAAFailureResponseLoginCauseUserUnknown",
                "AAAFailureResponseLoginCauseUserSuspended",
                "AAAFailureResponseLoginCausePasswordMismatch",
                "AAAFailureResponseLoginCauseChallengeMismatch",
                "AAAFailureResponseLoginCauseNoSuchCredentials",
                "AAAFailureResponseLoginCauseException",
                "AAAFailureResponseLoginCauseEnterpriseUnknown",
                "AAAFailureResponseLoginCauseSchemeUnknown",
                "AAAFailureResponseLoginCauseUserSignedupState",
                "AAAFailureResponseLoginCauseRoleUnknown",
                "AAAFailureResponseLoginCauseUpdateLastLoginTimeFailed",
                "AAAFailureResponseLoginCauseEnterpriseInactive",
                "AAAFailureResponseLoginCauseUserInactive",
                "AAAFailureResponseLoginCauseEnterpriseSignedupState",
                "AAAFailureResponseLoginCauseEnterpriseUnknownState",
                "AAAFailureResponseLoginCauseUserUnknownState",
                "AAAFailureResponseLoginCauseEnterpriseCreatedState",
                "AAAFailureResponseLoginCauseUserCreatedState",
                "AAAFailureResponseLoginCausePasswordMismatchAndMaxFailedPwdAttempt",
                "AAAFailureResponseLoginCausePasswordDecryptionFailed",
                "AAAFailureResponseLoginCausePasswordExpired",
                "TOTPError",
                "TOTPInvalidCode"
            ],
            "default": "__INVALID__",
            "title": "Reason why authentication failed, this is more detailed than should be passed on to external clients"
        },
        "AAAFailureResponseLogout": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAAFailureResponseLogoutCause"
                },
                "original": {
                    "$ref": "#/definitions/OpaqueToken64"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "AAAFailureResponseLogoutCause": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAFailureResponseLogoutCauseUnknown",
                "AAAFailureResponseLogoutCauseGarbage",
                "AAAFailureResponseLogoutCauseExpired",
                "AAAFailureResponseLogoutCauseNoSuchSession"
            ],
            "default": "__INVALID__"
        },
        "AAAFailureResponseQueryAllSessionDetails": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "cause": {
                    "$ref": "#/definitions/AAAFailureResponseQueryAllSessionDetailsCause"
                }
            }
        },
        "AAAFailureResponseQueryAllSessionDetailsCause": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAFailureResponseQueryAllSessionDetailsCauseUnknown",
                "AAAFailureResponseQueryAllSessionDetailsCauseUnauthorizedAccess",
                "AAAFailureResponseQueryAllSessionDetailsCauseUserUnknown"
            ],
            "default": "__INVALID__"
        },
        "AAAFailureResponseSessionDetails": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAAFailureResponseSessionDetailsCause"
                },
                "original": {
                    "$ref": "#/definitions/OpaqueToken64"
                }
            }
        },
        "AAAFailureResponseSessionDetailsCause": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAFailureResponseSessionDetailsCauseUnknown",
                "AAAFailureResponseSessionDetailsCauseNoSuchSession"
            ],
            "default": "__INVALID__"
        },
        "AAAFailureResponseType": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAFailureResponseTypeNone",
                "AAAFailureResponseTypeLogin",
                "AAAFailureResponseTypeRefresh",
                "AAAFailureResponseTypeLogout",
                "AAAFailureResponseTypeSessionDetails",
                "AAAFailureResponseTypeCredentialChange",
                "AAAFailureResponseTypeQueryAllSessionDetails",
                "AAAFailureResponseTypeGenerateToken"
            ],
            "default": "__INVALID__"
        },
        "AAAFailureTokenRefresh": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAAFailureTokenRefreshCause"
                },
                "original": {
                    "$ref": "#/definitions/OpaqueToken64"
                },
                "error": {
                    "type": "string"
                }
            },
            "title": "The token did not get refreshed for a specific reason. Supplies original token in the response"
        },
        "AAAFailureTokenRefreshCause": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAFailureTokenRefreshCauseExpired",
                "AAAFailureTokenRefreshCauseUnknown"
            ],
            "default": "__INVALID__",
            "title": "Reason why token refresh failed"
        },
        "AAALoginModeResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/AAALoginModeResponseMode"
                }
            }
        },
        "AAALoginModeResponseMode": {
            "type": "string",
            "enum": [
                "AAALoginModeLocal",
                "AAALoginModeExternal"
            ],
            "default": "AAALoginModeLocal"
        },
        "AAANotifyResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/AAANotifyResponseType"
                },
                "login": {
                    "$ref": "#/definitions/AAASuccessResponseLogin"
                },
                "logout": {
                    "$ref": "#/definitions/AAASuccessResponseLogout"
                }
            }
        },
        "AAANotifyResponseType": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAANotifyTypeLogin",
                "AAANotifyTypeLogout"
            ],
            "default": "__INVALID__"
        },
        "AAARedirectResponse": {
            "type": "object",
            "properties": {
                "redirectUrl": {
                    "type": "string"
                },
                "code": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "AAARequestAdminUserSignup": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "enterpriseName": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/CredentialType"
                },
                "password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "AAARequestEnterpriseSignup": {
            "type": "object",
            "properties": {
                "enterprise": {
                    "$ref": "#/definitions/Enterprise"
                },
                "adminUser": {
                    "$ref": "#/definitions/AdminUserSignup"
                },
                "realmList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profileType": {
                    "$ref": "#/definitions/AuthProfileType"
                },
                "token": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "employerName": {
                    "type": "string"
                }
            }
        },
        "AAARequestLoginForgotPassword": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "AAAResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/AAAResponseType"
                },
                "success": {
                    "$ref": "#/definitions/AAASuccessResponse"
                },
                "failure": {
                    "$ref": "#/definitions/AAAFailureResponse"
                },
                "notify": {
                    "$ref": "#/definitions/AAANotifyResponse"
                },
                "redirect": {
                    "$ref": "#/definitions/AAARedirectResponse"
                },
                "mode": {
                    "$ref": "#/definitions/AAALoginModeResponse"
                },
                "result": {
                    "$ref": "#/definitions/ZsrvResponse"
                },
                "totpURL": {
                    "$ref": "#/definitions/TOTPEnrolmentURL"
                }
            },
            "title": "BEGIN: Responses"
        },
        "AAAResponseType": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAAResponseTypeSuccess",
                "AAAResponseTypeFailure",
                "AAAResponseTypeNotify",
                "AAAResponseTypeEnterpriseSignup",
                "AAAResponseTypeAdminUserSignup",
                "AAAResponseTypeRedirect",
                "AAAResponseTypeLoginMode",
                "TOTPEnrolment",
                "EnrolTOTP"
            ],
            "default": "__INVALID__"
        },
        "AAASuccessResponse": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/AAASuccessResponseType"
                },
                "login": {
                    "$ref": "#/definitions/AAASuccessResponseLogin"
                },
                "refresh": {
                    "$ref": "#/definitions/AAASuccessTokenRefresh"
                },
                "details": {
                    "$ref": "#/definitions/AAASuccessSessionDetailsResponse"
                },
                "logout": {
                    "$ref": "#/definitions/AAASuccessResponseLogout"
                },
                "credential": {
                    "$ref": "#/definitions/AAASuccessResponseCredentialChange"
                },
                "querySessionDetails": {
                    "$ref": "#/definitions/AAASuccessResponseQueryAllSessionDetails"
                },
                "generateToken": {
                    "$ref": "#/definitions/AAASuccessResponseGenerateToken"
                }
            }
        },
        "AAASuccessResponseCredentialChange": {
            "type": "object",
            "properties": {
                "credentialId": {
                    "type": "string"
                }
            }
        },
        "AAASuccessResponseGenerateToken": {
            "type": "object",
            "properties": {
                "login": {
                    "$ref": "#/definitions/AAASuccessResponseLogin"
                },
                "sessionDetails": {
                    "$ref": "#/definitions/SessionDetails"
                }
            }
        },
        "AAASuccessResponseLogin": {
            "type": "object",
            "properties": {
                "userId": {
                    "$ref": "#/definitions/Identifier64"
                },
                "token": {
                    "$ref": "#/definitions/Token64"
                },
                "enterpriseId": {
                    "$ref": "#/definitions/Identifier64"
                },
                "realmId": {
                    "$ref": "#/definitions/Identifier64"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Policy"
                    },
                    "title": "BEGIN: Only valid when a certain verbosity level is requested"
                },
                "simpleUser": {
                    "$ref": "#/definitions/SimpleUser"
                },
                "detailedUser": {
                    "$ref": "#/definitions/DetailedUser"
                },
                "realm": {
                    "$ref": "#/definitions/Realm"
                },
                "enterprise": {
                    "$ref": "#/definitions/Enterprise"
                },
                "role": {
                    "$ref": "#/definitions/Role"
                },
                "loginToken": {
                    "$ref": "#/definitions/Token64"
                },
                "apiToken": {
                    "$ref": "#/definitions/Token64"
                },
                "passwordExpiryTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "passwordExpiryNotificationPeriodInSeconds": {
                    "type": "integer",
                    "format": "int64"
                },
                "isJWTValid": {
                    "type": "boolean"
                }
            },
            "title": "AAA was successful"
        },
        "AAASuccessResponseLogout": {
            "type": "object",
            "properties": {
                "original": {
                    "$ref": "#/definitions/OpaqueToken64"
                }
            }
        },
        "AAASuccessResponseQueryAllSessionDetails": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAASuccessResponseQueryAllSessionDetailsCause"
                },
                "sessionDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SessionDetails"
                    }
                }
            }
        },
        "AAASuccessResponseQueryAllSessionDetailsCause": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "OK",
                "FAILED"
            ],
            "default": "__INVALID__"
        },
        "AAASuccessResponseType": {
            "type": "string",
            "enum": [
                "__INVALID__",
                "AAASuccessResponseTypeLogin",
                "AAASuccessResponseTypeRefresh",
                "AAASuccessResponseTypePermisson",
                "AAASuccessResponseTypeLogout",
                "AAASuccessResponseTypeSessionDetails",
                "AAASuccessResponseTypeCredentialChange",
                "AAASuccessResponseTypeQueryAllSessionDetails",
                "AAASuccessResponseTypeGenerateToken"
            ],
            "default": "__INVALID__"
        },
        "AAASuccessSessionDetailsResponse": {
            "type": "object",
            "properties": {
                "original": {
                    "$ref": "#/definitions/OpaqueToken64"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Policy"
                    }
                },
                "user": {
                    "$ref": "#/definitions/DetailedUser"
                }
            }
        },
        "AAASuccessTokenRefresh": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/Token64"
                }
            },
            "title": "Token64 refresh was successful"
        },
        "AAA_Frontend_GenerateTokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "userName": {
                    "type": "string"
                },
                "clientIp": {
                    "type": "string"
                },
                "userAgent": {
                    "type": "string"
                },
                "cause": {
                    "$ref": "#/definitions/AAA_Frontend_GenerateTokenResponseCause"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "AAA_Frontend_GenerateTokenResponseCause": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "OK",
                "USER_UNKNOWN",
                "EXCEPTION"
            ],
            "default": "UNSPECIFIED"
        },
        "AAA_Frontend_LoginModeRequest": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "AAA_Frontend_LoginModeResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "mode": {
                    "$ref": "#/definitions/AAA_Frontend_LoginModeResponseMode"
                }
            }
        },
        "AAA_Frontend_LoginModeResponseMode": {
            "type": "string",
            "enum": [
                "LOCAL",
                "EXTERNAL"
            ],
            "default": "LOCAL"
        },
        "AAA_Frontend_LoginResponse": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAA_Frontend_LoginResponseCause"
                },
                "userId": {
                    "type": "string",
                    "title": "BEGIN: Only valid when Cause == OK"
                },
                "token": {
                    "$ref": "#/definitions/Token64"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Policy"
                    },
                    "title": "BEGIN: Only valid when Verbose is requesed"
                },
                "simpleUser": {
                    "$ref": "#/definitions/SimpleUser"
                },
                "detailedUser": {
                    "$ref": "#/definitions/DetailedUser"
                },
                "realm": {
                    "$ref": "#/definitions/Realm"
                },
                "enterprise": {
                    "$ref": "#/definitions/Enterprise"
                },
                "role": {
                    "$ref": "#/definitions/Role"
                },
                "noOfLoginAttemptsLeft": {
                    "type": "integer",
                    "format": "int64"
                },
                "redirectUrl": {
                    "type": "string"
                },
                "loginToken": {
                    "$ref": "#/definitions/Token64"
                },
                "apiToken": {
                    "$ref": "#/definitions/Token64"
                },
                "passwordExpiryTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "passwordExpiryNotificationPeriodInSeconds": {
                    "type": "integer",
                    "format": "int64"
                },
                "tempToken": {
                    "$ref": "#/definitions/Token64"
                }
            }
        },
        "AAA_Frontend_LoginResponseCause": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "OK",
                "UNKNOWN",
                "CREDENTIALS",
                "SUSPENDED",
                "EXCEPTION",
                "INACTIVE",
                "SIGNEDUPSTATE",
                "UNKNOWNSTATE",
                "CREATEDSTATE",
                "USER_UNKNOWN",
                "ENTERPRISE_UNKNOWN",
                "ROLE_UNKNOWN",
                "USER_UNKNOWNSTATE",
                "USER_INACTIVE",
                "USER_SIGNEDUPSTATE",
                "USER_CREATEDSTATE",
                "ENTERPRISE_UNKNOWNSTATE",
                "ENTERPRISE_INACTIVE",
                "ENTERPRISE_SIGNEDUPSTATE",
                "ENTERPRISE_CREATEDSTATE",
                "CREDENTIAL_NOTFOUND",
                "CREDENTIAL_MISMATCH",
                "SCHEME_UNKNOWN",
                "UPDATE_LOGINTIME_FAILED",
                "CREDENTIAL_MISMATCH_MAX_FAILED_PWD_ATTEMPT",
                "REDIRECT",
                "DECRYPTION_FAILED",
                "PASSWORD_EXPIRED",
                "TOTP_OK",
                "TOTP_INVALID_CODE",
                "TOTP_ERR"
            ],
            "default": "UNSPECIFIED",
            "title": "- EXCEPTION: Some exception has occurred on the server"
        },
        "AAA_Frontend_LoginWithOauthRequest": {
            "type": "object",
            "properties": {
                "usernameAtRealm": {
                    "type": "string"
                },
                "enterpriseName": {
                    "type": "string"
                }
            }
        },
        "AAA_Frontend_LoginWithPasswordRequest": {
            "type": "object",
            "properties": {
                "usernameAtRealm": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "realm": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "verbosePolicy": {
                    "type": "boolean",
                    "title": "How verbal should the response be"
                },
                "verboseSimpleUser": {
                    "type": "boolean"
                },
                "verboseDetailedUser": {
                    "type": "boolean"
                },
                "verboseRealm": {
                    "type": "boolean"
                },
                "verboseEnterprise": {
                    "type": "boolean"
                },
                "enterpriseName": {
                    "type": "string"
                }
            },
            "description": "User either a combination of (username, realm) or (usernameAtRealm) to specify login details",
            "title": "Login request"
        },
        "AAA_Frontend_LogoutRequest": {
            "type": "object"
        },
        "AAA_Frontend_LogoutResponse": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAA_Frontend_LogoutResponseCause"
                },
                "token": {
                    "$ref": "#/definitions/OpaqueToken64"
                }
            }
        },
        "AAA_Frontend_LogoutResponseCause": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "OK",
                "FAILED"
            ],
            "default": "UNSPECIFIED"
        },
        "AAA_Frontend_OAUTHCallbackRequest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "AAA_Frontend_RefreshResponse": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAA_Frontend_RefreshResponseCause"
                },
                "userId": {
                    "type": "string",
                    "title": "BEGIN: Only valid when Cause == OK"
                },
                "token": {
                    "$ref": "#/definitions/Token64"
                }
            }
        },
        "AAA_Frontend_RefreshResponseCause": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "OK",
                "UNKNOWN",
                "CREDENTIALS",
                "EXPIRED"
            ],
            "default": "UNSPECIFIED"
        },
        "AAA_Frontend_SessionDetailsResponse": {
            "type": "object",
            "properties": {
                "cause": {
                    "$ref": "#/definitions/AAA_Frontend_SessionDetailsResponseCause"
                },
                "user": {
                    "$ref": "#/definitions/DetailedUser"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Policy"
                    }
                }
            }
        },
        "AAA_Frontend_SessionDetailsResponseCause": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "OK",
                "FAILED"
            ],
            "default": "UNSPECIFIED"
        },
        "AdminUserSignup": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/CredentialType"
                },
                "password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "AllowedEnterprise": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "roleId": {
                    "type": "string"
                }
            }
        },
        "AllowedEnterpriseList": {
            "type": "object",
            "properties": {
                "enterprises": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AllowedEnterprise"
                    },
                    "description": "List of child enterprises"
                },
                "error": {
                    "type": "string",
                    "description": "Error while fetching list of child enterprises, if any"
                },
                "next": {
                    "type": "string",
                    "$ref": "#/definitions/Cursor",
                    "description": "Next page information"
                },
                "total": {
                    "type": "string",
                    "format": "int64",
                    "description": "Total number of allowed enterprises"
                },
                "enterpriseEntitlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Entitlement"
                    },
                    "description": "Enterprises entitlement data"
                }
            },
            "description": "Get list of child enterprises",
            "title": "Get child enterprises"
        },
        "AppInstReport": {
            "type": "object",
            "properties": {
                "entpId": {
                    "type": "string",
                    "description": "Enterprise id for which we want to get summary report for all objects",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "appInstSummaryReport": {
                    "$ref": "#/definitions/AppInstSummaryReport",
                    "description": "Enterprise appInst report"
                },
                "error": {
                    "type": "string",
                    "description": "Error while fetching report for enterprise, if any"
                }
            },
            "description": "Get summary reports of appInst objects for self/child enterprise",
            "title": "Get appInst reports"
        },
        "AppInstSummaryReport": {
            "type": "object",
            "properties": {
                "totalAppInsts": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "AuthProfileType": {
            "type": "string",
            "enum": [
                "AUTH_PROFILE_TYPE_UNSPECIFIED",
                "AUTH_PROFILE_TYPE_OAUTH_AZURE_AD",
                "AUTH_PROFILE_TYPE_OAUTH_GOOGLE",
                "AUTH_PROFILE_TYPE_OAUTH_CUSTOM",
                "AUTH_PROFILE_TYPE_LOCAL"
            ],
            "default": "AUTH_PROFILE_TYPE_UNSPECIFIED"
        },
        "AuthType": {
            "type": "string",
            "enum": [
                "AUTH_TYPE_UNSPECIFIED",
                "AUTH_TYPE_LOCAL",
                "AUTH_TYPE_OAUTH",
                "AUTH_TYPE_SAML"
            ],
            "default": "AUTH_TYPE_UNSPECIFIED"
        },
        "AuthorizationProfile": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique system defined profile ID",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                },
                "enterpriseId": {
                    "type": "string",
                    "description": "Parent enterprise ID of the authorization profile",
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the profile. Profile name is unique within an enterprise. Name can't be changed once created",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "type": {
                    "$ref": "#/definitions/AuthType",
                    "description": "Type of the profile"
                },
                "oauthProfile": {
                    "$ref": "#/definitions/OAUTHProfile",
                    "description": "Oauth profile configuration details"
                },
                "passwordProfile": {
                    "$ref": "#/definitions/PasswordProfile"
                },
                "testOnly": {
                    "type": "boolean"
                },
                "active": {
                    "type": "boolean",
                    "description": "Mark this profile as active. Only one profile can be active in a given enterprise"
                },
                "defaultRoleId": {
                    "type": "string",
                    "description": "Default Role ID to associate with the profile",
                    "pattern": "[0-9A-Za-z_=-]{28}"
                },
                "title": {
                    "type": "string",
                    "description": "User defined title for the profile. Title can be changed anytime",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the profile",
                    "maxLength": 256
                },
                "profileType": {
                    "$ref": "#/definitions/AuthProfileType",
                    "description": "Authorization profile type"
                },
                "disableAutoUserCreate": {
                    "type": "boolean",
                    "description": "Do not automatically create new users if this is set"
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info",
                    "readOnly": true
                }
            },
            "description": "Authorization profile  meta data",
            "title": "Authorization profile detail",
            "required": [
                "name",
                "title",
                "defaultRoleId"
            ]
        },
        "AuthorizationProfiles": {
            "type": "object",
            "properties": {
                "summaryByState": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary of filtered profiles"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthorizationProfile"
                    },
                    "description": "List of profiles"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Page details of the filtered records"
                }
            }
        },
        "Credential": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/CredentialType"
                },
                "currentCred": {
                    "type": "string"
                },
                "newCred": {
                    "type": "string"
                },
                "forgot": {
                    "type": "boolean"
                },
                "salt": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "CredentialType": {
            "type": "string",
            "enum": [
                "CREDENTIAL_TYPE_UNSPECIFIED",
                "CREDENTIAL_TYPE_PASSWORD",
                "CREDENTIAL_TYPE_CHAP",
                "CREDENTIAL_TYPE_PUBLIC_KEY",
                "CREDENTIAL_TYPE_NONE"
            ],
            "default": "CREDENTIAL_TYPE_UNSPECIFIED"
        },
        "Credentials": {
            "type": "object",
            "properties": {
                "summaryByState": {
                    "$ref": "#/definitions/Summary"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Credential"
                    }
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            }
        },
        "CrudAction": {
            "type": "string",
            "enum": [
                "CrudAction__INVALID__",
                "CrudActionNotApplicable",
                "CrudActionCreate",
                "CrudActionRead",
                "CrudActionUpdate",
                "CrudActionDelete",
                "CrudActionQuery",
                "CrudActionQueryNext",
                "CrudActionReadSelf",
                "CrudActionUpdateSelf"
            ],
            "default": "CrudAction__INVALID__"
        },
        "CrudContent": {
            "type": "object",
            "properties": {
                "oid": {
                    "$ref": "#/definitions/Identifier64"
                },
                "encoding": {
                    "$ref": "#/definitions/CrudContentEncoding"
                },
                "clazz": {
                    "$ref": "#/definitions/ModelClazz"
                },
                "protobuf": {
                    "$ref": "#/definitions/CrudContentProtobuf"
                },
                "json": {
                    "$ref": "#/definitions/CrudContentJSON"
                }
            },
            "title": "Content, with a type encoded either as protobuf or json"
        },
        "CrudContentEncoding": {
            "type": "string",
            "enum": [
                "CrudPayloadEncoding__INVALID__",
                "CrudPayloadEncodingProtobuf",
                "CrudPayloadEncodingJSON"
            ],
            "default": "CrudPayloadEncoding__INVALID__"
        },
        "CrudContentJSON": {
            "type": "object",
            "properties": {
                "json": {
                    "type": "string"
                }
            }
        },
        "CrudContentProtobuf": {
            "type": "object",
            "properties": {
                "detailedUser": {
                    "$ref": "#/definitions/DetailedUser"
                },
                "simpleUser": {
                    "$ref": "#/definitions/SimpleUser"
                },
                "enterprise": {
                    "$ref": "#/definitions/Enterprise"
                },
                "realm": {
                    "$ref": "#/definitions/Realm"
                },
                "user": {
                    "$ref": "#/definitions/DetailedUser"
                },
                "credential": {
                    "$ref": "#/definitions/Credential"
                },
                "role": {
                    "$ref": "#/definitions/Role"
                },
                "policy": {
                    "$ref": "#/definitions/Policy"
                },
                "profile": {
                    "$ref": "#/definitions/AuthorizationProfile"
                },
                "docPolicy": {
                    "$ref": "#/definitions/DocPolicy"
                },
                "encryptedSecrets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cryptoKey": {
                    "type": "string"
                }
            }
        },
        "CrudResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "$ref": "#/definitions/OpaqueToken64"
                },
                "action": {
                    "$ref": "#/definitions/CrudAction"
                },
                "result": {
                    "$ref": "#/definitions/ZsrvResponse"
                },
                "read": {
                    "$ref": "#/definitions/CrudResponseRead"
                },
                "query": {
                    "$ref": "#/definitions/CrudResponseQuery"
                }
            }
        },
        "CrudResponseQuery": {
            "type": "object",
            "properties": {
                "queryToken": {
                    "$ref": "#/definitions/OpaqueToken64",
                    "title": "The unique id of the query"
                },
                "code": {
                    "$ref": "#/definitions/CrudResultCode",
                    "title": "Was there anything that matches"
                },
                "position": {
                    "type": "integer",
                    "format": "int64",
                    "title": "The index of the first result"
                },
                "size": {
                    "type": "integer",
                    "format": "int64",
                    "title": "The number of results returned, could be less than the requested size"
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "title": "The total number of result items for this query"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CrudResultWithContent"
                    },
                    "title": "List of the results"
                },
                "globalStatistics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CrudStatisticsContainer"
                    },
                    "title": "Global statistics"
                },
                "queryStatistics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CrudStatisticsContainer"
                    },
                    "title": "Global statistics"
                },
                "clazz": {
                    "$ref": "#/definitions/ModelClazz"
                },
                "profiles": {
                    "$ref": "#/definitions/AuthorizationProfiles"
                },
                "enterprises": {
                    "$ref": "#/definitions/Enterprises"
                },
                "roles": {
                    "$ref": "#/definitions/Roles"
                },
                "realms": {
                    "$ref": "#/definitions/Realms"
                },
                "credentials": {
                    "$ref": "#/definitions/Credentials"
                },
                "users": {
                    "$ref": "#/definitions/DetailedUsers"
                },
                "policies": {
                    "$ref": "#/definitions/Policies"
                },
                "docPolicies": {
                    "$ref": "#/definitions/DocPolicies"
                },
                "allowedEnterpriseList": {
                    "$ref": "#/definitions/AllowedEnterpriseList"
                },
                "userSummaryReport": {
                    "$ref": "#/definitions/UserSummaryReport"
                },
                "userUsagePerEnterpriseList": {
                    "$ref": "#/definitions/UserUsagePerEnterpriseList"
                }
            }
        },
        "CrudResponseRead": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/CrudResultWithContent"
                }
            }
        },
        "CrudResultCode": {
            "type": "string",
            "enum": [
                "CrudResultCode__INVALID__",
                "CrudResultCodeSuccess",
                "CrudResultCodeAuthentication",
                "CrudResultCodeAlreadyExists",
                "CrudResultCodeException",
                "CrudResultCodeHasDependencies",
                "CrudResultCodeIllegalArgument",
                "CrudResultCodeIllegalRequest",
                "CrudResultCodeIncomplete",
                "CrudResultCodeInternalError",
                "CrudResultCodeNotFound",
                "CrudResultCodeNotIdentified",
                "CrudResultCodePermissionDenied",
                "CrudResultCodeQueryExpired",
                "CrudResultCodeUnknown"
            ],
            "default": "CrudResultCode__INVALID__",
            "title": "Responses to the action requests"
        },
        "CrudResultWithContent": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/CrudResultCode"
                },
                "content": {
                    "$ref": "#/definitions/CrudContent"
                },
                "identifier": {
                    "$ref": "#/definitions/Identifier64"
                }
            }
        },
        "CrudStatisticsContainer": {
            "type": "object",
            "properties": {
                "clazz": {
                    "$ref": "#/definitions/ModelClazz"
                },
                "user": {
                    "$ref": "#/definitions/CrudStatisticsUser"
                }
            },
            "title": "Container for per-clazz statistics"
        },
        "CrudStatisticsUser": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "format": "int64"
                },
                "suspended": {
                    "type": "integer",
                    "format": "int64"
                },
                "deleted": {
                    "type": "integer",
                    "format": "int64"
                }
            },
            "title": "User related statistics"
        },
        "Cursor": {
            "type": "object",
            "properties": {
                "pageToken": {
                    "type": "string",
                    "description": "Page Token"
                },
                "orderBy": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OrderBy helps in sorting the list response"
                },
                "pageNum": {
                    "type": "number",
                    "format": "int64",
                    "description": "Page Number"
                },
                "pageSize": {
                    "type": "number",
                    "format": "int64",
                    "description": "Defines the page size"
                },
                "totalPages": {
                    "type": "number",
                    "format": "int64",
                    "description": "Total number of pages to be fetched."
                }
            },
            "description": "Cursor helps in filtering the various list response like edge-app bundle list, model list, bundle list etc. ",
            "title": "Cursor is used as filter in list operation."
        },
        "DataStream": {
            "type": "object",
            "properties": {
                "pluginId": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "DetailedUser": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique system defined user ID",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                },
                "username": {
                    "type": "string",
                    "description": "User defined name",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "SfdcId": {
                    "type": "string"
                },
                "HubspotId": {
                    "type": "string"
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info",
                    "readOnly": true
                },
                "state": {
                    "$ref": "#/definitions/UserState",
                    "description": "User state",
                    "readOnly": true
                },
                "firstName": {
                    "type": "string",
                    "description": "First name of the user"
                },
                "locale": {
                    "type": "string",
                    "description": "Locale of the user"
                },
                "fullName": {
                    "type": "string",
                    "description": "Full name of the user"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Preferred time zone of the user"
                },
                "roleId": {
                    "type": "string",
                    "description": "Role associated with the user",
                    "pattern": "[0-9A-Za-z_=-]{28}"
                },
                "type": {
                    "$ref": "#/definitions/AuthType",
                    "description": "Type of the user"
                },
                "email": {
                    "type": "string",
                    "description": "Email of the user"
                },
                "phone": {
                    "type": "string",
                    "description": "Phone number of the user"
                },
                "notifyPref": {
                    "type": "string",
                    "description": "Notification preference of the user"
                },
                "LastLoginTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last login time of the user",
                    "title": "Operational Status to be returned to CLI/UI"
                },
                "LastLogoutTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last logout time of the user"
                },
                "emailState": {
                    "$ref": "#/definitions/IdState",
                    "description": "Email state",
                    "readOnly": true
                },
                "phoneState": {
                    "$ref": "#/definitions/IdState",
                    "description": "Phone state",
                    "readOnly": true
                },
                "customUserInput": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom user parameters"
                },
                "allowedEnterprises": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AllowedEnterprise"
                    },
                    "description": "Permitted list of enterprises with their associated roles"
                },
                "enterpriseId": {
                    "type": "string",
                    "description": "Origin enterprise of the user",
                    "readOnly": true
                },
                "totpEnabled": {
                    "type": "boolean",
                    "description": "Is TOTP enrolment enabled",
                    "readOnly": true
                }
            },
            "description": "User meta data",
            "title": "User detail",
            "required": [
                "username",
                "email",
                "roleId"
            ]
        },
        "DetailedUsers": {
            "type": "object",
            "properties": {
                "summaryByState": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary of filtered users"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DetailedUser"
                    },
                    "description": "List of users"
                },
                "summaryByUserActivity": {
                    "$ref": "#/definitions/Summary",
                    "description": "Count of online/offline users"
                },
                "summaryByRoleDistribution": {
                    "$ref": "#/definitions/Summary",
                    "description": "User distribution by role"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Page details of the filtered records"
                }
            }
        },
        "DeviceDistribution": {
            "type": "object",
            "properties": {
                "projectName": {
                    "type": "string"
                },
                "deviceCount": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "DeviceEntitlement": {
            "type": "object",
            "properties": {
                "size": {
                    "$ref": "#/definitions/DeviceSize"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "usage": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "DeviceReport": {
            "type": "object",
            "properties": {
                "entpId": {
                    "type": "string",
                    "description": "Enterprise id for which we want to get summary report for all objects",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "deviceSummaryReport": {
                    "$ref": "#/definitions/DeviceSummaryReport",
                    "description": "Enterprise device report"
                },
                "error": {
                    "type": "string",
                    "description": "Error while fetching report for enterprise, if any"
                }
            },
            "description": "Get summary reports of device objects for self/child enterprise",
            "title": "Get device reports"
        },
        "DeviceSize": {
            "type": "string",
            "enum": [
                "DEFAULT_SIZE",
                "SMALL_SIZE",
                "MEDIUM_SIZE",
                "LARGE_SIZE",
                "XLARGE_SIZE"
            ],
            "default": "DEFAULT_SIZE"
        },
        "DeviceSummaryReport": {
            "type": "object",
            "properties": {
                "totalDevices": {
                    "type": "integer",
                    "format": "int64"
                },
                "summaryByState": {
                    "$ref": "#/definitions/Summary"
                }
            }
        },
        "DocPolicies": {
            "type": "object",
            "properties": {
                "summaryByState": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary of filtered docpolicy"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DocPolicySummary"
                    },
                    "description": "List of docpolicy"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Page details of the filtered records"
                }
            }
        },
        "DocPolicy": {
            "type": "object",
            "example": {
                "id": "EAJ1ABAi-KOom7dJlrBoE8eq1pj9",
                "policyName": "xxxxxxxxx",
                "version": "xxxxxxx",
                "fileURL": "xxxxxxxx",
                "serverHost": "zedcontrol.local.zededa.net",
                "latest": false,
                "revision": {
                    "prev": "",
                    "curr": "1",
                    "createdAt": "2020-07-17T06:03:14Z",
                    "createdBy": "us.root@zededa.com",
                    "updatedAt": "2020-07-17T06:03:14Z",
                    "updatedBy": "us.root@zededa.com"
                }
            },
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique system defined docpolicy ID",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                },
                "policyName": {
                    "type": "string",
                    "description": "User defined name of the docpolicy. Name cannot be changed once created",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "version": {
                    "type": "string",
                    "description": "Policy doc version"
                },
                "fileURL": {
                    "type": "string",
                    "description": "Policy doc fileURL"
                },
                "serverHost": {
                    "type": "string",
                    "description": "Server Host"
                },
                "latest": {
                    "type": "boolean",
                    "description": "Mark latest docpolicy check"
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "System defined info",
                    "readOnly": true
                }
            },
            "description": "DocPolicy meta data",
            "title": "DocPolicy detail",
            "required": [
                "policyName"
            ]
        },
        "DocPolicySummary": {
            "type": "object",
            "example": {
                "policyName": "xxxxxxxxx",
                "version": "xxxxxxx",
                "fileURL": "xxxxxxxx",
                "revision": {
                    "prev": "",
                    "curr": "1",
                    "createdAt": "2020-07-17T06:03:14Z",
                    "createdBy": "us.root@zededa.com",
                    "updatedAt": "2020-07-17T06:03:14Z",
                    "updatedBy": "us.root@zededa.com"
                }
            },
            "properties": {
                "policy": {
                    "type": "string",
                    "description": "User defined name of the docpolicy. Name cannot be changed once created",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "version": {
                    "type": "string",
                    "description": "Policy doc version"
                },
                "fileURL": {
                    "type": "string",
                    "description": "Policy doc fileURL"
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "System defined info",
                    "readOnly": true
                }
            },
            "description": "DocPolicy meta data",
            "title": "DocPolicy detail"
        },
        "Enterprise": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique system defined enterprise ID",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the enterprise. Once enterprise is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "SfdcId": {
                    "type": "string"
                },
                "HubspotId": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/EnterpriseState",
                    "description": "Enterprise state"
                },
                "type": {
                    "$ref": "#/definitions/EnterpriseType",
                    "description": "Enterprise type"
                },
                "policyList": {
                    "$ref": "#/definitions/PolicyVersionList",
                    "description": "Policy version list"
                },
                "parentEntpId": {
                    "type": "string",
                    "description": "Parent enterprise ID",
                    "title": "string id = 100;\nstring name = 101;",
                    "pattern": "[0-9A-Za-z_=-]{28}"
                },
                "azureSubId": {
                    "type": "string",
                    "description": "Azure subscription ID tied to this enterprise"
                },
                "title": {
                    "type": "string",
                    "description": "User defined title for the enterprise. Title can be changed any time",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the enterprise",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info",
                    "readOnly": true
                },
                "realms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of realms associated with the enterprise"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "enterprise level key-value pairs"
                },
                "inheritAuthFromParent": {
                    "type": "boolean",
                    "description": "Perform authorization using parent enterprise"
                },
                "childEnterprises": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EnterpriseSummary"
                    },
                    "description": "List of all child enterprises"
                },
                "controllerHostURL": {
                    "type": "string",
                    "description": "zedcontrol host"
                },
                "streamEvents": {
                    "$ref": "#/definitions/DataStream",
                    "description": "Enable / Disable streaming of events to 3rd party end point"
                },
                "totpSettings": {
                    "$ref": "#/definitions/TOTPSettings",
                    "description": "Enterprise settings to enforce TOTP"
                },
                "apiTokenExpiryInSeconds": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Enterprise settings for API Token expiry to be set in seconds"
                }
            },
            "description": "Enterprise meta data",
            "title": "Enterprise detail",
            "required": [
                "name",
                "title"
            ]
        },
        "EnterpriseState": {
            "type": "string",
            "enum": [
                "ENTERPRISE_STATE_UNSPECIFIED",
                "ENTERPRISE_STATE_CREATED",
                "ENTERPRISE_STATE_DELETED",
                "ENTERPRISE_STATE_ACTIVE",
                "ENTERPRISE_STATE_INACTIVE",
                "ENTERPRISE_STATE_SIGNEDUP"
            ],
            "default": "ENTERPRISE_STATE_UNSPECIFIED"
        },
        "EnterpriseSummary": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "EnterpriseType": {
            "type": "string",
            "enum": [
                "ENTERPRISE_TYPE_UNSPECIFIED",
                "ENTERPRISE_TYPE_SELFSIGNUP"
            ],
            "default": "ENTERPRISE_TYPE_UNSPECIFIED"
        },
        "Enterprises": {
            "type": "object",
            "properties": {
                "summaryByState": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary of filtered enterprises"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Enterprise"
                    },
                    "description": "List of enterprises"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Page details of the filtered records"
                }
            }
        },
        "Entitlement": {
            "type": "object",
            "properties": {
                "entpId": {
                    "type": "string",
                    "description": "Enterprise id for which we want to post/get enforce entitlement",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "entpName": {
                    "type": "string",
                    "description": "Enterprise name for which we want to post/get enforce entitlement",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeviceEntitlement"
                    },
                    "description": "Device entitlement data"
                },
                "userCount": {
                    "$ref": "#/definitions/UserEntitlement",
                    "description": "User entitlement data"
                },
                "plugins": {
                    "$ref": "#/definitions/PluginEntitlement",
                    "description": "Plugin entitlement data"
                },
                "features": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureEntitlement"
                    },
                    "description": "Features entitlement data"
                }
            },
            "description": "Get Entitlement data",
            "title": "Entitlement data"
        },
        "FeatureEntitlement": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "subFeatureEntitlement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureEntitlement"
                    },
                    "title": "SubFeatureEntitlement represents nested sub-features entitlement"
                }
            }
        },
        "IdState": {
            "type": "string",
            "enum": [
                "ID_STATE_UNSPECIFIED",
                "ID_STATE_NOT_VERIFIED",
                "ID_STATE_VERIFIED"
            ],
            "default": "ID_STATE_UNSPECIFIED"
        },
        "Identifier64": {
            "type": "object",
            "properties": {
                "base64": {
                    "type": "string"
                }
            },
            "title": "Generic identifier, base64 encoding"
        },
        "JWTAuthProfileAlgorithm": {
            "type": "string",
            "enum": [
                "None",
                "RS256",
                "RS384",
                "RS512"
            ],
            "default": "None"
        },
        "LastLoggedinUserInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "lastLoginTime": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "ModelClazz": {
            "type": "string",
            "enum": [
                "ModelClazzUnspecified",
                "ModelClazzDetailedUser",
                "ModelClazzSimpleUser",
                "ModelClazzEnterprise",
                "ModelClazzRealm",
                "ModelClazzCredential",
                "ModelClazzPolicy",
                "ModelClazzRole",
                "ModelClazzProfile",
                "ModelClazzDocPolicy",
                "ModelClazzAllowedEnterpriseList",
                "ModelClazzTotalUserCount",
                "ModelClazzLastLoggedInUserInfo",
                "ModelClazzUserActivitySummary",
                "ModelClazzUserUsagePerEnterprise"
            ],
            "default": "ModelClazzUnspecified",
            "title": "Global identifier of clazz types"
        },
        "OAUTHProfile": {
            "type": "object",
            "properties": {
                "OIDCEndPoint": {
                    "type": "string",
                    "description": "OIDC endpoint for oauth validation"
                },
                "clientID": {
                    "type": "string",
                    "description": "OAUTH client ID"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "OAUTH client secret"
                },
                "encryptedSecrets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cryptoKey": {
                    "type": "string"
                },
                "roleScope": {
                    "type": "string",
                    "description": "OIDC scope to fetch application role"
                },
                "jwtAuthProfile": {
                    "$ref": "#/definitions/OAUTHProfileJWTAuthProfile",
                    "description": "Config for JWT based authentication, jwks_uri is derived from OIDC Well Known Endpoints"
                },
                "idpId": {
                    "type": "string",
                    "description": "id for Vmware IDP"
                },
                "additionalParameters": {
                    "type": "string",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "pass additional url parameters during the exchange and authorization process"
                }
            }
        },
        "OAUTHProfileJWTAuthProfile": {
            "type": "object",
            "properties": {
                "alg": {
                    "$ref": "#/definitions/JWTAuthProfileAlgorithm",
                    "description": "Algorithm for JWT signature verification"
                }
            },
            "description": "Config for JWT based authentication, jwks_uri is derived from OIDC Well Known Endpoints",
            "title": "JWT Authentication profile detail"
        },
        "ObjectRevision": {
            "type": "object",
            "properties": {
                "prev": {
                    "type": "string",
                    "description": "Previous"
                },
                "curr": {
                    "type": "string",
                    "description": "Current Database version of the record"
                },
                "createdAt": {
                    "type": "object",
                    "format": "date-time",
                    "description": "The time, in milliseconds since the epoch, when the record was created."
                },
                "createdBy": {
                    "type": "string",
                    "description": "User data: Created By"
                },
                "updatedAt": {
                    "type": "object",
                    "format": "date-time",
                    "description": "The time, in milliseconds since the epoch, when the record was last updated."
                },
                "updatedBy": {
                    "type": "string",
                    "description": "User data: Updated By"
                }
            },
            "description": "ObjectRevision store the user details, who has doent the necessary operation like Create Operation or update operation",
            "title": "ObjectRevision is used to store the user information.",
            "required": [
                "curr",
                "createdAt",
                "createdBy",
                "updatedAt",
                "updatedBy"
            ]
        },
        "ObjectType": {
            "type": "string",
            "enum": [
                "OBJECT_TYPE_UNSPECIFIED",
                "OBJECT_TYPE_USER",
                "OBJECT_TYPE_EDGE_NODE",
                "OBJECT_TYPE_EDGE_APP",
                "OBJECT_TYPE_IMAGE",
                "OBJECT_TYPE_EDGE_APP_INSTANCE",
                "OBJECT_TYPE_PROJECT",
                "OBJECT_TYPE_NETWORK",
                "OBJECT_TYPE_DATASTORE",
                "OBJECT_TYPE_SERVICE",
                "OBJECT_TYPE_SERVICE_INSTANCE",
                "OBJECT_TYPE_ENTERPRISE",
                "OBJECT_TYPE_ROLE",
                "OBJECT_TYPE_CREDENTIAL",
                "OBJECT_TYPE_NETWORK_INSTANCE",
                "OBJECT_TYPE_VOLUME_INSTANCE",
                "OBJECT_TYPE_REALM",
                "OBJECT_TYPE_AUTHPROFILE",
                "OBJECT_TYPE_POLICY",
                "OBJECT_TYPE_APP_POLICY",
                "OBJECT_TYPE_CLUSTER_INSTANCE",
                "OBJECT_TYPE_PLUGIN",
                "OBJECT_TYPE_DOC_POLICY",
                "OBJECT_TYPE_ORCHESTRATOR_CLUSTER",
                "OBJECT_TYPE_TAGS",
                "OBJECT_TYPE_EDGE_NODE_INTERFACE",
                "OBJECT_TYPE_DEPLOYMENT",
                "OBJECT_TYPE_ENTITLEMENTS",
                "OBJECT_TYPE_DATA_STREAM",
                "OBJECT_TYPE_API_USAGE",
                "OBJECT_TYPE_APP_INSTANCE_SNAPSHOT",
                "OBJECT_TYPE_PATCH_ENVELOPE",
                "OBJECT_TYPE_RESOURCE_USAGE_TRACK",
                "OBJECT_TYPE_PATCH_ENVELOPE_REFERENCE",
                "OBJECT_TYPE_DEV_PASSTHROUGH"
            ],
            "default": "OBJECT_TYPE_UNSPECIFIED"
        },
        "OpaqueToken64": {
            "type": "object",
            "properties": {
                "base64": {
                    "type": "string"
                }
            },
            "title": "Base64 encoded opaque token"
        },
        "PasswordProfile": {
            "type": "object",
            "properties": {
                "minLength": {
                    "type": "integer",
                    "format": "int64"
                },
                "maxLength": {
                    "type": "integer",
                    "format": "int64"
                },
                "minNumericChars": {
                    "type": "integer",
                    "format": "int64"
                },
                "minSymbolChars": {
                    "type": "integer",
                    "format": "int64"
                },
                "minUppercaseChars": {
                    "type": "integer",
                    "format": "int64"
                },
                "minLowercaseChars": {
                    "type": "integer",
                    "format": "int64"
                },
                "maxPasswordAge": {
                    "type": "integer",
                    "format": "int64"
                },
                "minPasswordAge": {
                    "type": "integer",
                    "format": "int64"
                },
                "numPrevPasswordCheck": {
                    "type": "integer",
                    "format": "int64"
                },
                "passwordExpiryNotificationPeriodInSeconds": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "PluginEntitlement": {
            "type": "object",
            "properties": {
                "pluginTotalLimit": {
                    "type": "integer",
                    "format": "int32"
                },
                "pluginTotalUsage": {
                    "type": "integer",
                    "format": "int64"
                },
                "pluginTypeEntitlement": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PluginTypeEntitlement"
                    }
                }
            }
        },
        "PluginReport": {
            "type": "object",
            "properties": {
                "entpId": {
                    "type": "string",
                    "description": "Enterprise id for which we want to get summary report for all objects",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "pluginSummaryReport": {
                    "$ref": "#/definitions/PluginSummaryReport",
                    "description": "Enterprise plugin report"
                },
                "error": {
                    "type": "string",
                    "description": "Error while fetching report for enterprise, if any"
                }
            },
            "description": "Get summary reports of plugin objects for self/child enterprise",
            "title": "Get plugin reports"
        },
        "PluginSummaryReport": {
            "type": "object",
            "properties": {
                "totalPlugins": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "PluginType": {
            "type": "string",
            "enum": [
                "PLUGIN_TYPE_UNSPECIFIED",
                "PLUGIN_TYPE_SPLUNK",
                "PLUGIN_TYPE_HTTP",
                "PLUGIN_TYPE_RANCHER",
                "PLUGIN_TYPE_VMWARE_VCO",
                "PLUGIN_TYPE_VMWARE_TMC"
            ],
            "default": "PLUGIN_TYPE_UNSPECIFIED"
        },
        "PluginTypeEntitlement": {
            "type": "object",
            "properties": {
                "pluginType": {
                    "$ref": "#/definitions/PluginType"
                },
                "pluginTypeLimit": {
                    "type": "integer",
                    "format": "int32"
                },
                "pluginTypeUsage": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Policies": {
            "type": "object",
            "properties": {
                "summaryByState": {
                    "$ref": "#/definitions/Summary"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Policy"
                    }
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            }
        },
        "Policy": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                },
                "scope": {
                    "$ref": "#/definitions/PolicyScope"
                },
                "access": {
                    "$ref": "#/definitions/PolicyAccess"
                },
                "ownerId": {
                    "type": "string"
                },
                "external": {
                    "type": "boolean"
                }
            }
        },
        "PolicyAccess": {
            "type": "string",
            "enum": [
                "PermissionAccess__INVALID__",
                "PermissionAccessCreate",
                "PermissionAccessRead",
                "PermissionAccessCreateRead",
                "PermissionAccessUpdate",
                "PermissionAccessCreateUpdate",
                "PermissionAccessReadUpdate",
                "PermissionAccessCreateReadUpdate",
                "PermissionAccessDelete",
                "PermissionAccessCreateDelete",
                "PermissionAccessReadDelete",
                "PermissionAccessCreateReadDelete",
                "PermissionAccessUpdateDelete",
                "PermissionAccessCreateUpdateDelete",
                "PermissionAccessReadUpdateDelete",
                "PermissionAccessCreateReadUpdateDelete",
                "PermissionAccessExecute",
                "PermissionAccessCreateExecute",
                "PermissionAccessReadExecute",
                "PermissionAccessCreateReadExecute",
                "PermissionAccessUpdateExecute",
                "PermissionAccessCreateUpdateExecute",
                "PermissionAccessReadUpdateExecute",
                "PermissionAccessCreateReadUpdateExecute",
                "PermissionAccessDeleteExecute",
                "PermissionAccessCreateDeleteExecute",
                "PermissionAccessReadDeleteExecute",
                "PermissionAccessCreateReadDeleteExecute",
                "PermissionAccessUpdateDeleteExecute",
                "PermissionAccessCreateUpdateDeleteExecute",
                "PermissionAccessReadUpdateDeleteExecute",
                "PermissionAccessCreateReadUpdateDeleteExecute",
                "PermissionAccessQuery",
                "PermissionAccessCreateQuery",
                "PermissionAccessReadQuery",
                "PermissionAccessCreateReadQuery",
                "PermissionAccessUpdateQuery",
                "PermissionAccessCreateUpdateQuery",
                "PermissionAccessReadUpdateQuery",
                "PermissionAccessCreateReadUpdateQuery",
                "PermissionAccessDeleteQuery",
                "PermissionAccessCreateDeleteQuery",
                "PermissionAccessReadDeleteQuery",
                "PermissionAccessCreateReadDeleteQuery",
                "PermissionAccessUpdateDeleteQuery",
                "PermissionAccessCreateUpdateDeleteQuery",
                "PermissionAccessReadUpdateDeleteQuery",
                "PermissionAccessCreateReadUpdateDeleteQuery",
                "PermissionAccessExecuteQuery",
                "PermissionAccessCreateExecuteQuery",
                "PermissionAccessReadExecuteQuery",
                "PermissionAccessCreateReadExecuteQuery",
                "PermissionAccessUpdateExecuteQuery",
                "PermissionAccessCreateUpdateExecuteQuery",
                "PermissionAccessReadUpdateExecuteQuery",
                "PermissionAccessCreateReadUpdateExecuteQuery",
                "PermissionAccessDeleteExecuteQuery",
                "PermissionAccessCreateDeleteExecuteQuery",
                "PermissionAccessReadDeleteExecuteQuery",
                "PermissionAccessCreateReadDeleteExecuteQuery",
                "PermissionAccessUpdateDeleteExecuteQuery",
                "PermissionAccessCreateUpdateDeleteExecuteQuery",
                "PermissionAccessReadUpdateDeleteExecuteQuery",
                "PermissionAccessCreateReadUpdateDeleteExecuteQuery"
            ],
            "default": "PermissionAccess__INVALID__"
        },
        "PolicyScope": {
            "type": "string",
            "enum": [
                "PermissionScope__INVALID__",
                "PermissionScopeOther",
                "PermissionScopeGroup",
                "PermissionScopeOtherGroup",
                "PermissionScopeOwner",
                "PermissionScopeOtherOwner",
                "PermissionScopeGroupOwner",
                "PermissionScopeOtherGroupOwner",
                "PermissionScopeEnterprise",
                "PermissionScopeOtherEnterprise",
                "PermissionScopeGroupEnterprise",
                "PermissionScopeOtherGroupEnterprise",
                "PermissionScopeOwnerEnterprise",
                "PermissionScopeOtherOwnerEnterprise",
                "PermissionScopeGroupOwnerEnterprise",
                "PermissionScopeOtherGroupOwnerEnterprise"
            ],
            "default": "PermissionScope__INVALID__",
            "title": "Scope of the permission, similar to Unix file system"
        },
        "PolicyVersion": {
            "type": "object",
            "properties": {
                "Policy": {
                    "type": "string"
                },
                "Version": {
                    "type": "string"
                },
                "AcceptedAt": {
                    "type": "string",
                    "format": "date-time"
                },
                "AcceptedBy": {
                    "type": "string"
                },
                "EffectiveFrom": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "PolicyVersionList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PolicyVersion"
                    }
                }
            }
        },
        "ProjectReport": {
            "type": "object",
            "properties": {
                "entpId": {
                    "type": "string",
                    "description": "Enterprise id for which we want to get summary report for all objects",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "projectSummaryReport": {
                    "$ref": "#/definitions/ProjectSummaryReport",
                    "description": "Enterprise project report"
                },
                "error": {
                    "type": "string",
                    "description": "Error while fetching report for enterprise, if any"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "cursor next"
                }
            },
            "description": "Get summary reports of project objects for self/child enterprise",
            "title": "Get project reports"
        },
        "ProjectSummaryReport": {
            "type": "object",
            "properties": {
                "total": {
                    "type": "integer",
                    "format": "int64"
                },
                "deviceDistribution": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeviceDistribution"
                    }
                }
            }
        },
        "Realm": {
            "type": "object",
            "example": {
                "id": "EAJ1ABAi-KOom7dJlrBoE8eq1pj9",
                "name": "zededa.com",
                "enterpriseId": "AAFlABDe6Nm63ixF5LJBbk9Keqp6",
                "title": "zededa",
                "description": "Test realm",
                "revision": {
                    "prev": "",
                    "curr": "1",
                    "createdAt": "2020-07-17T06:03:14Z",
                    "createdBy": "us.root@zededa.com",
                    "updatedAt": "2020-07-17T06:03:14Z",
                    "updatedBy": "us.root@zededa.com"
                }
            },
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique system defined realm ID",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the realm. Name cannot be changed once created",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "enterpriseId": {
                    "type": "string",
                    "description": "Enterprise ID of the enterprise where the realm is to be created",
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the realm. Title can be changed anytime",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the realm",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "System defined info",
                    "readOnly": true
                }
            },
            "description": "Realm meta data",
            "title": "Realm detail",
            "required": [
                "name",
                "title",
                "enterpriseId"
            ]
        },
        "Realms": {
            "type": "object",
            "properties": {
                "summaryByState": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary of filtered realms"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Realm"
                    },
                    "description": "List of realms"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Page details of the filtered records"
                }
            }
        },
        "Role": {
            "type": "object",
            "example": {
                "id": "AAGFABAEqnH4je5PHZTXSmHOs-XC",
                "name": "SysRoot",
                "title": "SysRoot",
                "description": "",
                "revision": {
                    "prev": "",
                    "curr": "1",
                    "createdAt": "2020-07-16T18:19:56Z",
                    "createdBy": "SYSTEM_ROOT",
                    "updatedAt": "1970-01-01T00:00:01Z",
                    "updatedBy": "SYSTEM_ROOT"
                },
                "type": "USER_ROLE_CLUSTER",
                "state": "ROLE_STATE_ACTIVE",
                "scopes": [
                    {
                        "accessDevice": "PermissionAccessCreateReadUpdateDelete",
                        "accessApp": "PermissionAccessCreateReadUpdateDelete",
                        "accessUser": "PermissionAccessCreateReadUpdateDelete",
                        "accessStorage": "PermissionAccessCreateReadUpdateDelete",
                        "accessEnterprise": "PermissionAccessCreateReadUpdateDelete",
                        "enterpriseFilter": [
                            "srAll"
                        ],
                        "projectFilter": [
                            "srAll"
                        ]
                    }
                ]
            },
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique system defined role ID",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the role. Name cannot be changed once created",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the role. Title can be changed anytime",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the role",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "System defined info",
                    "readOnly": true
                },
                "type": {
                    "$ref": "#/definitions/UserRole",
                    "description": "Type of the role"
                },
                "state": {
                    "$ref": "#/definitions/RoleState",
                    "description": "State of the role"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Scope"
                    },
                    "description": "Scopes/Permissions associated with the role"
                },
                "projectTags": {
                    "type": "string",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of project tags filter"
                }
            },
            "description": "Role meta data",
            "title": "Role detail",
            "required": [
                "name",
                "title",
                "type",
                "scopes"
            ]
        },
        "RoleState": {
            "type": "string",
            "enum": [
                "ROLE_STATE_UNSPECIFIED",
                "ROLE_STATE_CREATED",
                "ROLE_STATE_ACTIVE",
                "ROLE_STATE_INACTIVE",
                "ROLE_STATE_ARCHIVED"
            ],
            "default": "ROLE_STATE_UNSPECIFIED",
            "description": "Values for this needs to match the const defined in libs/database/datamodel.go for\nbackward compatibility."
        },
        "Roles": {
            "type": "object",
            "properties": {
                "summaryByState": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary of filtered roles"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Role"
                    },
                    "description": "List of roles"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Page details of the filtered records"
                }
            }
        },
        "Scope": {
            "type": "object",
            "properties": {
                "accessDevice": {
                    "type": "string",
                    "description": "Device access permission"
                },
                "accessApp": {
                    "type": "string",
                    "description": "Application access permission, this will be deprecated in further release - please use accessEdgeApp and accessAppInstance for granular permission access scope."
                },
                "accessUser": {
                    "type": "string",
                    "description": "User access permission"
                },
                "accessStorage": {
                    "type": "string",
                    "description": "Storage access permission"
                },
                "accessEnterprise": {
                    "type": "string",
                    "description": "Enterprise access permission"
                },
                "enterpriseFilter": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of enterprise filters"
                },
                "projectFilter": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of project filters"
                },
                "accessEdgeApp": {
                    "type": "string",
                    "description": "Edge app access permission"
                },
                "accessAppInstance": {
                    "type": "string",
                    "description": "Application Instance access permission"
                },
                "accessEnterpriseIntegrationItems": {
                    "type": "string",
                    "description": "datastream and 3rd party integration access permission"
                },
                "uuid": {
                    "type": "string",
                    "description": "Unique system defined scope ID",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z_=-]{28}",
                    "uniqueItems": true
                }
            }
        },
        "SessionDetails": {
            "type": "object",
            "properties": {
                "sessionId": {
                    "type": "string",
                    "description": "DEPRECATED. sessionId is obfuscated for security reasons",
                    "readOnly": true
                },
                "expiresAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "session expiry time"
                },
                "userName": {
                    "type": "string",
                    "description": "Logged in user name"
                },
                "clientIp": {
                    "type": "string",
                    "description": "IP address of the logged in user"
                },
                "userAgent": {
                    "type": "string",
                    "description": "user agent details"
                }
            },
            "description": "Details of all logged in session",
            "title": "Session detail"
        },
        "SimpleUser": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "BEGIN-SYNC(SimpleUser)"
                },
                "username": {
                    "type": "string"
                },
                "realmId": {
                    "type": "string"
                },
                "state": {
                    "$ref": "#/definitions/UserState"
                },
                "firstName": {
                    "type": "string"
                }
            }
        },
        "Summary": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Summary description"
                },
                "total": {
                    "type": "number",
                    "format": "int64",
                    "description": "Total"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": "Values: Map for storing <string, uint32>"
                }
            },
            "description": "Summary is used to store the Summary details",
            "title": "Summary is used to store the Summary details"
        },
        "TOTPEnrolmentURL": {
            "type": "object",
            "properties": {
                "URL": {
                    "type": "string"
                },
                "Secret": {
                    "type": "string"
                }
            }
        },
        "TOTPSettings": {
            "type": "object",
            "properties": {
                "enforce": {
                    "type": "boolean"
                },
                "enforceInChildren": {
                    "type": "boolean"
                },
                "enforcedByParent": {
                    "type": "boolean"
                }
            }
        },
        "Token64": {
            "type": "object",
            "properties": {
                "base64": {
                    "type": "string"
                },
                "expires": {
                    "type": "string",
                    "format": "int64"
                }
            },
            "title": "Base64 encoded token"
        },
        "UserEntitlement": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer",
                    "format": "int32"
                },
                "usage": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "UserReport": {
            "type": "object",
            "properties": {
                "entpId": {
                    "type": "string",
                    "description": "Enterprise id for which we want to get summary report for all objects",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "userSummaryReport": {
                    "$ref": "#/definitions/UserSummaryReport",
                    "description": "Enterprise user report"
                },
                "error": {
                    "type": "string",
                    "description": "Error while fetching report for enterprise, if any"
                }
            },
            "description": "Get summary reports of user objects for self/child enterprise",
            "title": "Get user reports"
        },
        "UserRole": {
            "type": "string",
            "enum": [
                "USER_ROLE_UNSPECIFIED",
                "USER_ROLE_SYSTEM_DEFINED",
                "USER_ROLE_USER_DEFINED",
                "USER_ROLE_CLUSTER"
            ],
            "default": "USER_ROLE_UNSPECIFIED"
        },
        "UserState": {
            "type": "string",
            "enum": [
                "USER_STATE_UNSPECIFIED",
                "USER_STATE_CREATED",
                "USER_STATE_ACTIVE",
                "USER_STATE_INACTIVE",
                "USER_STATE_SIGNEDUP",
                "USER_STATE_SUSPENDED"
            ],
            "default": "USER_STATE_UNSPECIFIED",
            "title": "General well being of the user"
        },
        "UserSummaryReport": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "integer",
                    "format": "int64"
                },
                "activeUsersCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "lastLoggedinUserInfo": {
                    "$ref": "#/definitions/LastLoggedinUserInfo"
                }
            }
        },
        "UserUsagePerEnterprise": {
            "type": "object",
            "properties": {
                "entpId": {
                    "type": "string",
                    "description": "Enterprise id",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z-]+"
                },
                "userUsage": {
                    "type": "string",
                    "format": "int64",
                    "description": "User usage for that enterprise"
                }
            }
        },
        "UserUsagePerEnterpriseList": {
            "type": "object",
            "properties": {
                "userUsagePerEntp": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserUsagePerEnterprise"
                    },
                    "description": "user usage per enterprise list"
                }
            }
        },
        "ZcOpsStatus": {
            "type": "string",
            "enum": [
                "OPS_STATUS_UNSPECIFIED",
                "OPS_STATUS_PENDING",
                "OPS_STATUS_ONGOING",
                "OPS_STATUS_COMPLETE"
            ],
            "default": "OPS_STATUS_UNSPECIFIED",
            "description": "- OPS_STATUS_PENDING: In rare cases, system may not start operation when it was requested. Client will be notified that operation is PENDING\n - OPS_STATUS_ONGOING: system will start the operation, but at the time response was generated, operation is still ONGOING.\n - OPS_STATUS_COMPLETE: Even if the result of the operations may result in failure, but the OpsStatus will marked COMPLETE for almost all cases.",
            "title": "ZedCloud internal operation status"
        },
        "ZcOpsType": {
            "type": "string",
            "enum": [
                "OPS_TYPE_UNSPECIFIED",
                "OPS_TYPE_READ",
                "OPS_TYPE_DELETE",
                "OPS_TYPE_CREATE",
                "OPS_TYPE_UPDATE",
                "OPS_TYPE_LIST"
            ],
            "default": "OPS_TYPE_UNSPECIFIED",
            "title": "ZedCloud internal operation type"
        },
        "ZsrvError": {
            "type": "object",
            "properties": {
                "ec": {
                    "$ref": "#/definitions/ZsrvErrorCode",
                    "title": "Enumrated error code, describes more granular numerical\nvalue than just httpStatus"
                },
                "location": {
                    "type": "string",
                    "title": "Ignore: Internal field only"
                },
                "details": {
                    "type": "string",
                    "title": "Field captures string description of details"
                }
            }
        },
        "ZsrvErrorCode": {
            "type": "string",
            "enum": [
                "zMsgErrorNone",
                "zMsgSucess",
                "NotFound",
                "AlreadyExists",
                "VersionMismatch",
                "RangeError",
                "LargeResult",
                "IncompleteData",
                "InvalidData",
                "FunctionUnsupported",
                "NoMemory",
                "SendFailure",
                "Timeout",
                "BadReqBody",
                "BadReqParam",
                "InvalidFieldFormat",
                "UrlNotFound",
                "ApiVersionNotSupported",
                "Unauthorized",
                "Forbidden",
                "Conflict",
                "NotModified",
                "DependencyConflict",
                "JsonFmtError",
                "ProtoFmtError",
                "CertError",
                "DataBaseConnection",
                "DBError",
                "zMsgAccepted",
                "zMsgCreated",
                "PreConditionFailed",
                "InternalServerError"
            ],
            "default": "zMsgErrorNone",
            "description": "- zMsgErrorNone: common validation errors\n - IncompleteData: message had fields that weren't filled in\n - InvalidData: message contained the field that wasn't expected\n - FunctionUnsupported: this feature unavailable on this version of device\n - InvalidFieldFormat: message contained the field that wasn't correctly formatted\n - JsonFmtError: Marshal / Unmarshal errors\n - DataBaseConnection: generic DB error",
            "title": "ZedCould internal error code"
        },
        "ZsrvResponse": {
            "type": "object",
            "properties": {
                "operationType": {
                    "$ref": "#/definitions/ZcOpsType",
                    "title": "Describes one of the operations type : possible values\n                        Read/Delete/Create/Update/List"
                },
                "operationStatus": {
                    "$ref": "#/definitions/ZcOpsStatus",
                    "title": "if this is log running job"
                },
                "objectKind": {
                    "type": "string",
                    "title": "zedcloud object kind on which the operation was performed"
                },
                "objectId": {
                    "type": "string",
                    "title": "Unique value identifies the object that was operated on"
                },
                "objectName": {
                    "type": "string",
                    "title": "name of the object"
                },
                "objectRevision": {
                    "type": "string",
                    "title": "object revision post the operation, note Read operation\ndoesn't change the revision"
                },
                "objectType": {
                    "$ref": "#/definitions/ObjectType"
                },
                "operationTime": {
                    "type": "string",
                    "title": "time of operation"
                },
                "startTime": {
                    "type": "string",
                    "title": "total time taken by operations"
                },
                "endTime": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "title": "the operation is performed on behalf of this user"
                },
                "httpStatusCode": {
                    "type": "integer",
                    "format": "int32",
                    "title": "http response"
                },
                "httpStatusMsg": {
                    "type": "string",
                    "title": "summary of the error in text format"
                },
                "jobId": {
                    "type": "string",
                    "title": "for tracking asynchronous tasks"
                },
                "error": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ZsrvError"
                    },
                    "title": "one or more errors will be set if the operation failed\ni.e. httpStatusCode != 2xx"
                }
            }
        },
        "googlerpcStatus": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "properties": {
                "typeUrl": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "format": "byte"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerToken": {
            "type": "apiKey",
            "description": "Bearer token for user session",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerToken": []
        }
    ],
    "externalDocs": {
        "description": "ZEDEDA Product Documentation",
        "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/iam"
    }
}