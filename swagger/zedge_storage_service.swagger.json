{
    "swagger": "2.0",
    "info": {
        "title": "ZEDEDA Storage Service",
        "description": "The ZEDEDA Storage Service is helper service to ZEDEDA Edge Application Service. This service allows customers to store edge application images and other artifacts (e.g. logo, screenshot, license, developer agreement etc.) in Datastores. This service allows customers to select datastores \n -- ZEDEDA owned and operated Datastores in public cloud (AWS S3 or Azure Blobstorage) \n -- Public Datastores (e.g. Docker Hub, Azure Container registry etc.) \n -- Customer owned and operated Datastores in public cloud (AWS S3 or Azure Blobstorage) \n -- Customer owned and operated Datastores in their own enterprise Data Centre \n This service allows binary files of the images and artifacts to be uploaded in one of the above Datastores, artifacts to be downloaded from datastores. Edge nodes will download edge application image binary files from these datastores",
        "termsOfService": "https://www.zededa.com/terms",
        "version": "1.0",
        "contact": {
            "name": "ZEDEDA API Support",
            "url": "https://www.zededa.com/support",
            "email": "support@zededa.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [
        {
            "name": "ImageConfiguration"
        },
        {
            "name": "DatastoreConfiguration"
        },
        {
            "name": "ArtifactManager"
        },
        {
            "name": "VolumeInstanceConfiguration"
        },
        {
            "name": "VolumeInstanceStatus"
        }
    ],
    "basePath": "/api",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/v1/apps/images": {
            "get": {
                "summary": "Query edge application images",
                "description": "Query the edge application image records.",
                "operationId": "ImageConfiguration_QueryImages",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/Images"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "description": "Only summary of the records required",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "imageType",
                        "description": "Image type to ne matched.\n\n - IMAGE_TYPE_EVE: Base OS images for edge gateway\n - IMAGE_TYPE_APPLICATION: Edge application images\n - IMAGE_TYPE_EVEPRIVATE: Private Base OS images for edge gateway\n - IMAGE_TYPE_ARTIFACT: Image type to be used for configuration/patch service",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "IMAGE_TYPE_UNSPECIFIED",
                            "IMAGE_TYPE_EVE",
                            "IMAGE_TYPE_APPLICATION",
                            "IMAGE_TYPE_EVEPRIVATE",
                            "IMAGE_TYPE_ARTIFACT"
                        ],
                        "default": "IMAGE_TYPE_UNSPECIFIED"
                    },
                    {
                        "name": "imageStatus",
                        "description": "Image status to be matched.\n\n - IMAGE_STATUS_CREATED: Image metadata is created\n - IMAGE_STATUS_UPLOADING: Image binary is being uploaded to Datstore\n - IMAGE_STATUS_READY: Image is ready for download\n - IMAGE_STATUS_INUSE: Image is being used by edge applications\n - IMAGE_STATUS_FAILED: Image binary upload has failed\n - IMAGE_STATUS_UPLINKING: Image metadata is being uplinked with Datstore binary",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "IMAGE_STATUS_UNSPECIFIED",
                            "IMAGE_STATUS_CREATED",
                            "IMAGE_STATUS_PENDING",
                            "IMAGE_STATUS_UPLOADING",
                            "IMAGE_STATUS_READY",
                            "IMAGE_STATUS_INUSE",
                            "IMAGE_STATUS_ARCHIVED",
                            "IMAGE_STATUS_MAX",
                            "IMAGE_STATUS_FAILED",
                            "IMAGE_STATUS_UPLINKING"
                        ],
                        "default": "IMAGE_STATUS_UNSPECIFIED"
                    },
                    {
                        "name": "datastoreId",
                        "description": "Datastore id to be matched.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "imageArch",
                        "description": "Image architecture to be matched.",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "UNSPECIFIED",
                            "UNDEFINED",
                            "AMD64",
                            "ARM64"
                        ],
                        "default": "UNSPECIFIED"
                    },
                    {
                        "name": "namePattern",
                        "description": "Image name pattern to be matched.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "originType",
                        "description": "origin of image",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "post": {
                "summary": "Create edge application image",
                "description": "Create an edge application image record.",
                "operationId": "ImageConfiguration_CreateImage",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this edge application image record will conflict with an already existing edge application image record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ImageConfig"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/apps/images/baseos/latest": {
            "get": {
                "summary": "Query latest version of EVE image for each hardware architecture",
                "description": "Query the latest version of EVE image for each hardware architecture.",
                "operationId": "ImageConfiguration_QueryLatestImageVersions",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/Images"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "description": "Only summary of the records required",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "namePattern",
                        "description": "Image Architecture pattern to be matched.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "description": "fields list for variable response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "delete": {
                "summary": "Delete edge application image",
                "description": "Delete an edge application image record.",
                "operationId": "ImageConfiguration_DeleteLatestImage",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because there are edge application bundles using this edge application image",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the image",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "put": {
                "summary": "Mark Eve image as latest",
                "description": "Mark Eve image as latest for a given hardware architecture.",
                "operationId": "ImageConfiguration_MarkEveImageLatest",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ImageConfig"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/apps/images/baseos/latest/hwclass/{imageArch}": {
            "get": {
                "summary": "Get latest version of EVE image",
                "description": "Query the latest version of EVE image for given hardware architecture.",
                "operationId": "ImageConfiguration_GetLatestImageVersion",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ImageConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "imageArch",
                        "description": "Image architecture to be matched : 'AMD64' or 'ARM64'.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "put": {
                "summary": "Mark Eve image as latest",
                "description": "Mark Eve image as latest for a given hardware architecture.",
                "operationId": "ImageConfiguration_MarkEveImageLatest2",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "imageArch",
                        "description": "Image Architecture.",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "UNSPECIFIED",
                            "UNDEFINED",
                            "AMD64",
                            "ARM64"
                        ]
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "description": "System defined universally unique Id of the image.",
                                    "readOnly": true,
                                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                                    "uniqueItems": true
                                },
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the image, unique across the enterprise. Once image is created, name can\u2019t be changed.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title of the image. Title can be changed at any time.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the image.",
                                    "maxLength": 256
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "system defined info",
                                    "readOnly": true
                                },
                                "imageFormat": {
                                    "$ref": "#/definitions/configFormat",
                                    "description": "Image binary format."
                                },
                                "imageRelUrl": {
                                    "type": "string",
                                    "description": "Image relative path w.r.t. Datastore"
                                },
                                "imageSha256": {
                                    "type": "string",
                                    "description": "Image checksum in SHA256 format"
                                },
                                "imageVersion": {
                                    "type": "string",
                                    "description": "system defined info"
                                },
                                "imageStatus": {
                                    "$ref": "#/definitions/ImageStatus",
                                    "description": "Image status",
                                    "readOnly": true
                                },
                                "imageType": {
                                    "$ref": "#/definitions/ImageType",
                                    "description": "Image type"
                                },
                                "datastoreId": {
                                    "type": "string",
                                    "description": "Datastore Id where image binary is located.",
                                    "title": "datastoreId will be deprecated",
                                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                                },
                                "imageSizeBytes": {
                                    "type": "string",
                                    "format": "int64",
                                    "description": "Image size in KBytes."
                                },
                                "imageError": {
                                    "type": "string",
                                    "description": "Image upload/uplink detailed error/status message",
                                    "readOnly": true
                                },
                                "imageLocal": {
                                    "type": "string",
                                    "description": "Internal image location.",
                                    "readOnly": true
                                },
                                "originType": {
                                    "$ref": "#/definitions/Origin",
                                    "description": "Origin type of image.",
                                    "readOnly": true
                                },
                                "projectAccessList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "project access list of the image"
                                },
                                "datastoreIdList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "datastore Id list where image binary is located."
                                },
                                "isLTS": {
                                    "type": "boolean",
                                    "description": "flag to indicate eve image is LTS or not"
                                }
                            },
                            "description": "Image metadata for edge gateway Base OS or for eedge applications.",
                            "title": "Image metadata detail",
                            "required": [
                                "name",
                                "title",
                                "imageFormat",
                                "imageType",
                                "datastoreId"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/apps/images/id/{id}": {
            "get": {
                "summary": "Get edge application image",
                "description": "Get the configuration (without security details) of an edge application image record.",
                "operationId": "ImageConfiguration_GetImage",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ImageConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the image",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "delete": {
                "summary": "Delete edge application image",
                "description": "Delete an edge application image record.",
                "operationId": "ImageConfiguration_DeleteImage",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because there are edge application bundles using this edge application image",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the image",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "put": {
                "summary": "Update edge application image",
                "description": "Update an edge application image. The usual pattern to update an edge application image record is to retrieve the record and update with the modified values in a new body to update the edge application image record.",
                "operationId": "ImageConfiguration_UpdateImage",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge application image record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the image.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the image, unique across the enterprise. Once image is created, name can\u2019t be changed.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title of the image. Title can be changed at any time.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the image.",
                                    "maxLength": 256
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "system defined info",
                                    "readOnly": true
                                },
                                "imageFormat": {
                                    "$ref": "#/definitions/configFormat",
                                    "description": "Image binary format."
                                },
                                "imageRelUrl": {
                                    "type": "string",
                                    "description": "Image relative path w.r.t. Datastore"
                                },
                                "imageSha256": {
                                    "type": "string",
                                    "description": "Image checksum in SHA256 format"
                                },
                                "imageVersion": {
                                    "type": "string",
                                    "description": "system defined info"
                                },
                                "imageArch": {
                                    "$ref": "#/definitions/ModelArchType",
                                    "description": "Image Architecture."
                                },
                                "imageStatus": {
                                    "$ref": "#/definitions/ImageStatus",
                                    "description": "Image status",
                                    "readOnly": true
                                },
                                "imageType": {
                                    "$ref": "#/definitions/ImageType",
                                    "description": "Image type"
                                },
                                "datastoreId": {
                                    "type": "string",
                                    "description": "Datastore Id where image binary is located.",
                                    "title": "datastoreId will be deprecated",
                                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                                },
                                "imageSizeBytes": {
                                    "type": "string",
                                    "format": "int64",
                                    "description": "Image size in KBytes."
                                },
                                "imageError": {
                                    "type": "string",
                                    "description": "Image upload/uplink detailed error/status message",
                                    "readOnly": true
                                },
                                "imageLocal": {
                                    "type": "string",
                                    "description": "Internal image location.",
                                    "readOnly": true
                                },
                                "originType": {
                                    "$ref": "#/definitions/Origin",
                                    "description": "Origin type of image.",
                                    "readOnly": true
                                },
                                "projectAccessList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "project access list of the image"
                                },
                                "datastoreIdList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "datastore Id list where image binary is located."
                                },
                                "isLTS": {
                                    "type": "boolean",
                                    "description": "flag to indicate eve image is LTS or not"
                                }
                            },
                            "description": "Image metadata for edge gateway Base OS or for eedge applications.",
                            "title": "Image metadata detail",
                            "required": [
                                "name",
                                "title",
                                "imageFormat",
                                "imageArch",
                                "imageType",
                                "datastoreId"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/apps/images/id/{id}/uplink": {
            "put": {
                "summary": "Uplinks edge application image",
                "description": "Uplinks the edge application image record to an existing binry file in the datastore.",
                "operationId": "ImageConfiguration_UplinkImage",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted. The API gateway accepted the request for uplinking but the uplinking process has not been completed. Please check ImageStatus and ImageError fields to track the status of uplinking process and any error messages.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because another request for uplink / upload is already in progress",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the image.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the image, unique across the enterprise. Once image is created, name can\u2019t be changed.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title of the image. Title can be changed at any time.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the image.",
                                    "maxLength": 256
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "system defined info",
                                    "readOnly": true
                                },
                                "imageFormat": {
                                    "$ref": "#/definitions/configFormat",
                                    "description": "Image binary format."
                                },
                                "imageRelUrl": {
                                    "type": "string",
                                    "description": "Image relative path w.r.t. Datastore"
                                },
                                "imageSha256": {
                                    "type": "string",
                                    "description": "Image checksum in SHA256 format"
                                },
                                "imageVersion": {
                                    "type": "string",
                                    "description": "system defined info"
                                },
                                "imageArch": {
                                    "$ref": "#/definitions/ModelArchType",
                                    "description": "Image Architecture."
                                },
                                "imageStatus": {
                                    "$ref": "#/definitions/ImageStatus",
                                    "description": "Image status",
                                    "readOnly": true
                                },
                                "imageType": {
                                    "$ref": "#/definitions/ImageType",
                                    "description": "Image type"
                                },
                                "datastoreId": {
                                    "type": "string",
                                    "description": "Datastore Id where image binary is located.",
                                    "title": "datastoreId will be deprecated",
                                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                                },
                                "imageSizeBytes": {
                                    "type": "string",
                                    "format": "int64",
                                    "description": "Image size in KBytes."
                                },
                                "imageError": {
                                    "type": "string",
                                    "description": "Image upload/uplink detailed error/status message",
                                    "readOnly": true
                                },
                                "imageLocal": {
                                    "type": "string",
                                    "description": "Internal image location.",
                                    "readOnly": true
                                },
                                "originType": {
                                    "$ref": "#/definitions/Origin",
                                    "description": "Origin type of image.",
                                    "readOnly": true
                                },
                                "projectAccessList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "project access list of the image"
                                },
                                "datastoreIdList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "datastore Id list where image binary is located."
                                },
                                "isLTS": {
                                    "type": "boolean",
                                    "description": "flag to indicate eve image is LTS or not"
                                }
                            },
                            "description": "Image metadata for edge gateway Base OS or for eedge applications.",
                            "title": "Image metadata detail",
                            "required": [
                                "name",
                                "title",
                                "imageFormat",
                                "imageArch",
                                "imageType",
                                "datastoreId"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/apps/images/name/{name}": {
            "get": {
                "summary": "Get edge application image",
                "description": "Get the configuration (without security details) of an edge application image record.",
                "operationId": "ImageConfiguration_GetImageByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ImageConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "description": "User defined name of the image, unique across the enterprise. Once image is created, name can\u2019t be changed.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/apps/images/name/{name}/upload/chunked": {
            "put": {
                "summary": "Uploads edge application image binary file",
                "description": "Uploads the edge application image binary file in the datastore. This method uses multiple HTTP requests to upload image binary file in smaller chunks. Recommended for larger file size.",
                "operationId": "ImageConfiguration_UploadImageChunked",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted. The API gateway accepted the request for uploading but the upload process has not been completed. Please check ImageStatus and ImageError fields to track the status of upload process and any error messages.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because \n -- another request for uplink / upload is already in progress \n -- image has been already uploaded, can't be modified again",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "description": "User defined name of the image, unique across the enterprise. Once image is created, name can\u2019t be changed.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "description": "part of the image binary",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "byte",
                            "description": "part of the image binary",
                            "maxLength": 256,
                            "minLength": 3
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    },
                    {
                        "name": "Content-Range",
                        "in": "header",
                        "required": true,
                        "pattern": "bytes (\\d+-\\d+)/\\d+",
                        "description": "Content range in this request. Example : bytes 1024-2047/8192",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "produces": [
                    "application/json"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/apps/images/name/{name}/upload/file": {
            "put": {
                "summary": "Uploads edge application image binary file",
                "description": "Uploads the edge application image binary file in the datastore. This method uses single HTTP request to upload the entire image binary file. Recommended for smaller file size.",
                "operationId": "ImageConfiguration_UploadImageFile",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted. The API gateway accepted the request for uploading but the upload process has not been completed. Please check ImageStatus and ImageError fields to track the status of upload process and any error messages.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because \n -- another request for uplink / upload is already in progress \n -- image has been already uploaded, can't be modified again",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "description": "User defined name of the image, unique across the enterprise. Once image is created, name can\u2019t be changed.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    },
                    {
                        "name": "imageFile",
                        "in": "formData",
                        "required": true,
                        "type": "file",
                        "description": "Image binary file",
                        "x-mimetype": "application/octet-stream"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "produces": [
                    "application/json"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                },
                "consumes": [
                    "multipart/form-data"
                ]
            }
        },
        "/v1/apps/images/projects": {
            "get": {
                "summary": "Query common project access list among a list of images",
                "description": "Query common project access list among a list of images",
                "operationId": "ImageConfiguration_QueryImageProjectList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ImageProjectList"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "ids",
                        "description": "List of images IDs",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ImageConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/artifacts": {
            "get": {
                "summary": "Query artifact files",
                "description": "Query the artifact file records.",
                "operationId": "ArtifactManager_QueryArtifacts",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ArtifactList"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "description": "Only summary of the records required",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ArtifactManager"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "post": {
                "summary": "Create artifact file in the file storage",
                "description": "Create the artifact file in the file storage in AWS S3 or Azure BlobStorage",
                "operationId": "ArtifactManager_CreateArtifact",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/Artifact"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Artifact"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ArtifactManager"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/artifacts/id/{id}": {
            "get": {
                "summary": "Download artifact file chunk by chunk",
                "description": "Downloads the artifact file in a stream from the file storage",
                "operationId": "ArtifactManager_GetArtifactStream",
                "responses": {
                    "200": {
                        "description": "artifact chunk data(streaming responses)",
                        "schema": {
                            "type": "object",
                            "format": "byte",
                            "properties": {
                                "result": {},
                                "error": {
                                    "$ref": "#/definitions/googlerpcStatus"
                                }
                            },
                            "description": "artifact chunk data",
                            "title": "Stream result of ArtifactStream"
                        }
                    },
                    "206": {
                        "description": "Partial Content. The API gateway has fulfilled the partial GET request for the resource.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "307": {
                        "description": "Temporary Redirect. Returned when the requested artifactId is not available at the requested time",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "system generated unique id for an artifact",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ArtifactManager"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "delete": {
                "summary": "Delete artifact file form the datastore",
                "description": "Drops the artifact file from the file storage in AWS S3 or Azure BlobStorage",
                "operationId": "ArtifactManager_DeleteArtifact",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "system generated unique id for an artifact",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ArtifactManager"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/artifacts/id/{id}/upload/chunked": {
            "put": {
                "summary": "Uploads the given chunk into the specified multiplePart file",
                "description": "Uploads the given chunk into the specified file",
                "operationId": "ArtifactManager_UploadArtifact",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "202": {
                        "description": "Accepted. The API gateway accepted the request for uploading but the uploading process has not been completed.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "description": "artifact chunk data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "byte",
                            "description": "artifact chunk data"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    },
                    {
                        "name": "Content-Range",
                        "in": "header",
                        "required": true,
                        "pattern": "bytes (\\d+-\\d+)/\\d+",
                        "description": "Content range in this request. Example : bytes 1024-2047/8192",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ArtifactManager"
                ],
                "produces": [
                    "application/json"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/artifacts/id/{id}/url": {
            "get": {
                "summary": "Generates the signedUrl for accessing the resource",
                "description": "Generate the URL which can be used to access the resource from datastore like s3, Azure etc for specified amount of time.",
                "operationId": "ArtifactManager_GetArtifactSignedUrl",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/Artifact"
                        }
                    },
                    "307": {
                        "description": "Temporary Redirect. Returned when the requested artifactId is not available at the requested time",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "system generated unique id for an artifact",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "ArtifactManager"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/datastores": {
            "get": {
                "summary": "Query datastores",
                "description": "Query the datastore records.",
                "operationId": "DatastoreConfiguration_QueryDatastores",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/Datastores"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "description": "Only summary of the records required",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "namePattern",
                        "description": "Datastore name pattern to be matched.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dsType",
                        "description": "Datastore type to be matched",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "originType",
                        "description": "origin of datastore",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "DatastoreConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "post": {
                "summary": "Create Datastore",
                "description": "Create a Datastore record.",
                "operationId": "DatastoreConfiguration_CreateDatastore",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this datastore record will conflict with an already existing datastore record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DatastoreInfo"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "DatastoreConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/datastores/id/{id}": {
            "get": {
                "summary": "Get datastore",
                "description": "Get the configuration (without security details) of a datastore record.",
                "operationId": "DatastoreConfiguration_GetDatastore",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/DatastoreInfo"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the datastore",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "DatastoreConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "delete": {
                "summary": "Delete datastore",
                "description": "Delete a datastore record.",
                "operationId": "DatastoreConfiguration_DeleteDatastore",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because there are edge application images using this datastore",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the datastore",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "DatastoreConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "put": {
                "summary": "Update datastore",
                "description": "Update a datastore record. The usual pattern to update a datastore record is to retrieve the record and update with the modified values in a new body to update the datastore record.",
                "operationId": "DatastoreConfiguration_UpdateDatastore",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing datastore record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the datastore.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the datastore, unique across the enterprise. Once datastore is created, name can\u2019t be changed.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title of the datastore. Title can be changed at any time.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the datastore.",
                                    "maxLength": 256
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "system defined info",
                                    "readOnly": true
                                },
                                "enterpriseId": {
                                    "type": "string"
                                },
                                "dsType": {
                                    "$ref": "#/definitions/DatastoreType",
                                    "description": "Datastore type"
                                },
                                "dsFQDN": {
                                    "type": "string",
                                    "description": "Datastore Fully Qualified Domain Name"
                                },
                                "dsPath": {
                                    "type": "string",
                                    "description": "Datastore relative path w.r.t. Datastore root"
                                },
                                "apiKey": {
                                    "type": "string"
                                },
                                "region": {
                                    "type": "string",
                                    "description": "Datastore region - valid for AWS S3 and Azure BlobStorage"
                                },
                                "dsStatus": {
                                    "$ref": "#/definitions/DatastoreStatus",
                                    "description": "Datastore status"
                                },
                                "dsErr": {
                                    "type": "string",
                                    "description": "Datastore validation detailed error/status message",
                                    "readOnly": true
                                },
                                "secret": {
                                    "$ref": "#/definitions/DatastoreInfoSecrets",
                                    "description": "Plain-text sensitive data"
                                },
                                "encryptedSecrets": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Internal - Encrypted sensitive data",
                                    "readOnly": true
                                },
                                "cryptoKey": {
                                    "type": "string",
                                    "description": "Internal - Encryption Key context",
                                    "readOnly": true
                                },
                                "originType": {
                                    "$ref": "#/definitions/Origin",
                                    "description": "Origin type of datastore.",
                                    "readOnly": true
                                },
                                "certificateChain": {
                                    "$ref": "#/definitions/CertificateChain",
                                    "description": "Certificate chain of the certificate"
                                },
                                "needClearText": {
                                    "type": "boolean",
                                    "description": "knob for sending creds in clear text"
                                },
                                "projectAccessList": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "project access list of the datastore"
                                }
                            },
                            "description": "Datastore idetail",
                            "title": "Datastore",
                            "required": [
                                "name",
                                "title",
                                "dsType",
                                "dsFQDN",
                                "dsPath"
                            ]
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "DatastoreConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/datastores/name/{name}": {
            "get": {
                "summary": "Get datastore",
                "description": "Get the configuration (without security details) of a datastore record.",
                "operationId": "DatastoreConfiguration_GetDatastoreByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/DatastoreInfo"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "description": "User defined name of the datastore, unique across the enterprise. Once datastore is created, name can\u2019t be changed.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "DatastoreConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/datastores/projects": {
            "get": {
                "summary": "Query the project access list among a list of datastore",
                "description": "Query the project access list among a list of datastore",
                "operationId": "DatastoreConfiguration_QueryDatastoreProjectList",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/DatastoreProjectList"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "ids",
                        "description": "List of datastore IDs",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "DatastoreConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances": {
            "get": {
                "summary": "Query edge volume instances",
                "description": "Query the edge volume instance records.",
                "operationId": "VolumeInstanceConfiguration_QueryVolumeInstances",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/VolInstList"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "deviceName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "labelName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "appInstName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deviceNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "post": {
                "summary": "Create edge volume instance",
                "description": "Create an edge volume instance record.",
                "operationId": "VolumeInstanceConfiguration_CreateVolumeInstance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this edge volume instance record will conflict with an already existing edge volume instance record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VolInstConfig"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances/id/{id}": {
            "get": {
                "summary": "Get edge volume instance",
                "description": "Get the configuration (without security details) of an edge volume instance record.",
                "operationId": "VolumeInstanceConfiguration_GetVolumeInstance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/VolInstConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "delete": {
                "summary": "Delete volume instance",
                "description": "Delete a volume instance record.",
                "operationId": "VolumeInstanceConfiguration_DeleteVolumeInstance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            },
            "put": {
                "summary": "Update edge volume instance",
                "description": "Update an edge volume instance. The usual pattern to update an edge volume instance record is to retrieve the record and update with the modified values in a new body to update the edge volume instance record.",
                "operationId": "VolumeInstanceConfiguration_UpdateVolumeInstance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge volume instance record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the volume instance.",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "User defined name of the volume instance, unique across the enterprise. Once object is created, name can\u2019t be changed.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                                    "uniqueItems": true
                                },
                                "title": {
                                    "type": "string",
                                    "description": "User defined title of the volume instance. Title can be changed at any time.",
                                    "maxLength": 256,
                                    "minLength": 3,
                                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "Detailed description of the volume instance.",
                                    "maxLength": 256
                                },
                                "revision": {
                                    "$ref": "#/definitions/ObjectRevision",
                                    "description": "system defined Revision info of the object",
                                    "readOnly": true
                                },
                                "projectId": {
                                    "type": "string",
                                    "description": "id of the project in which the volume instance is created"
                                },
                                "type": {
                                    "type": "string",
                                    "$ref": "#/definitions/VolumeInstanceType",
                                    "description": "type of Volume Instance"
                                },
                                "deviceId": {
                                    "type": "string",
                                    "description": "id of the device on which volume instance is created"
                                },
                                "multiattach": {
                                    "type": "boolean",
                                    "description": "flag to enable the volume to be attached to multiple app instances"
                                },
                                "cleartext": {
                                    "type": "boolean",
                                    "description": "flag to keep the contents of the volume unencrypted (in clear text)"
                                },
                                "accessmode": {
                                    "type": "string",
                                    "$ref": "#/definitions/VolumeInstanceAccessMode",
                                    "description": "Access mode"
                                },
                                "sizeBytes": {
                                    "type": "integer",
                                    "format": "uint64",
                                    "description": "size of volume"
                                },
                                "image": {
                                    "type": "string",
                                    "description": "name of the image"
                                },
                                "implicit": {
                                    "type": "string",
                                    "description": "flag to create implicit volumes"
                                },
                                "contentTreeId": {
                                    "type": "string",
                                    "description": "content tree ID"
                                },
                                "label": {
                                    "type": "string",
                                    "description": "label"
                                },
                                "purge": {
                                    "$ref": "#/definitions/ZedCloudOpsCmd",
                                    "description": "Purge Counter information"
                                },
                                "tags": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    },
                                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                                    "maxLength": 32,
                                    "pattern": "^[^<%&?/\\>]+$"
                                },
                                "patchartifactvolume": {
                                    "type": "string",
                                    "description": "flag to indicate whether volume instance is created for patch envelope external artifact"
                                }
                            }
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances/id/{id}/status": {
            "get": {
                "summary": "Get edge volume instance status",
                "description": "Get the status of an edge volume instance record.",
                "operationId": "VolumeInstanceStatus_GetVolumeInstanceStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/VolInstStatusMsg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances/id/{objid}/events": {
            "get": {
                "summary": "Get edge volume instance events by id",
                "description": "Get configuration and status events of an edge volume by id.",
                "operationId": "VolumeInstanceStatus_GetVolumeInstanceEvents",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/EventQueryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "objid",
                        "description": "Object id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "startTime",
                        "description": "start time in timestamp",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "endTime",
                        "description": "end time",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "severity",
                        "description": "severity",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resource",
                        "description": "resource",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances/name/{name}": {
            "get": {
                "summary": "Get edge volume instance",
                "description": "Get the configuration (without security details) of an edge volume instance record.",
                "operationId": "VolumeInstanceConfiguration_GetVolumeInstanceByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/VolInstConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances/name/{name}/status": {
            "get": {
                "summary": "Get edge volume instance status",
                "description": "Get the status of an edge volume instance record.",
                "operationId": "VolumeInstanceStatus_GetVolumeInstanceStatusByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/VolInstStatusMsg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances/name/{objname}/events": {
            "get": {
                "summary": "Get edge volume instance events by name",
                "description": "Get configuration and status events of an edge volume by name.",
                "operationId": "VolumeInstanceStatus_GetVolumeInstanceEventsByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/EventQueryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "objname",
                        "description": "Object name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "startTime",
                        "description": "start time in timestamp",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "endTime",
                        "description": "end time",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "severity",
                        "description": "severity",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resource",
                        "description": "resource",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances/status": {
            "get": {
                "summary": "Query status of edge volume instances",
                "description": "Query the status of edge volume instance records.",
                "operationId": "VolumeInstanceStatus_QueryVolumeInstanceStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/VolInstStatusListMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "deviceName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "runState",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "UNSPECIFIED",
                            "ONLINE",
                            "HALTED",
                            "INIT",
                            "REBOOTING",
                            "OFFLINE",
                            "UNKNOWN",
                            "UNPROVISIONED",
                            "PROVISIONED",
                            "SUSPECT",
                            "DOWNLOADING",
                            "RESTARTING",
                            "PURGING",
                            "HALTING",
                            "ERROR",
                            "VERIFYING",
                            "LOADING",
                            "CREATING_VOLUME",
                            "BOOTING",
                            "MAINTENANCE_MODE",
                            "START_DELAYED",
                            "BASEOS_UPDATING",
                            "PREPARING_POWEROFF",
                            "POWERING_OFF",
                            "PREPARED_POWEROFF"
                        ],
                        "default": "UNSPECIFIED"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "UNSPECIFIED",
                            "EMPTYDIR",
                            "BLOCKSTORAGE",
                            "HOSTFS",
                            "TMPFS",
                            "SECRET",
                            "NFS",
                            "AWS_BLOCK_STORAGE",
                            "CONTENT_TREE"
                        ],
                        "default": "UNSPECIFIED"
                    },
                    {
                        "name": "imageName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "appInstName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deviceNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        },
        "/v1/volumes/instances/status-config": {
            "get": {
                "summary": "Query status and config of edge volume instances",
                "description": "Query the status and config of edge volume instance records.",
                "operationId": "VolumeInstanceStatus_QueryVolumeInstanceStatusConfig",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/VolInstStatusListMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "deviceName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "runState",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "UNSPECIFIED",
                            "ONLINE",
                            "HALTED",
                            "INIT",
                            "REBOOTING",
                            "OFFLINE",
                            "UNKNOWN",
                            "UNPROVISIONED",
                            "PROVISIONED",
                            "SUSPECT",
                            "DOWNLOADING",
                            "RESTARTING",
                            "PURGING",
                            "HALTING",
                            "ERROR",
                            "VERIFYING",
                            "LOADING",
                            "CREATING_VOLUME",
                            "BOOTING",
                            "MAINTENANCE_MODE",
                            "START_DELAYED",
                            "BASEOS_UPDATING",
                            "PREPARING_POWEROFF",
                            "POWERING_OFF",
                            "PREPARED_POWEROFF"
                        ],
                        "default": "UNSPECIFIED"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "UNSPECIFIED",
                            "EMPTYDIR",
                            "BLOCKSTORAGE",
                            "HOSTFS",
                            "TMPFS",
                            "SECRET",
                            "NFS",
                            "AWS_BLOCK_STORAGE",
                            "CONTENT_TREE"
                        ],
                        "default": "UNSPECIFIED"
                    },
                    {
                        "name": "imageName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "appInstName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deviceNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "VolumeInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
                }
            }
        }
    },
    "definitions": {
        "Artifact": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "system generated unique id for an artifact",
                    "readOnly": true,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+a",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the artifact, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "status": {
                    "$ref": "#/definitions/Status",
                    "description": "describes the status of the operation",
                    "readOnly": true
                },
                "signedUrl": {
                    "type": "string",
                    "description": "generated signed url for an artifact",
                    "readOnly": true
                },
                "ttl": {
                    "type": "number",
                    "format": "int64",
                    "description": "TTL for the URL",
                    "readOnly": true
                }
            },
            "description": "ArtifactKey idenfies the artifact by artifactId",
            "title": "ArtifactKey detail"
        },
        "ArtifactFilter": {
            "type": "object"
        },
        "ArtifactList": {
            "type": "object",
            "properties": {
                "summary": {
                    "type": "object",
                    "$ref": "#/definitions/Summary",
                    "description": "Summary by state"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Artifact"
                    },
                    "description": "Artifact Key list"
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            },
            "description": "Response returned for List artifact Keys",
            "title": "ArtifactKeyListResponse detail"
        },
        "ArtifactStream": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "chunk": {
                    "type": "string",
                    "format": "byte",
                    "description": "artifact chunk data"
                }
            },
            "description": "ArtifactKey idenfies the artifact by artifactId",
            "title": "ArtifactKey detail"
        },
        "BlobInfo": {
            "type": "object",
            "properties": {
                "sha256": {
                    "type": "string"
                },
                "resource": {
                    "$ref": "#/definitions/VolInstResource"
                },
                "usage": {
                    "$ref": "#/definitions/DeviceObjectUsageInfo"
                },
                "State": {
                    "$ref": "#/definitions/SWState"
                },
                "progressPercentage": {
                    "type": "integer",
                    "format": "int64"
                },
                "errInfo": {
                    "$ref": "#/definitions/DeviceError"
                }
            }
        },
        "Certificate": {
            "type": "object",
            "properties": {
                "cert": {
                    "type": "string",
                    "description": "base64 string of the parent certificate",
                    "title": "certificate details"
                },
                "pvtKey": {
                    "type": "string",
                    "description": "base64 string of the parent pvt key"
                },
                "publicKey": {
                    "type": "string",
                    "description": "base63 string of the public key"
                },
                "passPhrase": {
                    "type": "string",
                    "description": "pass phase for the pvt key, this has to be filled if pvt key is encrypted with a pass phrase"
                },
                "exportable": {
                    "type": "boolean",
                    "description": "Indicates if the private key can be exported."
                },
                "reuseKey": {
                    "type": "boolean",
                    "description": "Indicates if the same key pair will be used on certificate renewal."
                },
                "encryptedSecrets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "user encrypted secrets map",
                    "title": "secrets encryption"
                },
                "cryptoKey": {
                    "type": "string",
                    "description": "Crypto Key for decrypting user secret information"
                },
                "publicKeyAlgorithm": {
                    "type": "string",
                    "description": "Public key algorithm.",
                    "title": "encryption algorithm"
                },
                "rsaEcryption": {
                    "$ref": "#/definitions/RSA",
                    "description": "RSA encryption algorithm of the certificate"
                },
                "ecdsaEncryption": {
                    "$ref": "#/definitions/ECDSA",
                    "description": "ECDSA encryption algorithm of the certificate"
                },
                "validFrom": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Certificate validatity start time",
                    "title": "certificate validity"
                },
                "validTill": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Certificate validatity start time"
                },
                "sanValues": {
                    "$ref": "#/definitions/SANValues",
                    "description": "This holds the alternative name values like URIs, domain names IPs etc.",
                    "title": "Subject alternative name values"
                },
                "subject": {
                    "$ref": "#/definitions/Subject",
                    "description": "Parameters for the subject of the X509 component of a certificate."
                },
                "issuer": {
                    "$ref": "#/definitions/Subject",
                    "description": "Parameters for the issuer of the X509 component of a certificate."
                },
                "serialNumber": {
                    "type": "string",
                    "description": "Unique identifier for each Certificate generated by an Certificate Issuer. "
                },
                "basicContraintsValid": {
                    "type": "boolean",
                    "description": "This fields tells the basic constraints like isCA are correct."
                },
                "keyUsage": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Key usage extensions define the purpose of the public key contained in a certificate."
                },
                "extendedKeyUsage": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Sequence of extended key usages."
                },
                "signatureAlgorithm": {
                    "type": "string"
                }
            }
        },
        "CertificateChain": {
            "type": "object",
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Certificate"
                    },
                    "description": "List of Certificate object holds the details of certificate like cert block, encryption type, validity, subject etc"
                }
            }
        },
        "Cursor": {
            "type": "object",
            "properties": {
                "pageToken": {
                    "type": "string",
                    "description": "Page Token"
                },
                "orderBy": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OrderBy helps in sorting the list response"
                },
                "pageNum": {
                    "type": "number",
                    "format": "int64",
                    "description": "Page Number"
                },
                "pageSize": {
                    "type": "number",
                    "format": "int64",
                    "description": "Defines the page size"
                },
                "totalPages": {
                    "type": "number",
                    "format": "int64",
                    "description": "Total number of pages to be fetched."
                }
            },
            "description": "Cursor helps in filtering the various list response like edge-app bundle list, model list, bundle list etc. ",
            "title": "Cursor is used as filter in list operation."
        },
        "DatastoreInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the datastore.",
                    "readOnly": true,
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the datastore, unique across the enterprise. Once datastore is created, name can\u2019t be changed.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the datastore. Title can be changed at any time.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the datastore.",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info",
                    "readOnly": true
                },
                "enterpriseId": {
                    "type": "string"
                },
                "dsType": {
                    "$ref": "#/definitions/DatastoreType",
                    "description": "Datastore type"
                },
                "dsFQDN": {
                    "type": "string",
                    "description": "Datastore Fully Qualified Domain Name"
                },
                "dsPath": {
                    "type": "string",
                    "description": "Datastore relative path w.r.t. Datastore root"
                },
                "apiKey": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "description": "Datastore region - valid for AWS S3 and Azure BlobStorage"
                },
                "dsStatus": {
                    "$ref": "#/definitions/DatastoreStatus",
                    "description": "Datastore status"
                },
                "dsErr": {
                    "type": "string",
                    "description": "Datastore validation detailed error/status message",
                    "readOnly": true
                },
                "secret": {
                    "$ref": "#/definitions/DatastoreInfoSecrets",
                    "description": "Plain-text sensitive data"
                },
                "encryptedSecrets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Internal - Encrypted sensitive data",
                    "readOnly": true
                },
                "cryptoKey": {
                    "type": "string",
                    "description": "Internal - Encryption Key context",
                    "readOnly": true
                },
                "originType": {
                    "$ref": "#/definitions/Origin",
                    "description": "Origin type of datastore.",
                    "readOnly": true
                },
                "certificateChain": {
                    "$ref": "#/definitions/CertificateChain",
                    "description": "Certificate chain of the certificate"
                },
                "needClearText": {
                    "type": "boolean",
                    "description": "knob for sending creds in clear text"
                },
                "projectAccessList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "project access list of the datastore"
                }
            },
            "description": "Datastore idetail",
            "title": "Datastore",
            "required": [
                "name",
                "title",
                "dsType",
                "dsFQDN",
                "dsPath"
            ]
        },
        "DatastoreInfoSecrets": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Datastore access API key in plain-text"
                },
                "apiPasswd": {
                    "type": "string",
                    "description": "Datastore access API password in plain-text"
                }
            }
        },
        "DatastoreProjectList": {
            "type": "object",
            "properties": {
                "projectDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectDetail"
                    },
                    "description": "List of projects which are associated with the given datastore"
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "total number of records"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Responded page details of filtered records"
                }
            }
        },
        "DatastoreStatus": {
            "type": "string",
            "enum": [
                "DATASTORE_STATUS_UNSPECIFIED",
                "DATASTORE_STATUS_CREATED",
                "DATASTORE_STATUS_VERIFYING",
                "DATASTORE_STATUS_ACTIVE",
                "DATASTORE_STATUS_INACTIVE",
                "DATASTORE_STATUS_FAILED"
            ],
            "default": "DATASTORE_STATUS_UNSPECIFIED",
            "title": "Datastore status"
        },
        "DatastoreType": {
            "type": "string",
            "enum": [
                "DATASTORE_TYPE_UNSPECIFIED",
                "DATASTORE_TYPE_HTTP",
                "DATASTORE_TYPE_HTTPS",
                "DATASTORE_TYPE_AWSS3",
                "DATASTORE_TYPE_SFTP",
                "DATASTORE_TYPE_CONTAINERREGISTRY",
                "DATASTORE_TYPE_AZUREBLOB",
                "DATASTORE_TYPE_ZEDEDAS3",
                "DATASTORE_TYPE_ZEDEDABLOB",
                "DATASTORE_TYPE_FILE_STORAGE"
            ],
            "default": "DATASTORE_TYPE_UNSPECIFIED",
            "description": "- DATASTORE_TYPE_HTTP: Datastore hosted on HTTP server\n - DATASTORE_TYPE_HTTPS: Datastore hosted on HTTPS server\n - DATASTORE_TYPE_AWSS3: Datastore hosted on AWS S3\n - DATASTORE_TYPE_SFTP: Datastore hosted on SFTP server\n - DATASTORE_TYPE_CONTAINERREGISTRY: Datastore hosted on Container Registry (e.g. Dockerhub, Azure Container Registry etc.)\n - DATASTORE_TYPE_AZUREBLOB: Datastore hosted on Azure BlobStorage\n - DATASTORE_TYPE_ZEDEDAS3: ZEDEDA Owned and Operated datastore hosted on AWS S3\n - DATASTORE_TYPE_ZEDEDABLOB: ZEDEDA Owned and Operated datastore hosted on Azure BlobStorage\n - DATASTORE_TYPE_FILE_STORAGE: Datastore hosted on File Storage (e.g. HTTP, HTTPS, AWS S3, SFTP, Azure Blob, etc.)",
            "title": "Datastore type"
        },
        "Datastores": {
            "type": "object",
            "properties": {
                "summaryByType": {
                    "$ref": "#/definitions/Summary",
                    "description": "Type distribution summary of filtered Datastore records"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DatastoreInfo"
                    },
                    "description": "List of filtered Datastore records"
                },
                "summaryByCategory": {
                    "$ref": "#/definitions/Summary",
                    "description": "Category distribution summary of filtered Datastore records"
                },
                "summaryByOrigin": {
                    "$ref": "#/definitions/Summary",
                    "description": "datstore by origin summary"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Responded page details of filtered records"
                }
            }
        },
        "DecsriptionCode": {
            "type": "string",
            "enum": [
                "DESCRIPTION_CODE_UNSPECIFIED",
                "DESCRIPTION_CODE_RECEIVED",
                "DESCRIPTION_CODE_PACKET_CORRUPT",
                "DESCRIPTION_CODE_FAILED_TO_RECEIVE",
                "DESCRIPTION_CODE_NETWORK_ERROR",
                "DESCRIPTION_CODE_NOT_FOUND",
                "DESCRIPTION_CODE_NOT_SUPPORTED",
                "DESCRIPTION_CODE_INTERNAL_ERROR",
                "DESCRIPTION_CODE_NOT_SPECIFIED",
                "DESCRIPTION_CODE_UPLOAD_DONE",
                "DESCRIPTION_CODE_ALREADY_EXISTS",
                "DESCRIPTION_CODE_INVALID_PARAMS"
            ],
            "default": "DESCRIPTION_CODE_UNSPECIFIED",
            "title": "description codes for internal use (Gilas and Niles)"
        },
        "Description": {
            "type": "object",
            "properties": {
                "descMessage": {
                    "type": "string",
                    "description": "description of an operation",
                    "readOnly": true
                },
                "descCode": {
                    "type": "string",
                    "$ref": "#/definitions/DecsriptionCode",
                    "default": "UPLOAD_DONE",
                    "description": "description code for an operation",
                    "readOnly": true
                }
            },
            "description": "Description encapsulates the top level Description of the operation",
            "title": "Description encapsulates the top level Description of the operation"
        },
        "DeviceEntity": {
            "type": "object",
            "properties": {
                "entity": {
                    "$ref": "#/definitions/Entity"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "DeviceError": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the error"
                },
                "severity": {
                    "type": "string",
                    "$ref": "#/definitions/Severity",
                    "description": "Severity of the error"
                },
                "timestamp": {
                    "type": "object",
                    "format": "date-time",
                    "description": "Timestamp at which error had occurred"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeviceEntity"
                    },
                    "description": "objects referenced by the description or retry_condition"
                },
                "retryCondition": {
                    "type": "string",
                    "description": "condition for retry"
                }
            },
            "description": "DeviceError store the error occurred at the device side",
            "title": "DeviceError is used to store the error details of the hardware.",
            "required": [
                "description",
                "severity",
                "timestamp",
                "entities"
            ]
        },
        "DeviceObjectUsageInfo": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "object",
                    "format": "date-time",
                    "description": "Timestamp at which object was created"
                },
                "refCount": {
                    "type": "number",
                    "format": "int64",
                    "description": "Object refcount"
                },
                "lastRefCountChangeTime": {
                    "type": "object",
                    "format": "date-time",
                    "description": "Timestamp at which object refcount was last changed"
                }
            },
            "description": "DeviceObjectUsageInfo provides the metadata of object usage on the device",
            "title": "DeviceObjectUsageInfo carries metadata of object usage on the device.",
            "required": [
                "createTime",
                "refCount",
                "lastRefCountChangeTime"
            ]
        },
        "ECDSA": {
            "type": "object",
            "properties": {
                "curve": {
                    "type": "string",
                    "description": "ECDSA curve to be used while signing the certificate."
                }
            }
        },
        "Entity": {
            "type": "string",
            "enum": [
                "ENTITY_UNSPECIFIED",
                "ENTITY_BASE_OS",
                "ENTITY_SYSTEM_ADAPTER",
                "ENTITY_VAULT",
                "ENTITY_ATTESTATION",
                "ENTITY_APP_INSTANCE",
                "ENTITY_PORT",
                "ENTITY_NETWORK",
                "ENTITY_NETWORK_INSTANCE",
                "ENTITY_CONTENT_TREE",
                "ENTITY_CONTENT_BLOB",
                "ENTITY_VOLUME"
            ],
            "default": "ENTITY_UNSPECIFIED",
            "description": "- ENTITY_UNSPECIFIED: Invalid Device Entity\n - ENTITY_BASE_OS: Base OS entity\n - ENTITY_SYSTEM_ADAPTER: System Adapter Entity\n - ENTITY_VAULT: Vault Entity\n - ENTITY_ATTESTATION: Attestation Entity\n - ENTITY_APP_INSTANCE: App Instance Entity\n - ENTITY_PORT: Port Entity\n - ENTITY_NETWORK: Network Entity\n - ENTITY_NETWORK_INSTANCE: Network Instance Entity\n - ENTITY_CONTENT_TREE: ContentTree Entity\n - ENTITY_CONTENT_BLOB: Blob Entity\n - ENTITY_VOLUME: VOLUME Entity",
            "title": "Edge node components"
        },
        "EventQueryResponse": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EventQueryResponseItem"
                    },
                    "description": "Event Query response list"
                },
                "next": {
                    "type": "object",
                    "$ref": "#/definitions/Cursor",
                    "description": "Cursor filter"
                },
                "summary": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary of filtered events."
                }
            },
            "description": "Event query response request payload",
            "title": "Event query Response payload detail",
            "required": [
                "list",
                "next"
            ]
        },
        "EventQueryResponseItem": {
            "type": "object",
            "properties": {
                "user": {
                    "type": "string",
                    "description": "User name"
                },
                "project": {
                    "type": "string",
                    "description": "project name"
                },
                "device": {
                    "type": "string",
                    "description": "device name"
                },
                "instance": {
                    "type": "string",
                    "description": "instance name"
                },
                "severity": {
                    "type": "string",
                    "description": "severity: FIXME: should be ENUM"
                },
                "description": {
                    "type": "string",
                    "description": "Event description"
                },
                "timestamp": {
                    "type": "object",
                    "format": "date-time",
                    "description": "event timestamp"
                },
                "source": {
                    "type": "object",
                    "$ref": "#/definitions/EventSource",
                    "description": "source"
                },
                "resource": {
                    "type": "string",
                    "description": "Event resources"
                },
                "eventType": {
                    "type": "string",
                    "description": "Event type"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Event tags"
                },
                "resourceName": {
                    "type": "string",
                    "description": "Event resources"
                },
                "jsonData": {
                    "type": "object",
                    "description": "Event resources"
                },
                "clusterInstance": {
                    "type": "string",
                    "description": "clusterInstance name"
                }
            },
            "description": "Event query response item payload",
            "title": "Event query response item payload detail"
        },
        "EventSource": {
            "type": "string",
            "enum": [
                "EVENT_SOURCE_UNSPECIFIED",
                "EVENT_SOURCE_SYSTEM",
                "EVENT_SOURCE_USER"
            ],
            "default": "EVENT_SOURCE_UNSPECIFIED",
            "description": "- EVENT_SOURCE_UNSPECIFIED: Default\n - EVENT_SOURCE_SYSTEM: Event is generated as a result of status change reported by edge node / application\n - EVENT_SOURCE_USER: Event is generated as a result of an user's configuration action",
            "title": "Source of events"
        },
        "ImageConfig": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the image.",
                    "readOnly": true,
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the image, unique across the enterprise. Once image is created, name can\u2019t be changed.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the image. Title can be changed at any time.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the image.",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info",
                    "readOnly": true
                },
                "imageFormat": {
                    "$ref": "#/definitions/configFormat",
                    "description": "Image binary format."
                },
                "imageRelUrl": {
                    "type": "string",
                    "description": "Image relative path w.r.t. Datastore"
                },
                "imageSha256": {
                    "type": "string",
                    "description": "Image checksum in SHA256 format"
                },
                "imageVersion": {
                    "type": "string",
                    "description": "system defined info"
                },
                "imageArch": {
                    "$ref": "#/definitions/ModelArchType",
                    "description": "Image Architecture."
                },
                "imageStatus": {
                    "$ref": "#/definitions/ImageStatus",
                    "description": "Image status",
                    "readOnly": true
                },
                "imageType": {
                    "$ref": "#/definitions/ImageType",
                    "description": "Image type"
                },
                "datastoreId": {
                    "type": "string",
                    "description": "Datastore Id where image binary is located.",
                    "title": "datastoreId will be deprecated",
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
                },
                "imageSizeBytes": {
                    "type": "string",
                    "format": "int64",
                    "description": "Image size in KBytes."
                },
                "imageError": {
                    "type": "string",
                    "description": "Image upload/uplink detailed error/status message",
                    "readOnly": true
                },
                "imageLocal": {
                    "type": "string",
                    "description": "Internal image location.",
                    "readOnly": true
                },
                "originType": {
                    "$ref": "#/definitions/Origin",
                    "description": "Origin type of image.",
                    "readOnly": true
                },
                "projectAccessList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "project access list of the image"
                },
                "datastoreIdList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "datastore Id list where image binary is located."
                },
                "isLTS": {
                    "type": "boolean",
                    "description": "flag to indicate eve image is LTS or not"
                }
            },
            "description": "Image metadata for edge gateway Base OS or for eedge applications.",
            "title": "Image metadata detail",
            "required": [
                "name",
                "title",
                "imageFormat",
                "imageArch",
                "imageType",
                "datastoreId"
            ]
        },
        "ImageProjectList": {
            "type": "object",
            "properties": {
                "projectDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectDetail"
                    },
                    "description": "List of projects which are are common among given list of images"
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64",
                    "description": "total number of records"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Responded page details of filtered records"
                }
            }
        },
        "ImageStatus": {
            "type": "string",
            "enum": [
                "IMAGE_STATUS_UNSPECIFIED",
                "IMAGE_STATUS_CREATED",
                "IMAGE_STATUS_PENDING",
                "IMAGE_STATUS_UPLOADING",
                "IMAGE_STATUS_READY",
                "IMAGE_STATUS_INUSE",
                "IMAGE_STATUS_ARCHIVED",
                "IMAGE_STATUS_MAX",
                "IMAGE_STATUS_FAILED",
                "IMAGE_STATUS_UPLINKING"
            ],
            "default": "IMAGE_STATUS_UNSPECIFIED",
            "description": "- IMAGE_STATUS_CREATED: Image metadata is created\n - IMAGE_STATUS_UPLOADING: Image binary is being uploaded to Datstore\n - IMAGE_STATUS_READY: Image is ready for download\n - IMAGE_STATUS_INUSE: Image is being used by edge applications\n - IMAGE_STATUS_FAILED: Image binary upload has failed\n - IMAGE_STATUS_UPLINKING: Image metadata is being uplinked with Datstore binary",
            "title": "Image status"
        },
        "ImageType": {
            "type": "string",
            "enum": [
                "IMAGE_TYPE_UNSPECIFIED",
                "IMAGE_TYPE_EVE",
                "IMAGE_TYPE_APPLICATION",
                "IMAGE_TYPE_EVEPRIVATE",
                "IMAGE_TYPE_ARTIFACT"
            ],
            "default": "IMAGE_TYPE_UNSPECIFIED",
            "description": "- IMAGE_TYPE_EVE: Base OS images for edge gateway\n - IMAGE_TYPE_APPLICATION: Edge application images\n - IMAGE_TYPE_EVEPRIVATE: Private Base OS images for edge gateway\n - IMAGE_TYPE_ARTIFACT: Image type to be used for configuration/patch service",
            "title": "Image types"
        },
        "Images": {
            "type": "object",
            "properties": {
                "terse": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary of filtered Image records"
                },
                "summaryByImageStatus": {
                    "$ref": "#/definitions/Summary",
                    "description": "Imagestatus distribution summary"
                },
                "summaryByImageArch": {
                    "$ref": "#/definitions/Summary",
                    "description": "Image architecture distribution summary"
                },
                "summaryByImageType": {
                    "$ref": "#/definitions/Summary",
                    "description": "Image type distribution summary"
                },
                "summaryByImageFormat": {
                    "$ref": "#/definitions/Summary",
                    "description": "Image format distribution summary"
                },
                "summaryByOrigin": {
                    "$ref": "#/definitions/Summary",
                    "description": "images by origin summary "
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ImageConfig"
                    },
                    "description": "List of filtered Image records"
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Responded page details of filtered records"
                }
            }
        },
        "ModelArchType": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "UNDEFINED",
                "AMD64",
                "ARM64"
            ],
            "default": "UNSPECIFIED"
        },
        "ObjectDetail": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ObjectRevision": {
            "type": "object",
            "properties": {
                "prev": {
                    "type": "string",
                    "description": "Previous"
                },
                "curr": {
                    "type": "string",
                    "description": "Current Database version of the record"
                },
                "createdAt": {
                    "type": "object",
                    "format": "date-time",
                    "description": "The time, in milliseconds since the epoch, when the record was created."
                },
                "createdBy": {
                    "type": "string",
                    "description": "User data: Created By"
                },
                "updatedAt": {
                    "type": "object",
                    "format": "date-time",
                    "description": "The time, in milliseconds since the epoch, when the record was last updated."
                },
                "updatedBy": {
                    "type": "string",
                    "description": "User data: Updated By"
                }
            },
            "description": "ObjectRevision store the user details, who has doent the necessary operation like Create Operation or update operation",
            "title": "ObjectRevision is used to store the user information.",
            "required": [
                "curr",
                "createdAt",
                "createdBy",
                "updatedAt",
                "updatedBy"
            ]
        },
        "ObjectType": {
            "type": "string",
            "enum": [
                "OBJECT_TYPE_UNSPECIFIED",
                "OBJECT_TYPE_USER",
                "OBJECT_TYPE_EDGE_NODE",
                "OBJECT_TYPE_EDGE_APP",
                "OBJECT_TYPE_IMAGE",
                "OBJECT_TYPE_EDGE_APP_INSTANCE",
                "OBJECT_TYPE_PROJECT",
                "OBJECT_TYPE_NETWORK",
                "OBJECT_TYPE_DATASTORE",
                "OBJECT_TYPE_SERVICE",
                "OBJECT_TYPE_SERVICE_INSTANCE",
                "OBJECT_TYPE_ENTERPRISE",
                "OBJECT_TYPE_ROLE",
                "OBJECT_TYPE_CREDENTIAL",
                "OBJECT_TYPE_NETWORK_INSTANCE",
                "OBJECT_TYPE_VOLUME_INSTANCE",
                "OBJECT_TYPE_REALM",
                "OBJECT_TYPE_AUTHPROFILE",
                "OBJECT_TYPE_POLICY",
                "OBJECT_TYPE_APP_POLICY",
                "OBJECT_TYPE_CLUSTER_INSTANCE",
                "OBJECT_TYPE_PLUGIN",
                "OBJECT_TYPE_DOC_POLICY",
                "OBJECT_TYPE_ORCHESTRATOR_CLUSTER",
                "OBJECT_TYPE_TAGS",
                "OBJECT_TYPE_EDGE_NODE_INTERFACE",
                "OBJECT_TYPE_DEPLOYMENT",
                "OBJECT_TYPE_ENTITLEMENTS",
                "OBJECT_TYPE_DATA_STREAM",
                "OBJECT_TYPE_API_USAGE",
                "OBJECT_TYPE_APP_INSTANCE_SNAPSHOT",
                "OBJECT_TYPE_PATCH_ENVELOPE",
                "OBJECT_TYPE_RESOURCE_USAGE_TRACK",
                "OBJECT_TYPE_PATCH_ENVELOPE_REFERENCE",
                "OBJECT_TYPE_DEV_PASSTHROUGH"
            ],
            "default": "OBJECT_TYPE_UNSPECIFIED"
        },
        "Origin": {
            "type": "string",
            "enum": [
                "ORIGIN_UNSPECIFIED",
                "ORIGIN_IMPORTED",
                "ORIGIN_LOCAL",
                "ORIGIN_GLOBAL"
            ],
            "default": "ORIGIN_UNSPECIFIED",
            "description": "- ORIGIN_UNSPECIFIED: default options, which says no Operation/Invalid Operation\n - ORIGIN_IMPORTED: Object imported from global enterprise.\n - ORIGIN_LOCAL: Objectl created locally.\n - ORIGIN_GLOBAL: Object created in global store,\nto use this type user should have root previlage.",
            "title": "OriginType : enum specifies the Object orgigin type"
        },
        "RSA": {
            "type": "object",
            "properties": {
                "rsaBits": {
                    "type": "string",
                    "format": "int64",
                    "description": "RSA Encryption Key bit size."
                }
            }
        },
        "RunState": {
            "type": "string",
            "enum": [
                "RUN_STATE_UNSPECIFIED",
                "RUN_STATE_ONLINE",
                "RUN_STATE_HALTED",
                "RUN_STATE_INIT",
                "RUN_STATE_REBOOTING",
                "RUN_STATE_OFFLINE",
                "RUN_STATE_UNKNOWN",
                "RUN_STATE_UNPROVISIONED",
                "RUN_STATE_PROVISIONED",
                "RUN_STATE_SUSPECT",
                "RUN_STATE_DOWNLOADING",
                "RUN_STATE_RESTARTING",
                "RUN_STATE_PURGING",
                "RUN_STATE_HALTING",
                "RUN_STATE_ERROR",
                "RUN_STATE_VERIFYING",
                "RUN_STATE_LOADING",
                "RUN_STATE_CREATING_VOLUME",
                "RUN_STATE_BOOTING",
                "RUN_STATE_MAINTENANCE_MODE",
                "RUN_STATE_START_DELAYED",
                "RUN_STATE_BASEOS_UPDATING",
                "RUN_STATE_PREPARING_POWEROFF",
                "RUN_STATE_POWERING_OFF",
                "RUN_STATE_PREPARED_POWEROFF"
            ],
            "default": "RUN_STATE_UNSPECIFIED",
            "description": "- RUN_STATE_ONLINE: Entity Online\n - RUN_STATE_HALTED: Entity Halted\n - RUN_STATE_INIT: Entity Initializing\n - RUN_STATE_REBOOTING: Entity Rebooting\n - RUN_STATE_OFFLINE: Entity Offline\n - RUN_STATE_UNKNOWN: Entity state Unknown\n - RUN_STATE_UNPROVISIONED: Entity Unprovisioned\n - RUN_STATE_PROVISIONED: Entity Provisioned\n - RUN_STATE_SUSPECT: Entity Suspect\n - RUN_STATE_DOWNLOADING: Edge-node downloading entity artifacts\n - RUN_STATE_RESTARTING: Entity Restarting\n - RUN_STATE_PURGING: Entity Purging\n - RUN_STATE_HALTING: Entity Halting\n - RUN_STATE_ERROR: Entity encountered an error\n - RUN_STATE_VERIFYING: Verification of downloaded Artifacts in Progress.\n - RUN_STATE_LOADING: Loading of Artifacts into local datastore in Progress.\n - RUN_STATE_CREATING_VOLUME: Volume creation from artifacts in Progress\n - RUN_STATE_BOOTING: Entity booting up\n - RUN_STATE_MAINTENANCE_MODE: Entity maintenance mode\n - RUN_STATE_START_DELAYED: Application start delayed as per configuration\n - RUN_STATE_BASEOS_UPDATING: Device BaseOs Update in Progress\n - RUN_STATE_PREPARING_POWEROFF: device preparing power off - shutting down all app instances\n - RUN_STATE_POWERING_OFF: device powering off from local profile server\n - RUN_STATE_PREPARED_POWEROFF: device prepared power off - all app instances are shut down",
            "title": "RunState - On update, please update RunState_HttpRequest as well"
        },
        "RunStateConfig_HttpRequestRunState_HttpRequest": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "ONLINE",
                "HALTED",
                "INIT",
                "REBOOTING",
                "OFFLINE",
                "UNKNOWN",
                "UNPROVISIONED",
                "PROVISIONED",
                "SUSPECT",
                "DOWNLOADING",
                "RESTARTING",
                "PURGING",
                "HALTING",
                "ERROR",
                "VERIFYING",
                "LOADING",
                "CREATING_VOLUME",
                "BOOTING",
                "MAINTENANCE_MODE",
                "START_DELAYED",
                "BASEOS_UPDATING",
                "PREPARING_POWEROFF",
                "POWERING_OFF",
                "PREPARED_POWEROFF"
            ],
            "default": "UNSPECIFIED",
            "title": "RunState_HttpRequest - Only for swagger documentation"
        },
        "SANValues": {
            "type": "object",
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permitted hosts."
                },
                "emaildIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permitted email addresses."
                },
                "uris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permitted URIs."
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permitted IP addresses."
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permitted DNS names."
                },
                "upns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permitted User principal names."
                }
            }
        },
        "SWState": {
            "type": "string",
            "enum": [
                "SW_STATE_UNSPECIFIED",
                "SW_STATE_INITIAL",
                "SW_STATE_DOWNLOAD_IN_PROGRESS",
                "SW_STATE_DOWNLOADED",
                "SW_STATE_VERIFIED",
                "SW_STATE_INSTALLED",
                "SW_STATE_BOOTING",
                "SW_STATE_RUNNING",
                "SW_STATE_HALTING",
                "SW_STATE_HALTED",
                "SW_STATE_REFRESHING",
                "SW_STATE_PURGING",
                "SW_STATE_RESOLVING_TAG",
                "SW_STATE_RESOLVED_TAG",
                "SW_STATE_CREATING_VOLUME",
                "SW_STATE_CREATED_VOLUME",
                "SW_STATE_VERIFYING",
                "SW_STATE_LOADING",
                "SW_STATE_LOADED",
                "SW_STATE_AWAITNETWORKINSTANCE"
            ],
            "default": "SW_STATE_UNSPECIFIED",
            "description": "- SW_STATE_RESOLVING_TAG: Prior to DOWNLOAD_STARTED we go through these:\nResolving an image tag\n - SW_STATE_RESOLVED_TAG: Tag has been resolved/failed\n - SW_STATE_CREATING_VOLUME: Prior to INSTALLED we go through these:\nVolume create in progress\n - SW_STATE_CREATED_VOLUME: Volume create done/failed\n - SW_STATE_VERIFYING: Verification in-progress\n - SW_STATE_LOADING: Loading blob in CAS\n - SW_STATE_LOADED: Loaded blob in CAS\n - SW_STATE_AWAITNETWORKINSTANCE: Wait for network instance",
            "title": "State of EVE/Edge Application software"
        },
        "Severity": {
            "type": "string",
            "enum": [
                "SEVERITY_UNSPECIFIED",
                "SEVERITY_NOTICE",
                "SEVERITY_WARNING",
                "SEVERITY_ERROR"
            ],
            "default": "SEVERITY_UNSPECIFIED",
            "title": "Severity tells the severity type"
        },
        "Status": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "$ref": "#/definitions/StatusCode",
                    "default": "SUCCESS",
                    "description": "describes the overall status of the operation",
                    "readOnly": true
                },
                "description": {
                    "$ref": "#/definitions/Description",
                    "description": "top level description of the operation",
                    "readOnly": true
                }
            },
            "description": "Status encapsulates the top level status of the operation",
            "title": "Status encapsulates the top level status of the operation"
        },
        "StatusCode": {
            "type": "string",
            "enum": [
                "STATUS_CODE_UNSPECIFIED",
                "STATUS_CODE_SUCCESS",
                "STATUS_CODE_FAILURE",
                "STATUS_CODE_PARTIAL_SUCCESS"
            ],
            "default": "STATUS_CODE_UNSPECIFIED",
            "title": "status codes for internal use (Gilas and Niles)"
        },
        "Subject": {
            "type": "object",
            "properties": {
                "commonName": {
                    "type": "string",
                    "description": "Certificate common name."
                },
                "country": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of countries."
                },
                "organization": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of organization."
                },
                "organizationalUnit": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Organizational Unit."
                },
                "locality": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of locallity."
                },
                "postalCode": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Postal codes."
                },
                "province": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of List of Prvince."
                },
                "serialNumber": {
                    "type": "string",
                    "description": "Subject cerial number"
                }
            }
        },
        "Summary": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Summary description"
                },
                "total": {
                    "type": "number",
                    "format": "int64",
                    "description": "Total"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": "Values: Map for storing <string, uint32>"
                }
            },
            "description": "Summary is used to store the Summary details",
            "title": "Summary is used to store the Summary details"
        },
        "VolInstConfig": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the volume instance.",
                    "readOnly": true,
                    "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the volume instance, unique across the enterprise. Once object is created, name can\u2019t be changed.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the volume instance. Title can be changed at any time.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the volume instance.",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined Revision info of the object",
                    "readOnly": true
                },
                "projectId": {
                    "type": "string",
                    "description": "id of the project in which the volume instance is created"
                },
                "type": {
                    "type": "string",
                    "$ref": "#/definitions/VolumeInstanceType",
                    "description": "type of Volume Instance"
                },
                "deviceId": {
                    "type": "string",
                    "description": "id of the device on which volume instance is created"
                },
                "multiattach": {
                    "type": "boolean",
                    "description": "flag to enable the volume to be attached to multiple app instances"
                },
                "cleartext": {
                    "type": "boolean",
                    "description": "flag to keep the contents of the volume unencrypted (in clear text)"
                },
                "accessmode": {
                    "type": "string",
                    "$ref": "#/definitions/VolumeInstanceAccessMode",
                    "description": "Access mode"
                },
                "sizeBytes": {
                    "type": "integer",
                    "format": "uint64",
                    "description": "size of volume"
                },
                "image": {
                    "type": "string",
                    "description": "name of the image"
                },
                "implicit": {
                    "type": "string",
                    "description": "flag to create implicit volumes"
                },
                "contentTreeId": {
                    "type": "string",
                    "description": "content tree ID"
                },
                "label": {
                    "type": "string",
                    "description": "label"
                },
                "purge": {
                    "$ref": "#/definitions/ZedCloudOpsCmd",
                    "description": "Purge Counter information"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "patchartifactvolume": {
                    "type": "string",
                    "description": "flag to indicate whether volume instance is created for patch envelope external artifact"
                }
            }
        },
        "VolInstList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VolInstShortConfig"
                    }
                },
                "cfgList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VolInstConfig"
                    }
                },
                "summaryByType": {
                    "$ref": "#/definitions/Summary"
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            }
        },
        "VolInstResource": {
            "type": "object",
            "properties": {
                "curSizeBytes": {
                    "type": "string",
                    "format": "uint64"
                },
                "maxSizeBytes": {
                    "type": "string",
                    "format": "uint64"
                }
            }
        },
        "VolInstShortConfig": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/VolumeInstanceType"
                },
                "deviceId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                }
            }
        },
        "VolInstStatusListMsg": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VolInstStatusSummaryMsg"
                    }
                },
                "summaryByState": {
                    "$ref": "#/definitions/Summary"
                },
                "summaryByType": {
                    "$ref": "#/definitions/Summary"
                },
                "totalCount": {
                    "type": "integer",
                    "format": "int64"
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            }
        },
        "VolInstStatusMsg": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "string",
                    "title": "device on which this volume is located"
                },
                "runState": {
                    "$ref": "#/definitions/RunState"
                },
                "projectId": {
                    "type": "string"
                },
                "progressPercentage": {
                    "type": "integer",
                    "format": "int64"
                },
                "usage": {
                    "$ref": "#/definitions/DeviceObjectUsageInfo"
                },
                "resource": {
                    "$ref": "#/definitions/VolInstResource"
                },
                "sha256": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/VolumeInstanceType"
                },
                "deviceState": {
                    "$ref": "#/definitions/SWState"
                },
                "blobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BlobInfo"
                    }
                },
                "errInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeviceError"
                    }
                },
                "rawStatus": {
                    "type": "string"
                }
            }
        },
        "VolInstStatusSummaryMsg": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "string"
                },
                "runState": {
                    "$ref": "#/definitions/RunState"
                },
                "createTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "projectId": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/VolumeInstanceType"
                },
                "deviceState": {
                    "$ref": "#/definitions/SWState"
                },
                "progressPercentage": {
                    "type": "integer",
                    "format": "int64"
                },
                "deviceName": {
                    "type": "string"
                },
                "projectName": {
                    "type": "string"
                }
            }
        },
        "VolumeInstanceAccessMode": {
            "type": "string",
            "enum": [
                "VOLUME_INSTANCE_ACCESS_MODE_INVALID",
                "VOLUME_INSTANCE_ACCESS_MODE_READWRITE",
                "VOLUME_INSTANCE_ACCESS_MODE_READONLY",
                "VOLUME_INSTANCE_ACCESS_MODE_MULTIREAD_SINGLEWRITE"
            ],
            "default": "VOLUME_INSTANCE_ACCESS_MODE_INVALID"
        },
        "VolumeInstanceConfig_HttpRequestVolumeInstanceType_HttpRequest": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "EMPTYDIR",
                "BLOCKSTORAGE",
                "HOSTFS",
                "TMPFS",
                "SECRET",
                "NFS",
                "AWS_BLOCK_STORAGE",
                "CONTENT_TREE"
            ],
            "default": "UNSPECIFIED"
        },
        "VolumeInstanceType": {
            "type": "string",
            "enum": [
                "VOLUME_INSTANCE_TYPE_UNSPECIFIED",
                "VOLUME_INSTANCE_TYPE_EMPTYDIR",
                "VOLUME_INSTANCE_TYPE_BLOCKSTORAGE",
                "VOLUME_INSTANCE_TYPE_HOSTFS",
                "VOLUME_INSTANCE_TYPE_TMPFS",
                "VOLUME_INSTANCE_TYPE_SECRET",
                "VOLUME_INSTANCE_TYPE_NFS",
                "VOLUME_INSTANCE_TYPE_AWS_BLOCK_STORAGE",
                "VOLUME_INSTANCE_TYPE_CONTENT_TREE"
            ],
            "default": "VOLUME_INSTANCE_TYPE_UNSPECIFIED",
            "title": "VolumeInstanceType - On update, please update VolumeInstanceType_HttpRequest as well"
        },
        "ZcOpsStatus": {
            "type": "string",
            "enum": [
                "OPS_STATUS_UNSPECIFIED",
                "OPS_STATUS_PENDING",
                "OPS_STATUS_ONGOING",
                "OPS_STATUS_COMPLETE"
            ],
            "default": "OPS_STATUS_UNSPECIFIED",
            "description": "- OPS_STATUS_PENDING: In rare cases, system may not start operation when it was requested. Client will be notified that operation is PENDING\n - OPS_STATUS_ONGOING: system will start the operation, but at the time response was generated, operation is still ONGOING.\n - OPS_STATUS_COMPLETE: Even if the result of the operations may result in failure, but the OpsStatus will marked COMPLETE for almost all cases.",
            "title": "ZedCloud internal operation status"
        },
        "ZcOpsType": {
            "type": "string",
            "enum": [
                "OPS_TYPE_UNSPECIFIED",
                "OPS_TYPE_READ",
                "OPS_TYPE_DELETE",
                "OPS_TYPE_CREATE",
                "OPS_TYPE_UPDATE",
                "OPS_TYPE_LIST"
            ],
            "default": "OPS_TYPE_UNSPECIFIED",
            "title": "ZedCloud internal operation type"
        },
        "ZedCloudOpsCmd": {
            "type": "object",
            "properties": {
                "counter": {
                    "type": "number",
                    "format": "int64",
                    "description": "counter"
                },
                "opsTime": {
                    "type": "object",
                    "format": "date-time",
                    "description": "Timestamp: Operational time"
                }
            },
            "description": "Zed cloud Operation command",
            "title": "Zed cloud Operation command"
        },
        "ZsrvError": {
            "type": "object",
            "properties": {
                "ec": {
                    "$ref": "#/definitions/ZsrvErrorCode",
                    "title": "Enumrated error code, describes more granular numerical\nvalue than just httpStatus"
                },
                "location": {
                    "type": "string",
                    "title": "Ignore: Internal field only"
                },
                "details": {
                    "type": "string",
                    "title": "Field captures string description of details"
                }
            }
        },
        "ZsrvErrorCode": {
            "type": "string",
            "enum": [
                "zMsgErrorNone",
                "zMsgSucess",
                "NotFound",
                "AlreadyExists",
                "VersionMismatch",
                "RangeError",
                "LargeResult",
                "IncompleteData",
                "InvalidData",
                "FunctionUnsupported",
                "NoMemory",
                "SendFailure",
                "Timeout",
                "BadReqBody",
                "BadReqParam",
                "InvalidFieldFormat",
                "UrlNotFound",
                "ApiVersionNotSupported",
                "Unauthorized",
                "Forbidden",
                "Conflict",
                "NotModified",
                "DependencyConflict",
                "JsonFmtError",
                "ProtoFmtError",
                "CertError",
                "DataBaseConnection",
                "DBError",
                "zMsgAccepted",
                "zMsgCreated",
                "PreConditionFailed",
                "InternalServerError"
            ],
            "default": "zMsgErrorNone",
            "description": "- zMsgErrorNone: common validation errors\n - IncompleteData: message had fields that weren't filled in\n - InvalidData: message contained the field that wasn't expected\n - FunctionUnsupported: this feature unavailable on this version of device\n - InvalidFieldFormat: message contained the field that wasn't correctly formatted\n - JsonFmtError: Marshal / Unmarshal errors\n - DataBaseConnection: generic DB error",
            "title": "ZedCould internal error code"
        },
        "ZsrvResponse": {
            "type": "object",
            "properties": {
                "operationType": {
                    "$ref": "#/definitions/ZcOpsType",
                    "title": "Describes one of the operations type : possible values\n                        Read/Delete/Create/Update/List"
                },
                "operationStatus": {
                    "$ref": "#/definitions/ZcOpsStatus",
                    "title": "if this is log running job"
                },
                "objectKind": {
                    "type": "string",
                    "title": "zedcloud object kind on which the operation was performed"
                },
                "objectId": {
                    "type": "string",
                    "title": "Unique value identifies the object that was operated on"
                },
                "objectName": {
                    "type": "string",
                    "title": "name of the object"
                },
                "objectRevision": {
                    "type": "string",
                    "title": "object revision post the operation, note Read operation\ndoesn't change the revision"
                },
                "objectType": {
                    "$ref": "#/definitions/ObjectType"
                },
                "operationTime": {
                    "type": "string",
                    "title": "time of operation"
                },
                "startTime": {
                    "type": "string",
                    "title": "total time taken by operations"
                },
                "endTime": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "title": "the operation is performed on behalf of this user"
                },
                "httpStatusCode": {
                    "type": "integer",
                    "format": "int32",
                    "title": "http response"
                },
                "httpStatusMsg": {
                    "type": "string",
                    "title": "summary of the error in text format"
                },
                "jobId": {
                    "type": "string",
                    "title": "for tracking asynchronous tasks"
                },
                "error": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ZsrvError"
                    },
                    "title": "one or more errors will be set if the operation failed\ni.e. httpStatusCode != 2xx"
                }
            }
        },
        "configFormat": {
            "type": "string",
            "enum": [
                "FmtUnknown",
                "RAW",
                "QCOW",
                "QCOW2",
                "VHD",
                "VMDK",
                "OVA",
                "VHDX",
                "CONTAINER",
                "ISO",
                "PVC"
            ],
            "default": "FmtUnknown"
        },
        "googlerpcStatus": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "properties": {
                "typeUrl": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "protobufNullValue": {
            "type": "string",
            "enum": [
                "NULL_VALUE"
            ],
            "default": "NULL_VALUE",
            "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
        }
    },
    "securityDefinitions": {
        "BearerToken": {
            "type": "apiKey",
            "description": "Bearer token for user session",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerToken": []
        }
    ],
    "externalDocs": {
        "description": "ZEDEDA Product Documentation",
        "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/storage"
    }
}