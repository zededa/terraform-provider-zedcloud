{
    "swagger": "2.0",
    "info": {
        "title": "ZEDEDA Edge Network Service",
        "description": "The ZEDEDA Edge Network Service is helper service to ZEDEDA Edge Application Service. This service provides edge nodes and applications a variety of connectivity choices for all types of networks. This enables physical connectivity with Ethernet, WiFi, LTE to communicate with Cloud Controller and Data Centres on one hand and logical secure connectivity between applications within a single edge node and within a logical group of edge nodes. This also supports secure tunnel from an edge node or an edge application in a remote location to a Data server behindi firewall in AWS or Azure or On-premise VPC.",
        "termsOfService": "https://www.zededa.com/terms",
        "version": "1.0",
        "contact": {
            "name": "ZEDEDA API Support",
            "url": "https://www.zededa.com/support",
            "email": "support@zededa.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [
        {
            "name": "EdgeNetworkConfiguration"
        },
        {
            "name": "EdgeNetworkInstanceConfiguration"
        },
        {
            "name": "EdgeNetworkInstanceStatus"
        }
    ],
    "basePath": "/api",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/v1/netinsts": {
            "get": {
                "summary": "Query edge network instances",
                "description": "Query the edge network instance records.",
                "operationId": "EdgeNetworkInstanceConfiguration_QueryEdgeNetworkInstances",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetInstList"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "deviceName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "deviceNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            },
            "post": {
                "summary": "Create edge network instance",
                "description": "Create an edge network instance record.",
                "operationId": "EdgeNetworkInstanceConfiguration_CreateEdgeNetworkInstance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this edge network record will conflict with an already existing edge network record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetInstConfig"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/netinsts/id/{id}": {
            "get": {
                "summary": "Get edge network instance",
                "description": "Get the configuration (without security details) of an edge network instance record.",
                "operationId": "EdgeNetworkInstanceConfiguration_GetEdgeNetworkInstance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetInstConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the network instance",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            },
            "delete": {
                "summary": "Delete edge network instance",
                "description": "Delete an edge network instance record.",
                "operationId": "EdgeNetworkInstanceConfiguration_DeleteEdgeNetworkInstance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the network instance",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            },
            "put": {
                "summary": "Update edge network instance",
                "description": "Update an edge network instance. The usual pattern to update an edge network instance record is to retrieve the record and update with the modified values in a new body to update the edge network instance record.",
                "operationId": "EdgeNetworkInstanceConfiguration_UpdateEdgeNetworkInstance",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge network record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetInstConfigUpdate_HttpRequest"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/netinsts/id/{id}/status": {
            "get": {
                "summary": "Get edge network instance status",
                "description": "Get the status of an edge network instance as reported by the edge node where the edge network instance has been deployed.",
                "operationId": "EdgeNetworkInstanceStatus_GetEdgeNetworkInstanceStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetInstStatusMsg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/netinsts/name/{name}": {
            "get": {
                "summary": "Get edge network instance",
                "description": "Get the configuration (without security details) of an edge network instance record.",
                "operationId": "EdgeNetworkInstanceConfiguration_GetEdgeNetworkInstanceByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetInstConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "description": "User defined name of the network instance, unique across the enterprise. Once object is created, name can\u2019t be changed",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/netinsts/name/{name}/status": {
            "get": {
                "summary": "Get edge network instance status",
                "description": "Get the status of an edge network instance as reported by the edge node where the edge network instance has been deployed.",
                "operationId": "EdgeNetworkInstanceStatus_GetEdgeNetworkInstanceStatusByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetInstStatusMsg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/netinsts/status": {
            "get": {
                "summary": "Query status of edge network instances",
                "description": "Query the status of edge network instances as reported by the edge nodes where the edge network instances have been deployed.",
                "operationId": "EdgeNetworkInstanceStatus_QueryEdgeNetworkInstanceStatus",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetInstStatusListMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "deviceName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "runState",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "UNSPECIFIED",
                            "ONLINE",
                            "HALTED",
                            "INIT",
                            "REBOOTING",
                            "OFFLINE",
                            "UNKNOWN",
                            "UNPROVISIONED",
                            "PROVISIONED",
                            "SUSPECT",
                            "DOWNLOADING",
                            "RESTARTING",
                            "PURGING",
                            "HALTING",
                            "ERROR",
                            "VERIFYING",
                            "LOADING",
                            "CREATING_VOLUME",
                            "BOOTING",
                            "MAINTENANCE_MODE",
                            "START_DELAYED",
                            "BASEOS_UPDATING",
                            "PREPARING_POWEROFF",
                            "POWERING_OFF",
                            "PREPARED_POWEROFF"
                        ],
                        "default": "UNSPECIFIED"
                    },
                    {
                        "name": "deviceNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "kind",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/netinsts/status-config": {
            "get": {
                "summary": "Query status and config of edge network instances",
                "description": "Query the status and config of edge network instances as reported by the edge nodes where the edge network instances have been deployed.",
                "operationId": "EdgeNetworkInstanceStatus_QueryEdgeNetworkInstanceStatusConfig",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetInstConfigStatusList"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "deviceName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tags",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "runState",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "UNSPECIFIED",
                            "ONLINE",
                            "HALTED",
                            "INIT",
                            "REBOOTING",
                            "OFFLINE",
                            "UNKNOWN",
                            "UNPROVISIONED",
                            "PROVISIONED",
                            "SUSPECT",
                            "DOWNLOADING",
                            "RESTARTING",
                            "PURGING",
                            "HALTING",
                            "ERROR",
                            "VERIFYING",
                            "LOADING",
                            "CREATING_VOLUME",
                            "BOOTING",
                            "MAINTENANCE_MODE",
                            "START_DELAYED",
                            "BASEOS_UPDATING",
                            "PREPARING_POWEROFF",
                            "POWERING_OFF",
                            "PREPARED_POWEROFF"
                        ],
                        "default": "UNSPECIFIED"
                    },
                    {
                        "name": "deviceNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "kind",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/netinsts/tags": {
            "get": {
                "summary": "Query Network instance tags",
                "description": "Netork instance tags LIST API is to fetch the interfaces tags attached to app instances.",
                "operationId": "EdgeNetworkInstanceStatus_GetNetworkInstanceInterfaceTags",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ObjectTagsList"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkInstanceStatus"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/networks": {
            "get": {
                "summary": "Query edge networks",
                "description": "Query the edge network records.",
                "operationId": "EdgeNetworkConfiguration_QueryEdgeNetworks",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetConfigList"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of invalid value of filter parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "projectName",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "namePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projectNamePattern",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "dist",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "kind",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "summary",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "defaultNetwork",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "next.pageToken",
                        "description": "Page Token",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "next.orderBy",
                        "description": "OrderBy helps in sorting the list response",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "next.pageNum",
                        "description": "Page Number",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.pageSize",
                        "description": "Defines the page size",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "next.totalPages",
                        "description": "Total number of pages to be fetched.",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "format": "int64"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            },
            "post": {
                "summary": "Create edge network",
                "description": "Create an edge network record.",
                "operationId": "EdgeNetworkConfiguration_CreateEdgeNetwork",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this edge network record will conflict with an already existing edge network record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetConfig"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/networks/id/{id}": {
            "get": {
                "summary": "Get edge network",
                "description": "Get the configuration (without security details) of an edge network record.",
                "operationId": "EdgeNetworkConfiguration_GetEdgeNetwork",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the network",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            },
            "delete": {
                "summary": "Delete edge network",
                "description": "Delete an edge network record.",
                "operationId": "EdgeNetworkConfiguration_DeleteEdgeNetwork",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the network",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            },
            "put": {
                "summary": "Update edge network",
                "description": "Update an edge network. The usual pattern to update an edge network record is to retrieve the record and update with the modified values in a new body to update the edge network record.",
                "operationId": "EdgeNetworkConfiguration_UpdateEdgeNetwork",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge network record.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NetConfigForUpdate_HttpRequest"
                        }
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/networks/id/{id}/devices": {
            "get": {
                "summary": "Get edge network devices by id",
                "description": "Get the list of devices associated with the specified network.",
                "operationId": "EdgeNetworkConfiguration_GetEdgeNetworkDevicesById",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetworkDeviceList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "id",
                        "description": "System defined universally unique Id of the network",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        },
        "/v1/networks/name/{name}": {
            "get": {
                "summary": "Get edge network",
                "description": "Get the configuration (without security details) of an edge network record.",
                "operationId": "EdgeNetworkConfiguration_GetEdgeNetworkByName",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/NetConfig"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found. The API gateway did not process the request because the requested resource could not be found.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.",
                        "schema": {
                            "$ref": "#/definitions/ZsrvResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response.",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "name",
                        "description": "User defined name of the network, unique across the enterprise. Once object is created, name can\u2019t be changed",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "X-Request-Id",
                        "in": "header",
                        "required": false,
                        "description": "User-Agent specified id to track a request",
                        "type": "string"
                    }
                ],
                "tags": [
                    "EdgeNetworkConfiguration"
                ],
                "externalDocs": {
                    "description": "ZEDEDA Product Documentation",
                    "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
                }
            }
        }
    },
    "definitions": {
        "CellularAuthProtocol": {
            "type": "string",
            "enum": [
                "CELLULAR_AUTH_PROTOCOL_NONE",
                "CELLULAR_AUTH_PROTOCOL_PAP",
                "CELLULAR_AUTH_PROTOCOL_CHAP",
                "CELLULAR_AUTH_PROTOCOL_PAP_AND_CHAP"
            ],
            "default": "CELLULAR_AUTH_PROTOCOL_NONE",
            "description": " - CELLULAR_AUTH_PROTOCOL_NONE: No authentication.\n - CELLULAR_AUTH_PROTOCOL_PAP: Password Authentication Protocol.\n - CELLULAR_AUTH_PROTOCOL_CHAP: Challenge-Handshake Authentication Protocol.\n - CELLULAR_AUTH_PROTOCOL_PAP_AND_CHAP: Both PAP and CHAP."
        },
        "Cursor": {
            "type": "object",
            "properties": {
                "pageToken": {
                    "type": "string",
                    "description": "Page Token"
                },
                "orderBy": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "OrderBy helps in sorting the list response"
                },
                "pageNum": {
                    "type": "number",
                    "format": "int64",
                    "description": "Page Number"
                },
                "pageSize": {
                    "type": "number",
                    "format": "int64",
                    "description": "Defines the page size"
                },
                "totalPages": {
                    "type": "number",
                    "format": "int64",
                    "description": "Total number of pages to be fetched."
                }
            },
            "description": "Cursor helps in filtering the various list response like edge-app bundle list, model list, bundle list etc. ",
            "title": "Cursor is used as filter in list operation."
        },
        "DeviceEntity": {
            "type": "object",
            "properties": {
                "entity": {
                    "$ref": "#/definitions/Entity"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                }
            }
        },
        "DeviceError": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the error"
                },
                "severity": {
                    "type": "string",
                    "$ref": "#/definitions/Severity",
                    "description": "Severity of the error"
                },
                "timestamp": {
                    "type": "object",
                    "format": "date-time",
                    "description": "Timestamp at which error had occurred"
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeviceEntity"
                    },
                    "description": "objects referenced by the description or retry_condition"
                },
                "retryCondition": {
                    "type": "string",
                    "description": "condition for retry"
                }
            },
            "description": "DeviceError store the error occurred at the device side",
            "title": "DeviceError is used to store the error details of the hardware.",
            "required": [
                "description",
                "severity",
                "timestamp",
                "entities"
            ]
        },
        "DhcpServerConfig": {
            "type": "object",
            "properties": {
                "subnet": {
                    "type": "string",
                    "description": "Subnet address"
                },
                "mask": {
                    "type": "string",
                    "description": "Subnet Mask"
                },
                "gateway": {
                    "type": "string",
                    "description": "IP Address of Network Gateway"
                },
                "domain": {
                    "type": "string",
                    "description": "Network domain"
                },
                "ntp": {
                    "type": "string",
                    "description": "IP Address of NTP Server",
                    "title": "ntp will be deprecated"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IP Addresses of DNS servers",
                    "title": "possible DNS ip address"
                },
                "dhcpRange": {
                    "$ref": "#/definitions/dhcpIpRange",
                    "description": "Range of IP addresses to be used for DHCP"
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NtpServer"
                    },
                    "description": "NTP Servers"
                }
            }
        },
        "Entity": {
            "type": "string",
            "enum": [
                "ENTITY_UNSPECIFIED",
                "ENTITY_BASE_OS",
                "ENTITY_SYSTEM_ADAPTER",
                "ENTITY_VAULT",
                "ENTITY_ATTESTATION",
                "ENTITY_APP_INSTANCE",
                "ENTITY_PORT",
                "ENTITY_NETWORK",
                "ENTITY_NETWORK_INSTANCE",
                "ENTITY_CONTENT_TREE",
                "ENTITY_CONTENT_BLOB",
                "ENTITY_VOLUME"
            ],
            "default": "ENTITY_UNSPECIFIED",
            "description": "- ENTITY_UNSPECIFIED: Invalid Device Entity\n - ENTITY_BASE_OS: Base OS entity\n - ENTITY_SYSTEM_ADAPTER: System Adapter Entity\n - ENTITY_VAULT: Vault Entity\n - ENTITY_ATTESTATION: Attestation Entity\n - ENTITY_APP_INSTANCE: App Instance Entity\n - ENTITY_PORT: Port Entity\n - ENTITY_NETWORK: Network Entity\n - ENTITY_NETWORK_INSTANCE: Network Instance Entity\n - ENTITY_CONTENT_TREE: ContentTree Entity\n - ENTITY_CONTENT_BLOB: Blob Entity\n - ENTITY_VOLUME: VOLUME Entity",
            "title": "Edge node components"
        },
        "IPAssignment": {
            "type": "object",
            "properties": {
                "macAddress": {
                    "type": "string"
                },
                "ipAddress": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "IoAddresses": {
            "type": "object",
            "properties": {
                "macAddress": {
                    "type": "string"
                }
            }
        },
        "IoBundleStatus": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "object",
                    "$ref": "#/definitions/IoType",
                    "description": "IoType specifies the type of the Input output of the device"
                },
                "name": {
                    "type": "string",
                    "description": "Io Bundle status name"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Member Array",
                    "title": "members - Deprecated by memberList"
                },
                "appName": {
                    "type": "string",
                    "description": "Application name"
                },
                "lteInfo": {
                    "type": "object",
                    "$ref": "#/definitions/LTEAdapter",
                    "description": "LTE information"
                },
                "err": {
                    "$ref": "#/definitions/DeviceError",
                    "description": "Device error details",
                    "title": "6 - DEPRECATED"
                },
                "memberList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IoMemberStatus"
                    },
                    "description": "List of IO members"
                }
            },
            "description": "IoBundleStatus is used to store the status of the Input Output bundle",
            "title": "IoBundleStatus is used to store the status of the Input Output bundle",
            "required": [
                "type",
                "name",
                "members",
                "appName"
            ]
        },
        "IoMemberStatus": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "IoBundle Member name"
                },
                "ioAddress": {
                    "$ref": "#/definitions/IoAddresses",
                    "description": "IO addresses of the member. Each address corresponds to the member in the members array"
                }
            }
        },
        "IoType": {
            "type": "string",
            "enum": [
                "IO_TYPE_UNSPECIFIED",
                "IO_TYPE_ETH",
                "IO_TYPE_USB",
                "IO_TYPE_COM",
                "IO_TYPE_AUDIO",
                "IO_TYPE_WLAN",
                "IO_TYPE_WWAN",
                "IO_TYPE_HDMI",
                "IO_TYPE_LTE",
                "IO_TYPE_STORAGE_NVME_DEVICE",
                "IO_TYPE_STORAGE_SATA_DEVICE",
                "IO_TYPE_ETH_PF",
                "IO_TYPE_ETH_VF",
                "IO_TYPE_USB_CONTROLLER",
                "IO_TYPE_USB_DEVICE",
                "IO_TYPE_CAN",
                "IO_TYPE_VCAN",
                "IO_TYPE_LCAN",
                "IO_TYPE_OTHER"
            ],
            "default": "IO_TYPE_UNSPECIFIED",
            "description": "- IO_TYPE_UNSPECIFIED: No operation/ Invalid peration\n - IO_TYPE_ETH: Ethernet\n - IO_TYPE_USB: USB Type - General\n - IO_TYPE_COM: Communication Port\n - IO_TYPE_AUDIO: Audio Port\n - IO_TYPE_WLAN: wireless LAN\n - IO_TYPE_WWAN: Wireless wide area network\n - IO_TYPE_HDMI: High-Definition Multimedia Interface\n - IO_TYPE_LTE: LTE Interfaces\n - IO_TYPE_STORAGE_NVME_DEVICE: Storage NVME device\n - IO_TYPE_STORAGE_SATA_DEVICE: Storage SATA device\n - IO_TYPE_ETH_PF: Physical Interface (PF) of the Virtual Functions\n - IO_TYPE_ETH_VF: Virtual Function (VF)\n - IO_TYPE_USB_CONTROLLER: USB Type - Controller\n - IO_TYPE_USB_DEVICE: USB Type - Device\n - IO_TYPE_CAN: CAN - Device\n - IO_TYPE_VCAN: VCAN - Virtual CAN device\n - IO_TYPE_LCAN: LCAN - Logical CAN device\n - IO_TYPE_OTHER: Other Io Types",
            "title": "Input/Output Type"
        },
        "IpSpec": {
            "type": "object",
            "properties": {
                "deprecatedDhcp": {
                    "type": "boolean",
                    "title": "deprecated"
                },
                "dhcp": {
                    "$ref": "#/definitions/NetworkDHCPType"
                },
                "subnet": {
                    "type": "string"
                },
                "mask": {
                    "type": "string"
                },
                "gateway": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "ntp": {
                    "type": "string",
                    "title": "ntp will be deprecated"
                },
                "dns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dhcpRange": {
                    "$ref": "#/definitions/dhcpIpRange",
                    "description": "for IPAM management when dhcp is turned on.\nIf none provided, system will default pool."
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NtpServer"
                    }
                },
                "ntpServerExclusively": {
                    "type": "boolean"
                }
            }
        },
        "LTEAdapter": {
            "type": "object",
            "properties": {
                "simName": {
                    "type": "string",
                    "description": "Name of SIM card."
                },
                "cellModuleName": {
                    "type": "string",
                    "description": "Name of Cell Module"
                },
                "imsi": {
                    "type": "string",
                    "description": "imsi of the SIM"
                },
                "iccid": {
                    "type": "string",
                    "description": "iccid of the SIM"
                },
                "simcardState": {
                    "type": "string",
                    "$ref": "#/definitions/SimcardState",
                    "description": "State of SimCard"
                },
                "imei": {
                    "type": "string",
                    "description": "IMEI of Cell Radio."
                },
                "firmwareVersion": {
                    "type": "string",
                    "description": "Firmware Version of Cell Radio."
                }
            },
            "description": "Details of LTE Adapter",
            "title": "LTE Adapter"
        },
        "LispConfig": {
            "type": "object",
            "properties": {
                "lispiid": {
                    "type": "number",
                    "format": "int64",
                    "description": "lisp id"
                },
                "allocate": {
                    "type": "boolean",
                    "description": "Allocate flag"
                },
                "exportprivate": {
                    "type": "boolean",
                    "description": "Export Private flag"
                },
                "allocationprefix": {
                    "type": "string",
                    "format": "byte",
                    "description": "Allocation Prefix"
                },
                "allocationprefixlen": {
                    "type": "number",
                    "format": "int64",
                    "description": "Allocation Prefix Length"
                },
                "sp": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServicePoint"
                    },
                    "description": "Service Point List"
                }
            },
            "description": "List Configurations.",
            "title": "Lisp Configurations"
        },
        "NetCellularAccessPoint": {
            "type": "object",
            "properties": {
                "simSlot": {
                    "type": "integer",
                    "format": "int64",
                    "description": "SIM card slot to which this configuration applies.\n0 - unspecified (apply to currently activated or the only available)\n1 - config for SIM card in the first slot\n2 - config for SIM card in the second slot\netc."
                },
                "apn": {
                    "type": "string",
                    "description": "Access Point Network to connect into.\nBy default it is \"internet\"."
                },
                "authProtocol": {
                    "$ref": "#/definitions/evecommonCellularAuthProtocol",
                    "description": "Authentication protocol used by the network."
                },
                "cipherData": {
                    "$ref": "#/definitions/commonCipherBlock",
                    "description": "Cipher data may contain encrypted user credentials\n(inside cellNetUsername and cellNetPassword fields)."
                },
                "preferredPlmns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of cellular network operators that modem should preferably try to register\nand connect into.\nNetwork operator should be referenced by PLMN (Public Land Mobile Network) code,\nconsisting of 3-digits MCC (Mobile Country Code) and 2 or 3-digits MNC (Mobile Network Code),\nseparated by a dash, e.g. \"310-260\".\nIf empty, then modem will select the network automatically based on the SIM card config."
                },
                "forbidRoaming": {
                    "type": "boolean",
                    "description": "If true, then modem will avoid connecting to networks with roaming."
                },
                "preferredRats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/evecommonRadioAccessTechnology"
                    },
                    "description": "The list of preferred Radio Access Technologies (RATs) to use for connecting\nto the network.\nOrder matters, first is the most preferred, second is tried next, etc.\nNot listed technologies will not be tried.\nIf empty, then modem will select RAT automatically."
                },
                "ipType": {
                    "$ref": "#/definitions/commonCellularIPType",
                    "description": "The IP addressing type to use for the default bearer."
                },
                "attachApn": {
                    "type": "string",
                    "description": "Access Point Name (APN) for the attach (initial) bearer.\nThis field is optional. If not specified, EVE will not send any attach bearer\nconfiguration to the modem. Instead, the modem will use one of its pre-installed\nprofiles (see CellularProfile) to determine the configuration."
                },
                "attachIpType": {
                    "$ref": "#/definitions/commonCellularIPType",
                    "description": "The IP addressing type to use for the attach bearer.\nLeave undefined if attach_apn is not specified."
                },
                "attachAuthProtocol": {
                    "$ref": "#/definitions/CellularAuthProtocol",
                    "description": "Authentication protocol used for the attach bearer.\nLeave undefined if attach_apn is not specified."
                },
                "secrets": {
                    "$ref": "#/definitions/NetCellularAccessPointSecrets"
                },
                "encryptedSecrets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cryptoKey": {
                    "type": "string"
                },
                "attachSecrets": {
                    "$ref": "#/definitions/NetCellularAccessPointSecrets"
                },
                "attachEncryptedSecrets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "NetCellularAccessPointSecrets": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "Cellular Username"
                },
                "password": {
                    "type": "string",
                    "description": "Cellular Password"
                }
            }
        },
        "NetCellularConfig": {
            "type": "object",
            "properties": {
                "APN": {
                    "type": "string",
                    "description": "APN string - by default it is \"internet\".\nTO BE DEPRECATED: Fill connection arguments inside access_points instead.\nIf access_points is non-empty, then APN field is ignored."
                },
                "probe": {
                    "$ref": "#/definitions/configCellularConnectivityProbe",
                    "description": "Optional cellular connectivity probing.\nBy default it is enabled."
                },
                "locationTracking": {
                    "type": "boolean",
                    "description": "Some LTE modems have GNSS receiver integrated and can be used for device\nlocation tracking.\nEnable this option to have location info periodically obtained from this\nmodem and published to controller and to applications."
                },
                "accessPoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetCellularAccessPoint"
                    },
                    "description": "Parameters to apply for connecting to cellular networks.\nConfigured separately for every SIM card inserted into the modem."
                },
                "activatedSimSlot": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Select SIM card slot to activate.\nCurrently, EVE support only single-standby SIM card mode.\n0 - unspecified (leave the currently activated)\n1 - activate the first SIM slot\n2 - activate the second SIM slot\netc."
                }
            }
        },
        "NetConfig": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the network",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the network, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the network. Title can be changed at any time",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the network",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info"
                },
                "projectId": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/NetworkKind"
                },
                "ip": {
                    "$ref": "#/definitions/IpSpec"
                },
                "dnsList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StaticDNSList"
                    }
                },
                "proxy": {
                    "$ref": "#/definitions/NetProxyConfig",
                    "title": "enterprise proxy"
                },
                "enterpriseDefault": {
                    "type": "boolean",
                    "title": "make this network default for device"
                },
                "mtu": {
                    "type": "integer",
                    "format": "int64",
                    "title": "Maximum transmission unit (MTU) to set on the associated network adapter(s)"
                },
                "wireless": {
                    "$ref": "#/definitions/NetWirelessConfig",
                    "title": "Wifi configuration"
                },
                "project": {
                    "$ref": "#/definitions/NetProjectInfo",
                    "title": "project configuration"
                }
            },
            "description": "Network provides Edge nodes a variety of connectivity choices for all types of networks. This enables physical connectivity with Ethernet, WiFi, LTE to communicate with ZEDEDA Cloud controller and Data Centres.",
            "title": "Network detailed configuration",
            "required": [
                "name",
                "title",
                "projectId",
                "kind",
                "ip"
            ]
        },
        "NetConfigForUpdate_HttpRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the network",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the network, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the network. Title can be changed at any time",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the network",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info"
                },
                "projectId": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/NetworkKind"
                },
                "ip": {
                    "$ref": "#/definitions/IpSpec"
                },
                "dnsList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StaticDNSList"
                    }
                },
                "proxy": {
                    "$ref": "#/definitions/NetProxyConfig",
                    "title": "enterprise proxy"
                },
                "enterpriseDefault": {
                    "type": "boolean",
                    "title": "make this network default for device"
                },
                "mtu": {
                    "type": "integer",
                    "format": "int64",
                    "title": "Maximum transmission unit (MTU) to set on the associated network adapter(s)"
                },
                "wireless": {
                    "$ref": "#/definitions/NetWirelessConfig",
                    "title": "Wifi configuration"
                },
                "project": {
                    "$ref": "#/definitions/NetProjectInfo",
                    "title": "project configuration"
                }
            },
            "description": "Network provides Edge nodes a variety of connectivity choices for all types of networks. This enables physical connectivity with Ethernet, WiFi, LTE to communicate with ZEDEDA Cloud controller and Data Centres.",
            "title": "Network detailed configuration",
            "required": [
                "id",
                "name",
                "title",
                "revision",
                "projectId",
                "kind",
                "ip"
            ]
        },
        "NetConfigList": {
            "type": "object",
            "properties": {
                "summary": {
                    "$ref": "#/definitions/Summary",
                    "title": "Summary has been deprecated"
                },
                "summaryByKind": {
                    "$ref": "#/definitions/Summary"
                },
                "summaryByProxy": {
                    "$ref": "#/definitions/Summary"
                },
                "summaryByDist": {
                    "$ref": "#/definitions/Summary"
                },
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetConfig"
                    }
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            }
        },
        "NetInstConfig": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the network instance",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the network instance, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the network instance. Title can be changed at any time",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the network instance",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info for the object"
                },
                "projectId": {
                    "type": "string",
                    "description": "id of the project in which network instance is created"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "clusterID": {
                    "type": "string",
                    "description": "id of the Cluster in which the network instance is configured",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "deviceId": {
                    "type": "string",
                    "description": "id of the device on which network instance is created",
                    "title": "device on which this network is running"
                },
                "port": {
                    "type": "string",
                    "description": "name of port mapping in the model",
                    "title": "name of port mapping in the model"
                },
                "portTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "kind": {
                    "$ref": "#/definitions/NetworkInstanceKind",
                    "description": "Kind of Network Instance ( Local, Switch etc )"
                },
                "dhcp": {
                    "type": "boolean",
                    "description": "Deprecated",
                    "title": "dhcp - DEPRECATED"
                },
                "type": {
                    "$ref": "#/definitions/NetworkInstanceDhcpType",
                    "description": "Type of DHCP for this Network Instance"
                },
                "ip": {
                    "$ref": "#/definitions/DhcpServerConfig",
                    "description": "Dhcp Server Configuration"
                },
                "dnsList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StaticDNSList"
                    },
                    "description": "List of Static DNS entries"
                },
                "oconfig": {
                    "type": "string",
                    "title": "Deprecated"
                },
                "lisp": {
                    "$ref": "#/definitions/LispConfig",
                    "description": "Lisp Config : read only for now. Deprecated."
                },
                "opaque": {
                    "$ref": "#/definitions/NetInstOpaqueConfig",
                    "description": "Service specific Config"
                },
                "deviceDefault": {
                    "type": "boolean",
                    "description": "flag to indicate if this is the default network instance for the device",
                    "title": "flag to indicate if this is default network"
                },
                "networkPolicyId": {
                    "type": "string",
                    "description": "id of the network policy to be attached to this network instance"
                },
                "propagateConnectedRoutes": {
                    "type": "boolean",
                    "description": "Automatically propagate connected routes"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StaticIPRoute"
                    },
                    "description": "List of Static IP routes"
                },
                "mtu": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum transmission unit (MTU) to set for the network instance and all application interfaces connected to it"
                },
                "edgeNodeCluster": {
                    "$ref": "#/definitions/NetInstEdgeNodeCluster",
                    "description": "Edge Node Cluster"
                },
                "forwardLldp": {
                    "type": "boolean",
                    "description": "Enables forwarding of LLDP (Link Layer Discovery Protocol) frames across this\nnetwork instance.\nLLDP is used by devices to advertise identity and capabilities to directly\nconnected neighbors, and is often required for topology discovery and network\nmanagement tools.\nWhen enabled, LLDP frames (EtherType 0x88cc) are not dropped or suppressed\nby the forwarding plane."
                }
            },
            "description": "Network instance provides Edge applications a variety of connectivity choices for all types of networks. This enables logical secure connectivity between Edge applications within a single Edge node and within a logical group of Edge nodes. This provides detailed configuration of a Network instance.",
            "title": "Network instance detailed configuration",
            "required": [
                "name",
                "title",
                "deviceId",
                "port",
                "kind"
            ]
        },
        "NetInstConfigStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the network instance",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the network instance, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "runState": {
                    "$ref": "#/definitions/RunState"
                },
                "upTimeStamp": {
                    "type": "string",
                    "format": "date-time"
                },
                "uplinkIntf": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "clusterID": {
                    "type": "string",
                    "description": "User defined name of the clusterInstance, unique across the enterprise.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "type": {
                    "$ref": "#/definitions/NetworkInstanceDhcpType"
                },
                "kind": {
                    "$ref": "#/definitions/NetworkInstanceKind"
                },
                "deviceDefault": {
                    "type": "boolean"
                },
                "deviceId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "deviceName": {
                    "type": "string"
                },
                "projectName": {
                    "type": "string"
                },
                "networkPolicyId": {
                    "type": "string"
                },
                "edgeNodeClusterID": {
                    "type": "string"
                }
            },
            "description": "NetInstConfigStatus stores the summary of the network instance config status.",
            "title": "Network instance config status"
        },
        "NetInstConfigStatusList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetInstConfigStatus"
                    }
                },
                "summaryByKind": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary information about netinstance config status list records by network instance kind."
                },
                "summaryByAddressType": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary information about netinstance config status list records by addressing type."
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            }
        },
        "NetInstConfigUpdate_HttpRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the network instance",
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the network instance, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "title": {
                    "type": "string",
                    "description": "User defined title of the network instance. Title can be changed at any time",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the network instance",
                    "maxLength": 256
                },
                "revision": {
                    "$ref": "#/definitions/ObjectRevision",
                    "description": "system defined info for the object"
                },
                "projectId": {
                    "type": "string",
                    "description": "id of the project in which network instance is created"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "clusterID": {
                    "type": "string",
                    "description": "id of the Cluster in which the network instance is configured",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "deviceId": {
                    "type": "string",
                    "description": "id of the device on which network instance is created",
                    "title": "device on which this network is running"
                },
                "port": {
                    "type": "string",
                    "description": "name of port mapping in the model",
                    "title": "name of port mapping in the model"
                },
                "portTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "kind": {
                    "$ref": "#/definitions/NetworkInstanceKind",
                    "description": "Kind of Network Instance ( Local, Switch etc )"
                },
                "dhcp": {
                    "type": "boolean",
                    "description": "Deprecated",
                    "title": "dhcp - DEPRECATED"
                },
                "type": {
                    "$ref": "#/definitions/NetworkInstanceDhcpType",
                    "description": "Type of DHCP for this Network Instance"
                },
                "ip": {
                    "$ref": "#/definitions/DhcpServerConfig",
                    "description": "Dhcp Server Configuration"
                },
                "dnsList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StaticDNSList"
                    },
                    "description": "List of Static DNS entries"
                },
                "oconfig": {
                    "type": "string",
                    "title": "Deprecated"
                },
                "lisp": {
                    "$ref": "#/definitions/LispConfig",
                    "description": "Lisp Config : read only for now. Deprecated."
                },
                "opaque": {
                    "$ref": "#/definitions/NetInstOpaqueConfig",
                    "description": "Service specific Config"
                },
                "deviceDefault": {
                    "type": "boolean",
                    "description": "flag to indicate if this is the default network instance for the device",
                    "title": "flag to indicate if this is default network"
                },
                "networkPolicyId": {
                    "type": "string",
                    "description": "id of the network policy to be attached to this network instance"
                },
                "propagateConnectedRoutes": {
                    "type": "boolean",
                    "description": "Automatically propagate connected routes"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/StaticIPRoute"
                    },
                    "description": "List of Static IP routes"
                },
                "mtu": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum transmission unit (MTU) to set for the network instance and all application interfaces connected to it"
                },
                "edgeNodeCluster": {
                    "$ref": "#/definitions/NetInstEdgeNodeCluster",
                    "description": "Edge Node Cluster"
                },
                "forwardLldp": {
                    "type": "boolean",
                    "description": "enable/disable lldp frame forward"
                }
            },
            "description": "Network instance provides Edge applications a variety of connectivity choices for all types of networks. This enables logical secure connectivity between Edge applications within a single Edge node and within a logical group of Edge nodes. This provides detailed configuration of a Network instance.",
            "title": "Network instance detailed configuration",
            "required": [
                "id",
                "name",
                "title",
                "deviceId",
                "port",
                "kind"
            ]
        },
        "NetInstEdgeNodeCluster": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id of the Edge Node Cluster",
                    "pattern": "[0-9A-Za-z-]+"
                },
                "designatedNodeID": {
                    "type": "string",
                    "description": "Id of the designated Edge Node",
                    "pattern": "[0-9A-Za-z-]+"
                }
            }
        },
        "NetInstList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetInstShortConfig"
                    }
                },
                "cfgList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetInstConfig"
                    }
                },
                "summaryByKind": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary information about netinstance list records by network instance kind."
                },
                "summaryByAddressType": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary information about netinstance list records by addressing type."
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            }
        },
        "NetInstOpaqueConfig": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "$ref": "#/definitions/OpaqueConfigType",
                    "description": "type of Opaque config"
                },
                "oconfig": {
                    "type": "string",
                    "description": "base64 encoded string of opaque config"
                },
                "lisp": {
                    "type": "string",
                    "$ref": "#/definitions/LispConfig",
                    "description": "Deprecated - Lisp config",
                    "title": "lisp - Deprecated"
                }
            },
            "description": "Network Instance Opaque config. This is service specific configuration."
        },
        "NetInstShortConfig": {
            "type": "object",
            "example": {
                "id": "d85a545f-6510-4327-b03d-c02eef119e99",
                "name": "sample-app"
            },
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the network instance",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the network instance, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "deviceId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "kind": {
                    "$ref": "#/definitions/NetworkInstanceKind"
                },
                "type": {
                    "$ref": "#/definitions/NetworkInstanceDhcpType"
                },
                "forwardLldp": {
                    "type": "boolean"
                },
                "deviceDefault": {
                    "type": "boolean"
                },
                "networkPolicyId": {
                    "type": "string",
                    "description": "network policy id"
                }
            },
            "description": "Network instance provides Edge applications a variety of connectivity choices for all types of networks. This enables logical secure connectivity between Edge applications within a single Edge node and within a logical group of Edge nodes. This provides summary configuration of a Network instance.",
            "title": "Network instance summary configuration"
        },
        "NetInstStatusListMsg": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetInstStatusSummaryMsg"
                    }
                },
                "summaryByKind": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary information about netinstance status list records by network instance kind."
                },
                "summaryByAddressType": {
                    "$ref": "#/definitions/Summary",
                    "description": "Summary information about netinstance status list records by addressing type."
                },
                "next": {
                    "$ref": "#/definitions/Cursor"
                }
            }
        },
        "NetInstStatusMsg": {
            "type": "object",
            "example": {
                "id": "d85a545f-6510-4327-b03d-c02eef119e99",
                "name": "sample-app"
            },
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the network instance",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the network instance, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "deviceId": {
                    "type": "string",
                    "title": "device on which this network is running"
                },
                "runState": {
                    "$ref": "#/definitions/RunState"
                },
                "upTimeStamp": {
                    "type": "string",
                    "format": "date-time"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "clusterID": {
                    "type": "string",
                    "description": "System defined universally unique clusterInstance ID, unique across the enterprise.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "projectId": {
                    "type": "string"
                },
                "kind": {
                    "$ref": "#/definitions/NetworkInstanceKind"
                },
                "bridgeNum": {
                    "type": "integer",
                    "format": "int64"
                },
                "bridgeName": {
                    "type": "string"
                },
                "bridgeIPAddr": {
                    "type": "string"
                },
                "ipMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IPAssignment"
                    }
                },
                "vifs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VifInfo"
                    }
                },
                "ipv4Eid": {
                    "type": "boolean"
                },
                "assignedAdapters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IoBundleStatus"
                    }
                },
                "uplinkIntf": {
                    "type": "string"
                },
                "mtu": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum transmission unit (MTU) to set for the network instance and all application interfaces connected to it"
                },
                "ipRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/eveinfoIPRoute"
                    },
                    "description": "List of IP routes used by the network instance"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ports used by the network instance"
                },
                "errInfo": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeviceError"
                    }
                },
                "rawStatus": {
                    "type": "string"
                }
            },
            "description": "Network instance provides Edge applications a variety of connectivity choices for all types of networks. This enables logical secure connectivity between Edge applications within a single Edge node and within a logical group of Edge nodes. This provides detailed status of a Network instance.",
            "title": "Network instance detailed status"
        },
        "NetInstStatusSummaryMsg": {
            "type": "object",
            "example": {
                "id": "d85a545f-6510-4327-b03d-c02eef119e99",
                "name": "sample-app"
            },
            "properties": {
                "id": {
                    "type": "string",
                    "description": "System defined universally unique Id of the network instance",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z-]+",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "User defined name of the network instance, unique across the enterprise. Once object is created, name can\u2019t be changed",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "runState": {
                    "$ref": "#/definitions/RunState"
                },
                "upTimeStamp": {
                    "type": "string",
                    "format": "date-time"
                },
                "uplinkIntf": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.",
                    "maxLength": 32,
                    "pattern": "^[^<%&?/\\>]+$"
                },
                "clusterID": {
                    "type": "string",
                    "description": "User defined name of the clusterInstance, unique across the enterprise.",
                    "maxLength": 256,
                    "minLength": 3,
                    "pattern": "[a-zA-Z0-9][a-zA-Z0-9_.-]+",
                    "uniqueItems": true
                },
                "type": {
                    "$ref": "#/definitions/NetworkInstanceDhcpType"
                },
                "kind": {
                    "$ref": "#/definitions/NetworkInstanceKind"
                },
                "deviceId": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string"
                },
                "deviceName": {
                    "type": "string"
                },
                "projectName": {
                    "type": "string"
                },
                "edgeNodeClusterID": {
                    "type": "string"
                }
            },
            "description": "Network instance provides Edge applications a variety of connectivity choices for all types of networks. This enables logical secure connectivity between Edge applications within a single Edge node and within a logical group of Edge nodes. This provides summary status of a Network instance.",
            "title": "Network instance summary status"
        },
        "NetProjectInfo": {
            "type": "object",
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "system generated unique id for a project",
                    "readOnly": true,
                    "pattern": "[0-9A-Za-z-]+"
                },
                "projectName": {
                    "type": "string",
                    "description": "project name"
                }
            }
        },
        "NetProxyConfig": {
            "type": "object",
            "properties": {
                "networkProxy": {
                    "type": "boolean",
                    "description": "Network proxy"
                },
                "proxies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetProxyServer"
                    },
                    "description": "Net Proxy: protocol level proxies",
                    "title": "protocol level proxies"
                },
                "exceptions": {
                    "type": "string",
                    "description": "Proxy exceptions"
                },
                "pacfile": {
                    "type": "string",
                    "description": "proxy configuration in a pacfile",
                    "title": "proxy configuration in a pacfile"
                },
                "networkProxyURL": {
                    "type": "string",
                    "description": "Network Proxy URL",
                    "title": "Direct URL for wpad.dat download"
                },
                "networkProxyCerts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "byte"
                    },
                    "description": "Network Proxy Certificates",
                    "title": "Proxy Certificates"
                }
            },
            "description": "Net Proxy Configurations",
            "title": "Net Proxy Configurations"
        },
        "NetProxyServer": {
            "type": "object",
            "properties": {
                "proto": {
                    "type": "object",
                    "$ref": "#/definitions/NetworkProxyProto",
                    "description": "Net Proxy proto"
                },
                "server": {
                    "type": "string",
                    "description": "Net Proxy Server"
                },
                "port": {
                    "type": "number",
                    "format": "int64",
                    "description": "Net Proxy Port"
                }
            },
            "description": "Net Proxy Server",
            "title": "Net Proxy Server"
        },
        "NetWifiConfig": {
            "type": "object",
            "properties": {
                "wifiSSID": {
                    "type": "string"
                },
                "keyScheme": {
                    "$ref": "#/definitions/NetworkWiFiKeyScheme"
                },
                "identity": {
                    "type": "string"
                },
                "secret": {
                    "$ref": "#/definitions/NetWifiConfigSecrets"
                },
                "crypto": {
                    "$ref": "#/definitions/NetWifiConfigNetcryptoblock"
                },
                "priority": {
                    "type": "integer",
                    "format": "int32"
                },
                "encryptedSecrets": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "cryptoKey": {
                    "type": "string"
                }
            }
        },
        "NetWifiConfigNetcryptoblock": {
            "type": "object",
            "properties": {
                "identity": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "NetWifiConfigSecrets": {
            "type": "object",
            "properties": {
                "WiFiPasswd": {
                    "type": "string",
                    "description": "Wifi Password"
                }
            }
        },
        "NetWirelessConfig": {
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/NetworkWirelessType"
                },
                "cellularCfg": {
                    "$ref": "#/definitions/NetCellularConfig"
                },
                "wifiCfg": {
                    "$ref": "#/definitions/NetWifiConfig"
                }
            }
        },
        "NetworkDHCPType": {
            "type": "string",
            "enum": [
                "NETWORK_DHCP_TYPE_UNSPECIFIED",
                "NETWORK_DHCP_TYPE_STATIC",
                "NETWORK_DHCP_TYPE_PASSTHROUGH",
                "NETWORK_DHCP_TYPE_DEPRECATED",
                "NETWORK_DHCP_TYPE_CLIENT",
                "NETWORK_DHCP_TYPE_STATIC_ADAPTER_SPECIFIC"
            ],
            "default": "NETWORK_DHCP_TYPE_UNSPECIFIED",
            "title": "- NETWORK_DHCP_TYPE_STATIC: used for adapter configured DHCP static\n - NETWORK_DHCP_TYPE_PASSTHROUGH: used for adapter configured DHCP none, application will do DHCP\n - NETWORK_DHCP_TYPE_DEPRECATED: used for application simulation\n - NETWORK_DHCP_TYPE_CLIENT: used for adapter configured DHCP client\n - NETWORK_DHCP_TYPE_STATIC_ADAPTER_SPECIFIC: used to configure device adapter specific static networks"
        },
        "NetworkDeviceList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NetworkRelatedDevice"
                    }
                }
            }
        },
        "NetworkInstanceDhcpType": {
            "type": "string",
            "enum": [
                "NETWORK_INSTANCE_DHCP_TYPE_UNSPECIFIED",
                "NETWORK_INSTANCE_DHCP_TYPE_V4",
                "NETWORK_INSTANCE_DHCP_TYPE_V6",
                "NETWORK_INSTANCE_DHCP_TYPE_CRYPTOEID",
                "NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV4",
                "NETWORK_INSTANCE_DHCP_TYPE_CRYPTOV6"
            ],
            "default": "NETWORK_INSTANCE_DHCP_TYPE_UNSPECIFIED",
            "title": "NetworkInstanceDhcpType: Used in the network instance provide\n   dhcp server configuration"
        },
        "NetworkInstanceKind": {
            "type": "string",
            "enum": [
                "NETWORK_INSTANCE_KIND_UNSPECIFIED",
                "NETWORK_INSTANCE_KIND_TRANSPARENT",
                "NETWORK_INSTANCE_KIND_SWITCH",
                "NETWORK_INSTANCE_KIND_LOCAL",
                "NETWORK_INSTANCE_KIND_CLOUD",
                "NETWORK_INSTANCE_KIND_MESH",
                "NETWORK_INSTANCE_KIND_HONEYPOT"
            ],
            "default": "NETWORK_INSTANCE_KIND_UNSPECIFIED"
        },
        "NetworkKind": {
            "type": "string",
            "enum": [
                "NETWORK_KIND_UNSPECIFIED",
                "NETWORK_KIND_V4",
                "NETWORK_KIND_V6",
                "NETWORK_KIND_V4_ONLY",
                "NETWORK_KIND_V6_ONLY",
                "NETWORK_KIND_DUAL_V4_V6"
            ],
            "default": "NETWORK_KIND_UNSPECIFIED",
            "title": "NetworkKind: Used for the network configuration, this is\n only client mode"
        },
        "NetworkProxyProto": {
            "type": "string",
            "enum": [
                "NETWORK_PROXY_PROTO_HTTP",
                "NETWORK_PROXY_PROTO_HTTPS",
                "NETWORK_PROXY_PROTO_SOCKS",
                "NETWORK_PROXY_PROTO_FTP",
                "NETWORK_PROXY_PROTO_OTHER"
            ],
            "default": "NETWORK_PROXY_PROTO_HTTP"
        },
        "NetworkRelatedDevice": {
            "type": "object",
            "properties": {
                "devId": {
                    "type": "string"
                },
                "devName": {
                    "type": "string"
                },
                "adapterName": {
                    "type": "string"
                }
            }
        },
        "NetworkWiFiKeyScheme": {
            "type": "string",
            "enum": [
                "NETWORK_WIFIKEY_SCHEME_UNSPECIFIED",
                "NETWORK_WIFIKEY_SCHEME_WPAPSK",
                "NETWORK_WIFIKEY_SCHEME_WPAEAP"
            ],
            "default": "NETWORK_WIFIKEY_SCHEME_UNSPECIFIED"
        },
        "NetworkWirelessType": {
            "type": "string",
            "enum": [
                "NETWORK_WIRELESS_TYPE_UNSPECIFIED",
                "NETWORK_WIRELESS_TYPE_WIFI",
                "NETWORK_WIRELESS_TYPE_CELLULAR"
            ],
            "default": "NETWORK_WIRELESS_TYPE_UNSPECIFIED"
        },
        "NtpServer": {
            "type": "object",
            "properties": {
                "server": {
                    "type": "string",
                    "description": "NTP Server IP or FQDN"
                }
            },
            "description": "NTP Server",
            "title": "NTP Server"
        },
        "ObjectRevision": {
            "type": "object",
            "properties": {
                "prev": {
                    "type": "string",
                    "description": "Previous"
                },
                "curr": {
                    "type": "string",
                    "description": "Current Database version of the record"
                },
                "createdAt": {
                    "type": "object",
                    "format": "date-time",
                    "description": "The time, in milliseconds since the epoch, when the record was created."
                },
                "createdBy": {
                    "type": "string",
                    "description": "User data: Created By"
                },
                "updatedAt": {
                    "type": "object",
                    "format": "date-time",
                    "description": "The time, in milliseconds since the epoch, when the record was last updated."
                },
                "updatedBy": {
                    "type": "string",
                    "description": "User data: Updated By"
                }
            },
            "description": "ObjectRevision store the user details, who has doent the necessary operation like Create Operation or update operation",
            "title": "ObjectRevision is used to store the user information.",
            "required": [
                "curr",
                "createdAt",
                "createdBy",
                "updatedAt",
                "updatedBy"
            ]
        },
        "ObjectTag": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "object tag key identifier."
                },
                "value": {
                    "type": "string",
                    "description": "value associated for the object tag key"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the tag key"
                }
            },
            "description": "Object tag deaails.",
            "title": "Object Tag details"
        },
        "ObjectTagsList": {
            "type": "object",
            "properties": {
                "objectTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObjectTag"
                    },
                    "description": "Details of Object tags list records."
                },
                "next": {
                    "$ref": "#/definitions/Cursor",
                    "description": "Returned record page."
                }
            },
            "description": "Returned list of Object tags matched by filter criteria",
            "title": "Object tag list records"
        },
        "ObjectType": {
            "type": "string",
            "enum": [
                "OBJECT_TYPE_UNSPECIFIED",
                "OBJECT_TYPE_USER",
                "OBJECT_TYPE_EDGE_NODE",
                "OBJECT_TYPE_EDGE_APP",
                "OBJECT_TYPE_IMAGE",
                "OBJECT_TYPE_EDGE_APP_INSTANCE",
                "OBJECT_TYPE_PROJECT",
                "OBJECT_TYPE_NETWORK",
                "OBJECT_TYPE_DATASTORE",
                "OBJECT_TYPE_SERVICE",
                "OBJECT_TYPE_SERVICE_INSTANCE",
                "OBJECT_TYPE_ENTERPRISE",
                "OBJECT_TYPE_ROLE",
                "OBJECT_TYPE_CREDENTIAL",
                "OBJECT_TYPE_NETWORK_INSTANCE",
                "OBJECT_TYPE_VOLUME_INSTANCE",
                "OBJECT_TYPE_REALM",
                "OBJECT_TYPE_AUTHPROFILE",
                "OBJECT_TYPE_POLICY",
                "OBJECT_TYPE_APP_POLICY",
                "OBJECT_TYPE_CLUSTER_INSTANCE",
                "OBJECT_TYPE_PLUGIN",
                "OBJECT_TYPE_DOC_POLICY",
                "OBJECT_TYPE_ORCHESTRATOR_CLUSTER",
                "OBJECT_TYPE_TAGS",
                "OBJECT_TYPE_EDGE_NODE_INTERFACE",
                "OBJECT_TYPE_DEPLOYMENT",
                "OBJECT_TYPE_ENTITLEMENTS",
                "OBJECT_TYPE_DATA_STREAM",
                "OBJECT_TYPE_API_USAGE",
                "OBJECT_TYPE_APP_INSTANCE_SNAPSHOT",
                "OBJECT_TYPE_PATCH_ENVELOPE",
                "OBJECT_TYPE_RESOURCE_USAGE_TRACK",
                "OBJECT_TYPE_PATCH_ENVELOPE_REFERENCE",
                "OBJECT_TYPE_DEV_PASSTHROUGH",
                "OBJECT_TYPE_EDGE_NODE_CLUSTER",
                "OBJECT_TYPE_ASSET_GROUP",
                "OBJECT_TYPE_APP_PROFILE",
                "OBJECT_TYPE_PROFILE_DEPLOYMENT"
            ],
            "default": "OBJECT_TYPE_UNSPECIFIED"
        },
        "OpaqueConfigType": {
            "type": "string",
            "enum": [
                "OPAQUE_CONFIG_TYPE_UNSPECIFIED",
                "OPAQUE_CONFIG_TYPE_VPN",
                "OPAQUE_CONFIG_TYPE_LISP"
            ],
            "default": "OPAQUE_CONFIG_TYPE_UNSPECIFIED"
        },
        "ProbeConfig": {
            "type": "object",
            "properties": {
                "enableGatewayPing": {
                    "type": "boolean",
                    "description": "Enable gateway ping"
                },
                "pingMaxCost": {
                    "type": "number",
                    "format": "int64",
                    "description": "Ping max cost"
                },
                "preferLowerCost": {
                    "type": "boolean",
                    "description": "Prefer lower cost"
                },
                "preferStrongerWwanSignal": {
                    "type": "boolean",
                    "description": "Prefer stronger WWAN signal"
                },
                "customProbeConfig": {
                    "type": "object",
                    "$ref": "#/definitions/commonConnectivityProbe",
                    "description": "Custom probe configuration"
                }
            },
            "description": "Probing configuration",
            "title": "Probing configuration"
        },
        "RunState": {
            "type": "string",
            "enum": [
                "RUN_STATE_UNSPECIFIED",
                "RUN_STATE_ONLINE",
                "RUN_STATE_HALTED",
                "RUN_STATE_INIT",
                "RUN_STATE_REBOOTING",
                "RUN_STATE_OFFLINE",
                "RUN_STATE_UNKNOWN",
                "RUN_STATE_UNPROVISIONED",
                "RUN_STATE_PROVISIONED",
                "RUN_STATE_SUSPECT",
                "RUN_STATE_DOWNLOADING",
                "RUN_STATE_RESTARTING",
                "RUN_STATE_PURGING",
                "RUN_STATE_HALTING",
                "RUN_STATE_ERROR",
                "RUN_STATE_VERIFYING",
                "RUN_STATE_LOADING",
                "RUN_STATE_CREATING_VOLUME",
                "RUN_STATE_BOOTING",
                "RUN_STATE_MAINTENANCE_MODE",
                "RUN_STATE_START_DELAYED",
                "RUN_STATE_BASEOS_UPDATING",
                "RUN_STATE_PREPARING_POWEROFF",
                "RUN_STATE_POWERING_OFF",
                "RUN_STATE_PREPARED_POWEROFF"
            ],
            "default": "RUN_STATE_UNSPECIFIED",
            "description": "- RUN_STATE_ONLINE: Entity Online\n - RUN_STATE_HALTED: Entity Halted\n - RUN_STATE_INIT: Entity Initializing\n - RUN_STATE_REBOOTING: Entity Rebooting\n - RUN_STATE_OFFLINE: Entity Offline\n - RUN_STATE_UNKNOWN: Entity state Unknown\n - RUN_STATE_UNPROVISIONED: Entity Unprovisioned\n - RUN_STATE_PROVISIONED: Entity Provisioned\n - RUN_STATE_SUSPECT: Entity Suspect\n - RUN_STATE_DOWNLOADING: Edge-node downloading entity artifacts\n - RUN_STATE_RESTARTING: Entity Restarting\n - RUN_STATE_PURGING: Entity Purging\n - RUN_STATE_HALTING: Entity Halting\n - RUN_STATE_ERROR: Entity encountered an error\n - RUN_STATE_VERIFYING: Verification of downloaded Artifacts in Progress.\n - RUN_STATE_LOADING: Loading of Artifacts into local datastore in Progress.\n - RUN_STATE_CREATING_VOLUME: Volume creation from artifacts in Progress\n - RUN_STATE_BOOTING: Entity booting up\n - RUN_STATE_MAINTENANCE_MODE: Entity maintenance mode\n - RUN_STATE_START_DELAYED: Application start delayed as per configuration\n - RUN_STATE_BASEOS_UPDATING: Device BaseOs Update in Progress\n - RUN_STATE_PREPARING_POWEROFF: device preparing power off - shutting down all app instances\n - RUN_STATE_POWERING_OFF: device powering off from local profile server\n - RUN_STATE_PREPARED_POWEROFF: device prepared power off - all app instances are shut down",
            "title": "RunState - On update, please update RunState_HttpRequest as well"
        },
        "RunStateConfig_HttpRequestRunState_HttpRequest": {
            "type": "string",
            "enum": [
                "UNSPECIFIED",
                "ONLINE",
                "HALTED",
                "INIT",
                "REBOOTING",
                "OFFLINE",
                "UNKNOWN",
                "UNPROVISIONED",
                "PROVISIONED",
                "SUSPECT",
                "DOWNLOADING",
                "RESTARTING",
                "PURGING",
                "HALTING",
                "ERROR",
                "VERIFYING",
                "LOADING",
                "CREATING_VOLUME",
                "BOOTING",
                "MAINTENANCE_MODE",
                "START_DELAYED",
                "BASEOS_UPDATING",
                "PREPARING_POWEROFF",
                "POWERING_OFF",
                "PREPARED_POWEROFF"
            ],
            "default": "UNSPECIFIED",
            "title": "RunState_HttpRequest - Only for swagger documentation"
        },
        "ServicePoint": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "object",
                    "$ref": "#/definitions/spType",
                    "description": "Service Point Type"
                },
                "NameOrIp": {
                    "type": "string",
                    "description": "Service name/ service name"
                },
                "Credential": {
                    "type": "string",
                    "description": "Service credentials"
                }
            },
            "description": "Service Point",
            "title": "Service Point"
        },
        "Severity": {
            "type": "string",
            "enum": [
                "SEVERITY_UNSPECIFIED",
                "SEVERITY_NOTICE",
                "SEVERITY_WARNING",
                "SEVERITY_ERROR"
            ],
            "default": "SEVERITY_UNSPECIFIED",
            "title": "Severity tells the severity type"
        },
        "SimcardState": {
            "type": "string",
            "enum": [
                "SIMCARD_STATE_INVALID",
                "SIMCARD_STATE_ASSIGNED",
                "SIMCARD_STATE_PROVISIONED",
                "SIMCARD_STATE_ACTIVE",
                "SIMCARD_STATE_SUSPENDED",
                "SIMCARD_STATE_CANCELLED"
            ],
            "default": "SIMCARD_STATE_INVALID"
        },
        "StaticDNSList": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string",
                    "description": "Host name"
                },
                "addrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Addresses"
                }
            },
            "description": "Static DNS list",
            "title": "Static DNS list"
        },
        "StaticIPRoute": {
            "type": "object",
            "properties": {
                "prefix": {
                    "type": "string",
                    "description": "IP Prefix"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway IP"
                },
                "outputPort": {
                    "type": "string",
                    "description": "Output Port"
                },
                "probeConfig": {
                    "type": "object",
                    "$ref": "#/definitions/ProbeConfig",
                    "description": "Probe Configuration"
                }
            },
            "description": "Static IP Routes",
            "title": "Static IP Routes"
        },
        "Summary": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Summary description"
                },
                "total": {
                    "type": "number",
                    "format": "int64",
                    "description": "Total"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "description": "Values: Map for storing <string, uint32>"
                }
            },
            "description": "Summary is used to store the Summary details",
            "title": "Summary is used to store the Summary details"
        },
        "VifInfo": {
            "type": "object",
            "properties": {
                "vifName": {
                    "type": "string"
                },
                "macAddress": {
                    "type": "string"
                },
                "appName": {
                    "type": "string"
                }
            }
        },
        "ZcOpsStatus": {
            "type": "string",
            "enum": [
                "OPS_STATUS_UNSPECIFIED",
                "OPS_STATUS_PENDING",
                "OPS_STATUS_ONGOING",
                "OPS_STATUS_COMPLETE"
            ],
            "default": "OPS_STATUS_UNSPECIFIED",
            "description": "- OPS_STATUS_PENDING: In rare cases, system may not start operation when it was requested. Client will be notified that operation is PENDING\n - OPS_STATUS_ONGOING: system will start the operation, but at the time response was generated, operation is still ONGOING.\n - OPS_STATUS_COMPLETE: Even if the result of the operations may result in failure, but the OpsStatus will marked COMPLETE for almost all cases.",
            "title": "ZedCloud internal operation status"
        },
        "ZcOpsType": {
            "type": "string",
            "enum": [
                "OPS_TYPE_UNSPECIFIED",
                "OPS_TYPE_READ",
                "OPS_TYPE_DELETE",
                "OPS_TYPE_CREATE",
                "OPS_TYPE_UPDATE",
                "OPS_TYPE_LIST"
            ],
            "default": "OPS_TYPE_UNSPECIFIED",
            "title": "ZedCloud internal operation type"
        },
        "ZsrvError": {
            "type": "object",
            "properties": {
                "ec": {
                    "$ref": "#/definitions/ZsrvErrorCode",
                    "title": "Enumrated error code, describes more granular numerical\nvalue than just httpStatus"
                },
                "location": {
                    "type": "string",
                    "title": "Ignore: Internal field only"
                },
                "details": {
                    "type": "string",
                    "title": "Field captures string description of details"
                }
            }
        },
        "ZsrvErrorCode": {
            "type": "string",
            "enum": [
                "zMsgErrorNone",
                "zMsgSucess",
                "NotFound",
                "AlreadyExists",
                "VersionMismatch",
                "RangeError",
                "LargeResult",
                "IncompleteData",
                "InvalidData",
                "FunctionUnsupported",
                "NoMemory",
                "SendFailure",
                "Timeout",
                "BadReqBody",
                "BadReqParam",
                "InvalidFieldFormat",
                "UrlNotFound",
                "ApiVersionNotSupported",
                "Unauthorized",
                "Forbidden",
                "Conflict",
                "NotModified",
                "DependencyConflict",
                "JsonFmtError",
                "ProtoFmtError",
                "CertError",
                "DataBaseConnection",
                "DBError",
                "zMsgAccepted",
                "zMsgCreated",
                "PreConditionFailed",
                "InternalServerError"
            ],
            "default": "zMsgErrorNone",
            "description": "- zMsgErrorNone: common validation errors\n - IncompleteData: message had fields that weren't filled in\n - InvalidData: message contained the field that wasn't expected\n - FunctionUnsupported: this feature unavailable on this version of device\n - InvalidFieldFormat: message contained the field that wasn't correctly formatted\n - JsonFmtError: Marshal / Unmarshal errors\n - DataBaseConnection: generic DB error",
            "title": "ZedCould internal error code"
        },
        "ZsrvResponse": {
            "type": "object",
            "properties": {
                "operationType": {
                    "$ref": "#/definitions/ZcOpsType",
                    "title": "Describes one of the operations type : possible values\n                        Read/Delete/Create/Update/List"
                },
                "operationStatus": {
                    "$ref": "#/definitions/ZcOpsStatus",
                    "title": "if this is log running job"
                },
                "objectKind": {
                    "type": "string",
                    "title": "zedcloud object kind on which the operation was performed"
                },
                "objectId": {
                    "type": "string",
                    "title": "Unique value identifies the object that was operated on"
                },
                "objectName": {
                    "type": "string",
                    "title": "name of the object"
                },
                "objectRevision": {
                    "type": "string",
                    "title": "object revision post the operation, note Read operation\ndoesn't change the revision"
                },
                "objectType": {
                    "$ref": "#/definitions/ObjectType"
                },
                "operationTime": {
                    "type": "string",
                    "title": "time of operation"
                },
                "startTime": {
                    "type": "string",
                    "title": "total time taken by operations"
                },
                "endTime": {
                    "type": "string"
                },
                "user": {
                    "type": "string",
                    "title": "the operation is performed on behalf of this user"
                },
                "httpStatusCode": {
                    "type": "integer",
                    "format": "int32",
                    "title": "http response"
                },
                "httpStatusMsg": {
                    "type": "string",
                    "title": "summary of the error in text format"
                },
                "jobId": {
                    "type": "string",
                    "title": "for tracking asynchronous tasks"
                },
                "error": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ZsrvError"
                    },
                    "title": "one or more errors will be set if the operation failed\ni.e. httpStatusCode != 2xx"
                }
            }
        },
        "commonCellularIPType": {
            "type": "string",
            "enum": [
                "CELLULAR_IP_TYPE_UNSPECIFIED",
                "CELLULAR_IP_TYPE_IPV4",
                "CELLULAR_IP_TYPE_IPV4_AND_IPV6",
                "CELLULAR_IP_TYPE_IPV6"
            ],
            "default": "CELLULAR_IP_TYPE_UNSPECIFIED",
            "description": "The IP addressing type to use for a given attach or default bearer.\n\n - CELLULAR_IP_TYPE_UNSPECIFIED: IP type is not specified.\nWhen unspecified, EVE will not enforce an IP type in the bearer configuration.\nThe modem will instead use its built-in profiles (see CellularProfile) to determine\nthe appropriate IP type for the network.\n - CELLULAR_IP_TYPE_IPV4: IPv4 only.\n - CELLULAR_IP_TYPE_IPV4_AND_IPV6: IPv4 and IPv6.\n - CELLULAR_IP_TYPE_IPV6: IPv6 only."
        },
        "commonCipherBlock": {
            "type": "object",
            "properties": {
                "cipherContextId": {
                    "type": "string",
                    "title": "cipher context id"
                },
                "initialValue": {
                    "type": "string",
                    "format": "byte",
                    "title": "Initial Value for Symmetric Key derivation"
                },
                "cipherData": {
                    "type": "string",
                    "format": "byte",
                    "title": "encrypted sensitive data"
                },
                "clearTextSha256": {
                    "type": "string",
                    "format": "byte",
                    "title": "sha256 of the plaintext sensitive data"
                }
            },
            "title": "Encrypted sensitive data information"
        },
        "commonConnectivityProbe": {
            "type": "object",
            "properties": {
                "probeMethod": {
                    "$ref": "#/definitions/commonConnectivityProbeMethod",
                    "description": "Method to use to determine the connectivity status."
                },
                "probeEndpoint": {
                    "$ref": "#/definitions/commonProbeEndpoint",
                    "description": "Endpoint to probe using the selected probing mechanism to determine\nthe connectivity status."
                }
            },
            "description": "Configuration for user-defined connectivity-testing probe."
        },
        "commonConnectivityProbeMethod": {
            "type": "string",
            "enum": [
                "CONNECTIVITY_PROBE_METHOD_UNSPECIFIED",
                "CONNECTIVITY_PROBE_METHOD_ICMP",
                "CONNECTIVITY_PROBE_METHOD_TCP"
            ],
            "default": "CONNECTIVITY_PROBE_METHOD_UNSPECIFIED",
            "description": "User-defined method to use to determine the connectivity status.\n\n - CONNECTIVITY_PROBE_METHOD_UNSPECIFIED: Connectivity probing method is not specified and therefore will not be used.\n - CONNECTIVITY_PROBE_METHOD_ICMP: Use ICMP ping against the probed endpoint to determine the connectivity status.\n - CONNECTIVITY_PROBE_METHOD_TCP: Try to establish TCP connection with the probed endpoint to determine the connectivity\nstatus."
        },
        "commonProbeEndpoint": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "IP address or FQDN."
                },
                "port": {
                    "type": "integer",
                    "format": "int64",
                    "description": "TCP port required for CONNECTIVITY_PROBE_METHOD_TCP.\nLeave empty for CONNECTIVITY_PROBE_METHOD_ICMP."
                }
            },
            "description": "Address of a remote endpoint to probe in order to determine connectivity status."
        },
        "configCellularConnectivityProbe": {
            "type": "object",
            "properties": {
                "disable": {
                    "type": "boolean",
                    "description": "If true, then probing is disabled."
                },
                "probeAddress": {
                    "type": "string",
                    "description": "IP/FQDN to periodically probe using 3 pings per iteration to determine connectivity status.\nThis field is now deprecated and replaced with custom_probe (see below).\nTo maintain backward-compatibility, EVE will check both probe_address and custom_probe\nand will use whichever has non-zero value (if any), but preferring custom_probe."
                },
                "customProbe": {
                    "$ref": "#/definitions/commonConnectivityProbe",
                    "description": "User-defined probe for cellular connectivity testing.\nOnly IP address is allowed as ConnectivityProbe.probe_address (and port if needed),\nnot hostname.\nThe probing algorithm is more complex that just testing reachability of a remote\nendpoint and the goal is to minimize generated traffic, probing time and false negatives\n(that would trigger undesired re-connect).\nEVE will periodically check the modem status, accessibility of DNS server(s) and potentially\nalso proxies in the local network, and only as the last resort (if connectivity state\nis still unclear) it will probe the remote endpoint. If custom_probe is not defined,\nEVE will try to ping \"8.8.8.8\" (Google public DNS).\nIt is recommended to use custom probe for private LTE networks where public DNS servers\nmight not be allowed by the firewall (and hence ping would fail even with a working\nconnectivity)."
                }
            },
            "description": "CellularConnectivityProbe is used to periodically check the connectivity status of a cellular network\nby probing a remote endpoint.\nWhenever the probe fails, the cellular connection is automatically restarted. If the probe keeps failing\neven after the restart, the failure is reported in ZCellularStatus.probeError.\nThe connectivity probing interval is 5 minutes and currently it is not configurable."
        },
        "dhcpIpRange": {
            "type": "object",
            "properties": {
                "start": {
                    "type": "string",
                    "description": "starting IP"
                },
                "end": {
                    "type": "string",
                    "description": "ending IP"
                }
            },
            "description": "DHCP IP range",
            "title": "DHCP IP range"
        },
        "evecommonCellularAuthProtocol": {
            "type": "string",
            "enum": [
                "CELLULAR_AUTH_PROTOCOL_NONE",
                "CELLULAR_AUTH_PROTOCOL_PAP",
                "CELLULAR_AUTH_PROTOCOL_CHAP",
                "CELLULAR_AUTH_PROTOCOL_PAP_AND_CHAP"
            ],
            "default": "CELLULAR_AUTH_PROTOCOL_NONE",
            "description": "CellularAuthProtocol defines the authentication protocol used for cellular connection.\n\n - CELLULAR_AUTH_PROTOCOL_NONE: No authentication.\n - CELLULAR_AUTH_PROTOCOL_PAP: Password Authentication Protocol.\n - CELLULAR_AUTH_PROTOCOL_CHAP: Challenge-Handshake Authentication Protocol.\n - CELLULAR_AUTH_PROTOCOL_PAP_AND_CHAP: Both PAP and CHAP."
        },
        "evecommonRadioAccessTechnology": {
            "type": "string",
            "enum": [
                "RADIO_ACCESS_TECHNOLOGY_UNSPECIFIED",
                "RADIO_ACCESS_TECHNOLOGY_GSM",
                "RADIO_ACCESS_TECHNOLOGY_UMTS",
                "RADIO_ACCESS_TECHNOLOGY_LTE",
                "RADIO_ACCESS_TECHNOLOGY_5GNR"
            ],
            "default": "RADIO_ACCESS_TECHNOLOGY_UNSPECIFIED",
            "description": " - RADIO_ACCESS_TECHNOLOGY_GSM: Global System for Mobile Communications (2G).\n - RADIO_ACCESS_TECHNOLOGY_UMTS: Universal Mobile Telecommunications System (3G).\n - RADIO_ACCESS_TECHNOLOGY_LTE: Long Term Evolution (4G).\n - RADIO_ACCESS_TECHNOLOGY_5GNR: 5G New Radio."
        },
        "eveinfoIPRoute": {
            "type": "object",
            "properties": {
                "destinationNetwork": {
                    "type": "string",
                    "title": "Destination network address in the CIDR format: <IP-address>/<prefix-length>"
                },
                "gateway": {
                    "type": "string",
                    "description": "Gateway IP address.\nEmpty for connected route."
                },
                "port": {
                    "type": "string",
                    "description": "Logical label of the output device port for the routed traffic.\nEmpty if the gateway is IP address of one of the applications. In that case,\n'gateway_app' is defined instead."
                },
                "gatewayApp": {
                    "type": "string",
                    "description": "UUID of the application used as the gateway for the route.\nEmpty if the gateway is external (not one of the apps but outside of the device)\nor this is a connected route for a port (thus gateway is empty).\nIn that case, 'port' is defined instead."
                }
            },
            "description": "Information about an IP route configured for a network instance.\nThe next-hop for the IP route is specified by the \"gateway\" IP address\n(empty for a connected route) and the output \"port\". However, if the gateway\nis one of the applications running on the device, the port is actually a virtual\ninterface with an EVE-generated interface name and no user-assigned logical label.\nTherefore, in such cases, it is more useful to leave \"port\" empty and instead use\nthe \"gateway_app\" field to publish the UUID of the application used as the gateway."
        },
        "googlerpcStatus": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                }
            }
        },
        "protobufAny": {
            "type": "object",
            "properties": {
                "typeUrl": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "spType": {
            "type": "string",
            "enum": [
                "SPTYPE_INVALIDSRV",
                "SPTYPE_MAPSERVER",
                "SPTYPE_SUPPORTSERVER"
            ],
            "default": "SPTYPE_INVALIDSRV",
            "description": "clone of types defined in API repo.\n\n - SPTYPE_MAPSERVER: mapping service for zededa overlay service\n - SPTYPE_SUPPORTSERVER: if device has support feature enabled, this ia cloud service\nwhich device can be reached."
        }
    },
    "securityDefinitions": {
        "BearerToken": {
            "type": "apiKey",
            "description": "Bearer token for user session",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerToken": []
        }
    ],
    "externalDocs": {
        "description": "ZEDEDA Product Documentation",
        "url": "https://docs.zededa.com/-M-8m8d8KqdLpfOgY_jo/edge-network"
    }
}