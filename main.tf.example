// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0
//

terraform {
  required_providers {
    zedcloud = {
      source = "zededa/zedcloud"
      //version = "0.0.7-alpha"
    }
  }
}

resource "zedcloud_enterprise" "test_tf_provider" {
  name = "test_tf_provider"
  title = "test_tf_provider"
}

resource "zedcloud_role" "test_tf_provider" {
  name = "test_tf_provider"
  title = "test_tf_provider"
  type = "USER_ROLE_USER_DEFINED"
  state = "ROLE_STATE_ACTIVE"
  scopes {
    enterprise_filter = []
    project_filter = []
  }
}

resource "zedcloud_auth_profile" "test_tf_provider" {
  depends_on = [zedcloud_role.test_tf_provider]
  name = "test_tf_provider"
  title = "test_tf_provider"
  default_role_id = zedcloud_role.test_tf_provider.id
  oauth_profile {
    o_id_c_end_point = "https://example.com/api/v1/oauth2/token"
    client_id = "client_id"
    client_secret = "client_secret"
  }
}

resource "zedcloud_project" "test_tf_provider" {
  # required
  name = "test_tf_provider"
  title = "title"

  # optional
  type = "TAG_TYPE_PROJECT"
  attestation_policy {
    # required
    title = "title"
    type = "POLICY_TYPE_ATTESTATION"

    attestation_policy {
      # required
      type = "ATTEST_POLICY_TYPE_ACCEPT"
    }
  }

  edgeview_policy {
    edgeview_policy {
      # required
      edgeview_allow = false
      # optional
      access_allow_change = true
      edgeviewcfg {

        dev_policy {
          allow_dev = true
        }
        ext_policy {
          allow_ext = false
        }
        generation_id = 0
        jwt_info {
          allow_sec = 18000
          disp_url = "zedcloud.local.zededa.net/api/v1/edge-view"
          encrypt = false
          num_inst = 1
        }
      }
      max_expire_sec = 2592000
      max_inst = 3
    }
    type = "POLICY_TYPE_EDGEVIEW"
  }
}

data "zedcloud_project" "test_tf_provider" {
  name = "test_tf_provider"
  type = zedcloud_project.test_tf_provider.type
  title = zedcloud_project.test_tf_provider.title
  depends_on = [
    zedcloud_project.test_tf_provider
  ]
}

resource "zedcloud_brand" "test_tf_provider" {
  name = "test_tf_provider"
  title = "test_tf_provider"
  description = "description"
  origin_type = "ORIGIN_LOCAL"
}

resource "zedcloud_model" "test_tf_provider" {
  brand_id = zedcloud_brand.test_tf_provider.id
  name = "test_tf_provider"
  title = "test_tf_provider"
  type = "AMD64"
  origin_type = "ORIGIN_LOCAL"
  state = "SYS_MODEL_STATE_ACTIVE"
  attr = {
    memory = "8G"
    storage = "100G"
    Cpus = "4"
  }
  io_member_list {
    ztype = "IO_TYPE_ETH"
    phylabel =  "firstEth"
    usage = "ADAPTER_USAGE_MANAGEMENT"
    assigngrp = "eth0"
    phyaddrs = {
      Ifname = "eth0"
      PciLong = "0000:02:00.0"
    }
    logicallabel = "ethernet0"
    usage_policy = {
      FreeUplink = true
    }
    cost = 0
  }
  io_member_list {
    ztype = "IO_TYPE_ETH"
    phylabel = "secondEth"
    assigngrp = "eth1"
    phyaddrs = {
      Ifname = "eth1"
      PciLong = "0000:03:00.0"
    }
    logicallabel = "ethernet1"
    usage_policy = {
      FreeUplink = true
    }
    cost = 0
  }
  io_member_list {
    ztype = "IO_TYPE_USB"
    phylabel = "USB-C"
    assigngrp = "USB-C"
    phyaddrs = {
      PciLong = "0000:05:00.0"
    }
    logicallabel = "USB6"
    cost = 0
  }
  depends_on = [
    zedcloud_brand.test_tf_provider
  ]
}

resource "zedcloud_edgenode" "test_tf_provider" {
  onboarding_key = "" # placeholder
  serialno = "2293dbe8-29ce-420c-8264-962857efc46b"
  # required
  name = "test_tf_provider"
  model_id = zedcloud_model.test_tf_provider.id
  project_id = data.zedcloud_project.test_tf_provider.id
  title = "test_tf_provider-create_edgenode-title"
  interfaces {
    cost = 255
    intf_usage = "ADAPTER_USAGE_MANAGEMENT"
    intfname = "defaultIPv4"
    ipaddr = "127.0.0.1"
    macaddr = "00:00:00:00:00:00"
    tags = {
      "system_interface_1_key" = "system_interface_1_value"
      "system_interface_2_key" = "system_interface_2_value"
    }
  }
  interfaces {
    intfname = "eth0"
    intf_usage = "ADAPTER_USAGE_UNSPECIFIED"
  }
  admin_state = "ADMIN_STATE_ACTIVE"
  asset_id = "asset_id"
  config_item {
    bool_value = true
    float_value = 1.0
    key = "key"
    string_value = "string"
    uint32_value = 32
    uint64_value = 64
    value_type = "value type"
  }
  # cpu = 2
  deployment_tag = "depl_tag"
  # deprecated = false
  description = "description"
  dev_location {
    city = "berlin"
    country = "germany"
    freeloc = "freeloc"
    hostname = "hostname"
    loc = "52.520008, 13.404954"
    org = "zededa"
    postal = "10115"
    region = "europe/west"
    underlay_ip = ""
  }
  generate_soft_serial = false
  tags = {
    "tag-key-1" = "tag-value-1"
  }
  token = "token"
  depends_on = [
    zedcloud_model.test_tf_provider,
    data.zedcloud_project.test_tf_provider
  ]
}

resource "zedcloud_application" "test_tf_provider" {
  name = "test_tf_provider"
  title = "ubuntu-all-ip"
  description = "ubuntu-all-ip"
  user_defined_version = "1.1"
  origin_type = "ORIGIN_LOCAL"
  manifest {
    # computed
    ac_kind = "VMManifest"

    # optional
    name = "xenial-amd64-docker-20180725"
    ac_version = "1.2.0"
    app_type = "APP_TYPE_VM"
    configuration {
      custom_config {
        add = false
        allow_storage_resize = false
        field_delimiter = ","
        name = "custom_config_name"
        override = false
        template = "dGVzdA=="
        variable_groups {
          condition {
            # optional
            name = "condition"
            operator = "CONDITION_OPERATOR_EQUALTO"
            value = "val"
          }
          name = "var_group"
          required = false
        }
      }
    }
    cpu_pinning_enabled = false
    deployment_type = "DEPLOYMENT_TYPE_K3S"
    desc {
      category = "APP_CATEGORY_OTHERS"
      os = "Zenix"
      app_category = "APP_CATEGORY_OTHERS"
      support = "support"
    }
    description = "description"
    display_name = "display_name"
    enablevnc = false
    interfaces {
      name = "indirect"
      directattach = false
      privateip = false
      acls {
        matches {
          type = "protocol"
          value = "tcp"
        }
        matches {
          type = "lport"
          value = "8022"
        }
        actions {
          portmap = true
          portmapto {
            app_port = 22
          }
        }
      }
      acls {
        matches {
          type = "host"
          value = ""
        }
      }
    }
    owner {
      company = "Zededa Inc."
      email = "test@zededa.com"
      group = "testgroup"
      user = "testuser"
      website = "http://www.zededa.com"
    }
    resources {
      name = "cpus"
      value = "2"
    }
    resources {
      name = "memory"
      value = "1024000"
    }
    vmmode = "HV_HVM"
  }
}

data "zedcloud_application" "test_tf_provider" {
  name = "test_tf_provider"
  title = zedcloud_application.test_tf_provider.title
  # manifest.ac_kind = zedcloud_application.test_tf_provider.manifest.ac_kind
  depends_on = [
    zedcloud_application.test_tf_provider
  ]
}

resource "zedcloud_volume_instance"  "test_tf_provider" {
  device_id = zedcloud_edgenode.test_tf_provider.id
  name = "test_tf_provider"
  title = "test_title"
  description = "test_description"
  type = "VOLUME_INSTANCE_TYPE_BLOCKSTORAGE"

  multiattach = true
  cleartext = true
  accessmode = "VOLUME_INSTANCE_ACCESS_MODE_READWRITE"
  size_bytes = "1024"
  implicit = false
  label = "label"
  tags = {
    "tag-key-1" = "tag-value-1"
    "tag-key-2" = "tag-value-2"
  }
#   The following section is commented because it requires some real devices to run on.
#   edge_node_cluster {
#     id = "<edge_node_cluster_id>"
#   }
}

data "zedcloud_volume_instance" "test_tf_provider" {
  name = "test_tf_provider"
  type = zedcloud_volume_instance.test_tf_provider.type
  device_id = zedcloud_volume_instance.test_tf_provider.device_id
  title = zedcloud_volume_instance.test_tf_provider.title
  depends_on = [
    zedcloud_volume_instance.test_tf_provider
  ]
}

resource "zedcloud_network_instance" "test_tf_provider" {
  depends_on = [
    zedcloud_edgenode.test_tf_provider,
  ]
  # required
  device_id = zedcloud_edgenode.test_tf_provider.id
  name = "test_tf_provider"
  title = "title"
  kind = "NETWORK_INSTANCE_KIND_LOCAL"
  port = "eth1"

  # optional
  description = "zedcloud_network_instance-complete-description"
  type = "NETWORK_INSTANCE_DHCP_TYPE_V4"
  device_default = false
  dhcp = false
  dns_list {
    addrs = [
      "10.1.2.2",
      "10.1.2.1"
    ]
    hostname = "wwww.ns2.example.com"
  }
  dns_list {
    addrs = [
      "10.1.1.1",
      "10.1.1.2"
    ]
    hostname = "wwww.ns1.example.com"
  }
  opaque {
    oconfig = "Test OConfig"
    type = "OPAQUE_CONFIG_TYPE_UNSPECIFIED"
  }
  mtu = 1500
  tags = {
    "ni-tag1" = "ni-tag-value-1"
    "ni-tag2" = "ni-tag-value-2"
  }
#   The following section is commented because it requires some real devices to run on.
#   edge_node_cluster {
#     id = "<edge_node_cluster_id>"
#   }
}

data "zedcloud_network_instance" "test_tf_provider" {
  name = "test_tf_provider"
  kind = zedcloud_network_instance.test_tf_provider.kind
  device_id = zedcloud_network_instance.test_tf_provider.device_id
  title = zedcloud_network_instance.test_tf_provider.title
  depends_on = [
    zedcloud_network_instance.test_tf_provider
  ]
}

resource "zedcloud_application_instance"  "test_tf_provider" {
  name = "test_tf_provider"
  title = "tf test"
  description = "tf test"
  activate = "true"
  app_id = zedcloud_application.test_tf_provider.id
  device_id = zedcloud_edgenode.test_tf_provider.id
  interfaces {
    directattach = false
    privateip = false
    netinstname = zedcloud_network_instance.test_tf_provider.name
    intfname = "indirect"
    acls {
      actions {
        drop       = false
        limit      = false
        limitburst = 0
        limitrate  = 0
        portmap    = true

        mapparams {
          port = 22
        }
      }

      matches {
        type  = "protocol"
        value = "tcp"
      }
      matches {
        type  = "lport"
        value = "8022"
      }
    }
    acls {
      matches {
        type = "host"
      }
    }
  }

  # optional
  remote_console = false
  is_secret_updated = false
  collect_stats_ip_addr = "true"
  app_policy_id = ""
  app_type = "APP_TYPE_VM"
  cluster_id = ""
  custom_config {
    add = false
    allow_storage_resize = false
    override = false

  }
  logs {
    access = false
  }
  manifest_info {

    transition_action = "INSTANCE_TA_NONE"
  }
  start_delay_in_seconds = 120
  user_data = ""
  vminfo {
    # required
    cpus = 2
    mode = "HV_HVM"
    vnc = false

  }

  tags = {
    "tag-key-1" = "tag-value-1"
  }

#   The following section is commented because it requires some real devices to run on.
#   edge_node_cluster {
#     id = "<edge_node_cluster_id>"
#   }
}



# The below are the configurations for the edge-node clustering deployment.
# The configurations are commented as they require some real devices to run on.

# resource "zedcloud_edgenode" "test_tf_provider_cluster_node_1" {
#   # required
#   name = "test_tf_provider_cluster_node_1"
#   model_id = zedcloud_model.test_tf_provider.id
#   project_id = data.zedcloud_project.test_tf_provider.id
#   title = "test_tf_provider-create_edgenode-title"
#
#   admin_state = "ADMIN_STATE_REGISTERED"
#   description = "description"
#   generate_soft_serial = true
#   depends_on = [
#     zedcloud_model.test_tf_provider,
#     data.zedcloud_project.test_tf_provider
#   ]
# }
#
# resource "zedcloud_edgenode" "test_tf_provider_cluster_node_2" {
#   # required
#   name = "test_tf_provider_cluster_node_2"
#   model_id = zedcloud_model.test_tf_provider.id
#   project_id = data.zedcloud_project.test_tf_provider.id
#   title = "test_tf_provider-create_edgenode-title"
#
#   admin_state = "ADMIN_STATE_REGISTERED"
#   description = "description"
#   generate_soft_serial = true
#   depends_on = [
#     zedcloud_model.test_tf_provider,
#     data.zedcloud_project.test_tf_provider
#   ]
# }
#
# resource "zedcloud_edgenode" "test_tf_provider_cluster_node_3" {
#   # required
#   name = "test_tf_provider_cluster_node_3"
#   model_id = zedcloud_model.test_tf_provider.id
#   project_id = data.zedcloud_project.test_tf_provider.id
#   title = "test_tf_provider-create_edgenode-title"
#
#   admin_state = "ADMIN_STATE_REGISTERED"
#   description = "description"
#   generate_soft_serial = true
#   depends_on = [
#     zedcloud_model.test_tf_provider,
#     data.zedcloud_project.test_tf_provider
#   ]
# }
#
# resource "zedcloud_edgenode_cluster" "test_tf_provider" {
#   project_id = data.zedcloud_project.test_tf_provider.id
#   name = "test_tf_provider_cluster"
#   title = "test_tf_provider_cluster"
#   description = "description"
#   nodes {
#     id = zedcloud_edgenode.test_tf_provider_cluster_node_1.id
#     cluster_interface = "ethernet0"
#     node_type = "EDGE_NODE_CLUSTER_NODE_TYPE_SERVER"
#   }
#   nodes {
#     id = zedcloud_edgenode.test_tf_provider_cluster_node_2.id
#     cluster_interface = "ethernet0"
#     node_type = "EDGE_NODE_CLUSTER_NODE_TYPE_SERVER"
#   }
#   nodes {
#     id = zedcloud_edgenode.test_tf_provider_cluster_node_3.id
#     cluster_interface = "ethernet0"
#     node_type = "EDGE_NODE_CLUSTER_NODE_TYPE_SERVER"
#   }
#   depends_on = [
#     zedcloud_edgenode.test_tf_provider_cluster_node_1,
#     zedcloud_edgenode.test_tf_provider_cluster_node_2,
#     zedcloud_edgenode.test_tf_provider_cluster_node_3
#   ]
# }


# Below are the configurations for the deployment resource.

resource "zedcloud_project" "test_deployment_project" {
  # required
  name  = "test_tf_project-deployment"
  title = "test_tf_project-deployment"
  type = "TAG_TYPE_DEPLOYMENT"
  tag_level_settings {
    flow_log_transmission = "NETWORK_INSTANCE_FLOW_LOG_TRANSMISSION_DISABLED"
    interface_ordering    = "INTERFACE_ORDERING_DISABLED"
  }
}

resource "zedcloud_datastore" "test_datastore" {
  depends_on = [
    zedcloud_project.test_deployment_project
  ]
  # required
  ds_fqdn             = "docker://docker.io"
  ds_path             = ""
  ds_type             = "DATASTORE_TYPE_CONTAINERREGISTRY"
  name                = "test_tf_provider-dockerhub"
  title               = "test_tf_provider-dockerhub"
  description         = "test_tf_provider-dockerhub"
  region              = "eu"
  project_access_list = [zedcloud_project.test_deployment_project.id]
}

resource "zedcloud_image" "test_image" {
  depends_on = [
    zedcloud_project.test_deployment_project,
    zedcloud_datastore.test_datastore
  ]
  name                = "test_tf_provider-alpine"
  datastore_id        = zedcloud_datastore.test_datastore.id
  image_arch          = "ARM64"
  image_format        = "CONTAINER"
  image_rel_url       = "alpine:latest"
  image_size_bytes    = 1024
  image_type          = "IMAGE_TYPE_APPLICATION"
  title               = "alpine"
  project_access_list = [zedcloud_project.test_deployment_project.id]
}


resource "zedcloud_application" "alpine_vm_app" {
  name                 = "test_tf_provider-alpine_vm_app"
  title                = "test_tf_provider-alpine_vm_app"
  user_defined_version = "24.0.4"
  depends_on           = [zedcloud_image.test_image]
  project_access_list  = [zedcloud_project.test_deployment_project.id]
  manifest {
    ac_kind             = "VMManifest"
    ac_version          = "1.2.0"
    name                = "alpine_24"
    vmmode              = "HV_HVM"
    enablevnc           = true
    app_type            = "APP_TYPE_VM"
    deployment_type     = "DEPLOYMENT_TYPE_STAND_ALONE"
    cpu_pinning_enabled = false
    resources {
      name  = "cpus"
      value = 2
    }
    resources {
      name  = "memory"
      value = 8000000
    }
  }
}

resource "zedcloud_deployment" "tf_deployment" {
  depends_on = [
    zedcloud_application.alpine_vm_app,
    zedcloud_brand.test_tf_provider,
    zedcloud_project.test_deployment_project
  ]

  name           = "test_tf_provider-deployment"
  title          = "test_tf_provider-deployment"
  deployment_tag = "depl:1234"

  project_id = zedcloud_project.test_deployment_project.id

  device_policies {
    meta_data {
      name  = "test_tf_provider-edge-node-policy-attestation"
      title = "test_tf_provider-edge-node-policy"
      policy_target_condition = {
        "depl" : "1234"
      }
      tags = {
        "depl" : "1234"
      }
    }
    policy_sub_type = "DEVICE_POLICY_TYPE_ATTESTATION"
    attestation_policy {
      type = "DEVICE_ATTEST_POLICY_TYPE_ACCEPT"
    }
  }

  network_inst_policies {
    meta_data {
      name  = "test_tf_provider-network-instance-policy"
      title = "test_tf_provider-network-instance-policy"
      policy_target_condition = {
        "depl" : "1234"
      }
    }
    net_inst_config {
      port = "uplink"
      kind = "NETWORK_INSTANCE_KIND_LOCAL"
      type = "NETWORK_INSTANCE_DHCP_TYPE_V4"
    }
  }

  app_inst_policies {
    meta_data {
      name  = "test_tf_provider-app-instance-policy"
      title = "test_tf_provider-app-instance-policy"
      policy_target_condition = {
        "depl" : "1234"
      }
      tags = {
        "depl" : "1234"
      }
    }
    app_inst_config {
      naming_scheme          = "APP_NAMING_SCHEMEV2_PROJECT_APP_DEVICE"
      name_project_part      = "depl-project"
      start_delay_in_seconds = 0
      name_app_part          = "test_tf_provider"
      bundle_id              = zedcloud_application.alpine_vm_app.id
      origin_type            = "ORIGIN_LOCAL"
      interfaces {
        intforder    = 1
        intfname     = "indirect"
        directattach = false
        netinstname  = ""
        privateip    = false
      }
      tags = {
        "depl" : "1234"
      }
      manifest_json {
        name            = "tf-app-instance"
        ac_kind         = "VMManifest"
        ac_version      = "1.2.0"
        deployment_type = "DEPLOYMENT_TYPE_STAND_ALONE"
        app_type        = "APP_TYPE_VM"
        owner {
          user    = "testuser"
          group   = "testgroup"
          company = "Zededa Inc."
          website = "https://www.zededa.com"
          email   = "test@zededa.com"
        }
        description         = "test app instance"
        cpu_pinning_enabled = false
        images {
          imagename   = zedcloud_image.test_image.name
          imageid     = zedcloud_image.test_image.id
          maxsize = "0"
          imageformat = "CONTAINER"
          preserve    = false
          readonly    = false
          ignorepurge = false
          cleartext   = false
        }
        desc {
          category     = "APP_CATEGORY_CLOUD_APPLICATION"
          app_category = "APP_CATEGORY_UNSPECIFIED"
          support      = "support"
        }
        vmmode    = "HV_HVM"
        enablevnc = false
        resources {
          name  = "resourceType"
          value = "Custom"
        }
        resources {
          name  = "cpus"
          value = "2"
        }
        resources {
          name  = "memory"
          value = "1024000.00"
        }
        configuration {
          custom_config {
            name                 = "custom_config_name"
            add                  = false
            override             = false
            allow_storage_resize = false
            field_delimiter      = ""
            template             = ""
          }
        }
      }
    }
  }

  volume_inst_policies {
    meta_data {
      name  = "test_tf_provider-volume-instance-policy"
      title = "test_tf_provider-volume-instance-policy"
      policy_target_condition = {
        "depl" : "1234"
      }
      tags = {
        "depl" : "1234"
      }
    }
    vol_inst_config {
      type       = "VOLUME_INSTANCE_TYPE_BLOCKSTORAGE"
      accessmode = "VOLUME_INSTANCE_ACCESS_MODE_READWRITE"
      size_bytes = "1048576"
      cleartext  = true
    }
  }

  edgeview_policy {
    meta_data {
      name  = "test_tf_provider-edgeview-policy"
      title = "test_tf_provider-edgeview-policy"
      policy_target_condition = {
        "depl" : "1234"
      }
    }
    edgeviewcfg {
      jwt_info {
        disp_url  = "zedcloud.local.zededa.net/api/v1/edge-view"
        allow_sec = 18000
        num_inst  = 1
        encrypt   = false
      }
      dev_policy {
        allow_dev = true
      }
      app_policy {
        allow_app = true
      }

      ext_policy {
        allow_ext = false
      }
    }
    access_allow_change = true
    max_expire_sec      = 2592000
    max_inst            = 3
    edgeview_allow      = true
  }
}

# DOCKER COMPOSE EXAMPLES

resource "zedcloud_edgenode" "test_tf_runtime_node" {
  onboarding_key = "" # placeholder
  serialno = "2293dbe8-29ce-420c-8264-962857efc46c"
  # required
  name = "test_tf_runtime_node"
  model_id = zedcloud_model.test_tf_provider.id
  project_id = data.zedcloud_project.test_tf_provider.id
  title = "test_tf_provider-create_edgenode-title"
  interfaces {
    cost = 255
    intf_usage = "ADAPTER_USAGE_MANAGEMENT"
    intfname = "defaultIPv4"
    ipaddr = "127.0.0.1"
    macaddr = "00:00:00:00:00:00"
    tags = {
      "system_interface_1_key" = "system_interface_1_value"
      "system_interface_2_key" = "system_interface_2_value"
    }
  }
  interfaces {
    intfname = "eth0"
    intf_usage = "ADAPTER_USAGE_UNSPECIFIED"
  }
  admin_state = "ADMIN_STATE_ACTIVE"
  asset_id = "asset_id"
  config_item {
    bool_value = true
    float_value = 1.0
    key = "key"
    string_value = "string"
    uint32_value = 32
    uint64_value = 64
    value_type = "value type"
  }
  # cpu = 2
  deployment_tag = "depl_tag"
  # deprecated = false
  description = "description"
  dev_location {
    city = "berlin"
    country = "germany"
    freeloc = "freeloc"
    hostname = "hostname"
    loc = "52.520008, 13.404954"
    org = "zededa"
    postal = "10115"
    region = "europe/west"
    underlay_ip = ""
  }
  generate_soft_serial = false
  tags = {
    "tag-key-1" = "tag-value-1"
  }
  token = "token_runtime"
}

resource "zedcloud_datastore" "test_datastore_runtime" {
  ds_fqdn             = "ftp:://fake-datastore.com"
  ds_path             = ""
  ds_type             = "DATASTORE_TYPE_SFTP"
  name                = "test_tf_provider-ftp-runtime"
  title               = "test_tf_provider-ftp-runtime"
  description         = "test_tf_provider-ftp-runtime"
  region              = "eu"
}

resource "zedcloud_datastore" "test_datastore_compose" {
  ds_fqdn             = "docker://gcr.io"
  ds_path             = ""
  ds_type             = "DATASTORE_TYPE_CONTAINERREGISTRY"
  name                = "test_tf_provider-docker-compose"
  title               = "test_tf_provider-docker-compose"
  description         = "test_tf_provider-docker-compose"
  secret {
    api_key = "test_api_key"
    api_passwd = "test_api_passwd"
  }
}

resource "zedcloud_image" "test_runtime_image" {
  name                = "test_tf_provider-runtime-image"
  datastore_id        = zedcloud_datastore.test_datastore_runtime.id
  image_arch          = "AMD64"
  image_format        = "QCOW2"
  image_type          = "IMAGE_TYPE_DOCKER_RUNTIME"
  image_rel_url       = "test_tf_provider-runtime-image"
  image_size_bytes    = 0
  title               = "tes_tf_runtime"
}

resource "zedcloud_image" "test_compose_image" {
  name                = "test_tf_provider-compose-image"
  datastore_id        = zedcloud_datastore.test_datastore_runtime.id
#   image_arch          = "ARM64"
  image_format        = "RAW"
  image_type          = "IMAGE_TYPE_DOCKER_COMPOSE_TAR"
  image_rel_url       = "test_tf_provider-compose-image"
  image_size_bytes    = 0
  title               = "tes_tf_compose"
}

resource "zedcloud_application" "test_tf_app_runtime" {
  name                 = "test_tf_app_runtime"
  title                = "runtime_app_bundle"
  description          = "runtime app bundle"
  user_defined_version = "1.1"
  origin_type          = "ORIGIN_LOCAL"
  manifest {
    ac_kind = "VMManifest"
    ac_version = "1.2.0"
    app_type = "APP_TYPE_VM"
    deployment_type = "DEPLOYMENT_TYPE_DOCKER_RUNTIME"
    name = "docker_runtime_app_bundle"
    owner {
      user = "Test User"
      email = "test@zededa.com"
      website = "www.zededa.com"
    }
    images {
      imagename = zedcloud_image.test_runtime_image.name
      cleartext = false
      ignorepurge = false
      imageformat = zedcloud_image.test_runtime_image.image_format
    }
    interfaces {
      name = "eth0"
      directattach = false
      acls  {
        matches {
          type = "ip"
          value = "0.0.0.0/0"
        }
      }
    }
    interfaces {
      name = "eth1"
      directattach = false
      acls {
        matches {
          type = "ip"
          value = "0.0.0.0/0"
        }
      }
    }
    desc {
      category = "APP_CATEGORY_OTHERS"
      app_category = "APP_CATEGORY_OTHERS"
      # logo": null,
    }
    vmmode = "HV_PV"
    resources {
      name = "resourceType"
      value = "Tiny"
    }
    resources {
      name = "cpus"
      value = "1"
    }
    resources {
      name = "memory"
      value = "524288.00"
    }
    configuration {
      custom_config {
        add = false
      }
    }
    runtime_version = "RuntimeVersion_V1"
    runtime_protocol_version = "RuntimeProtocolVersion_V1"
    persistent_runtime_size_bytes = 5368709120
  }
}

resource "zedcloud_application" "test_tf_app_compose" {
  name                 = "test_tf_app_compose"
  title                = "compose_app_bundle"
  description          = "compose app bundle"
  user_defined_version = "1.1"
  origin_type          = "ORIGIN_LOCAL"
  datastore_id_list = [
    zedcloud_datastore.test_datastore_compose.id
  ]
  manifest {
    ac_kind         = "ComposeManifest"
    ac_version      = "1.2.0"
    app_type        = "APP_TYPE_DOCKER_COMPOSE"
    deployment_type = "DEPLOYMENT_TYPE_STAND_ALONE"
    name            = "docker_compose_app_bundle"
    owner {
      user    = "Test User"
      email   = "test@zededa.com"
      website = "www.zededa.com"
    }
    desc {
      app_category = "APP_CATEGORY_INDUSTRIAL"
      category = "APP_CATEGORY_INDUSTRIAL"
      logo = {
        "logo": "301dd8fd-1228-11eb-89dd-028e313eda78_logo"
      }
      license_list = {
        "APACHE_LICENSE_V2": "https://choosealicense.com/licenses/apache-2.0/"
      }
    }
    docker_compose_yaml_text = "IyBCYXNlIGltYWdlCkZST00gYWxwaW5lOmxhdGVzdAoKIyBEZWZpbmUgYnVpbGQgYXJndW1lbnRzIGZvciBhdXRoZW50aWNhdGlvbgpBUkcgUkVHSVNUUllfVVNFUgpBUkcgUkVHSVNUUllfUEFTUwoKIyBMb2cgaW4gdG8gdGhlIHByaXZhdGUgcmVnaXN0cnkKUlVOIGVjaG8gIiRSRUdJU1RSWV9QQVNTIiB8IGRvY2tlciBsb2dpbiBteS1wcml2YXRlLXJlZ2lzdHJ5LmNvbSAtdSAiJFJFR0lTVFJZX1VTRVIiIC0tcGFzc3dvcmQtc3RkaW4KCiMgUHVsbCB0aGUgcHJpdmF0ZSBpbWFnZQpSVU4gZG9ja2VyIHB1bGwgbXktcHJpdmF0ZS1yZWdpc3RyeS5jb20vbXktcHJpdmF0ZS1pbWFnZTpsYXRlc3QKCiMgU2V0IHdvcmtpbmcgZGlyZWN0b3J5CldPUktESVIgL2FwcAoKIyBDb3B5IG5lY2Vzc2FyeSBmaWxlcwpDT1BZIC4gLgoKIyBSdW4gdGhlIGFwcGxpY2F0aW9uCkNNRCBbIi4vbWFpbiJd"
  }
}

resource "zedcloud_network_instance" "test_tf_netinst_runtime_1" {
  device_id = zedcloud_edgenode.test_tf_runtime_node.id
  name = "test_tf_netinst_runtime_1"
  title = "title"
  kind = "NETWORK_INSTANCE_KIND_SWITCH"
  port = "eth0"

  # optional
  description = "switch_network_inst_eth0"
  type = "NETWORK_INSTANCE_DHCP_TYPE_V4"
  device_default = false
  dhcp = false
  dns_list {
    addrs = [
      "10.1.2.2",
      "10.1.2.1"
    ]
    hostname = "wwww.ns2.example.com"
  }
  dns_list {
    addrs = [
      "10.1.1.1",
      "10.1.1.2"
    ]
    hostname = "wwww.ns1.example.com"
  }
  opaque {
    oconfig = "Test OConfig"
    type = "OPAQUE_CONFIG_TYPE_UNSPECIFIED"
  }
  mtu = 1500
}

resource "zedcloud_network_instance" "test_tf_netinst_runtime_2" {
  device_id = zedcloud_edgenode.test_tf_runtime_node.id
  name = "test_tf_netinst_runtime_2"
  title = "title"
  kind = "NETWORK_INSTANCE_KIND_LOCAL"

  # optional
  description = "local_airgapped_network_inst"
  type = "NETWORK_INSTANCE_DHCP_TYPE_V4"
  device_default = false
  dhcp = false
  dns_list {
    addrs = [
      "10.1.2.2",
      "10.1.2.1"
    ]
    hostname = "wwww.ns2.example.com"
  }
  dns_list {
    addrs = [
      "10.1.1.1",
      "10.1.1.2"
    ]
    hostname = "wwww.ns1.example.com"
  }
  opaque {
    oconfig = "Test OConfig"
    type = "OPAQUE_CONFIG_TYPE_UNSPECIFIED"
  }
  mtu = 1500
}

resource "zedcloud_application_instance"  "test_tf_appinst_runtime" {
  name        = "test_tf_appinst_runtime"
  title       = "tf test"
  description = "tf test"
  app_id      = zedcloud_application.test_tf_app_runtime.id
  device_id   = zedcloud_edgenode.test_tf_runtime_node.id
  app_type    = "APP_TYPE_VM"
  collect_stats_ip_addr = "10.1.255.254"
  interfaces {
    netinstname  = zedcloud_network_instance.test_tf_netinst_runtime_1.name
    intfname     = "eth0"
    intforder = 1
    privateip = false
  }
  interfaces {
    netinstname  = zedcloud_network_instance.test_tf_netinst_runtime_2.name
    intfname     = "eth1"
    intforder = 1
    privateip = false
  }
  logs {
    access = true
  }
  manifest_info {
    transition_action = "INSTANCE_TA_NONE"
  }
  vminfo {
    cpus = 1
    mode = "HV_PV"
    vnc = false
  }
  tags = {
    "tag-key-1" = "tag-value-1"
  }
}

resource "zedcloud_application_instance"  "test_tf_appinst_compose" {
  depends_on = [
      zedcloud_application_instance.test_tf_appinst_runtime,
  ]
  name        = "test_tf_appinst_compose"
  title       = "tf test"
  description = "tf test"
  app_id      = zedcloud_application.test_tf_app_compose.id
  device_id   = zedcloud_edgenode.test_tf_runtime_node.id
  app_type    = "APP_TYPE_DOCKER_COMPOSE"
  logs {
    access = true
  }
  manifest_info {
    transition_action = "INSTANCE_TA_NONE"
  }
  vminfo {
    cpus = 0
    mode = "HV_PV"
    vnc = false
  }
  tags = {
    "tag-key-1" = "tag-value-1"
  }
}