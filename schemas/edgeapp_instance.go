// Copyright (c) 2018-2021 Zededa, Inc.
// SPDX-License-Identifier: Apache-2.0

package schemas

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

var appInstDriveResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"cleartext": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "If set, don't encrypt the drive. Store in cleartext",
		},
		"drvtype": {
			Type:     schema.TypeString,
			Optional: true,
			Description: "Type of Drive. Valid Values: UNSPECIFIED, CDROM, HDD, NET, HDD_EMPTY. " +
				"HDD_EMPTY is to allocate the empty disk of maxsizebytes specified",
		},
		"ignorepurge": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "Don't purge this drive as part of purge command for mutable volumes",
		},
		"imagename": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Name of Image Object used for the drive.",
		},
		"imvolname": {
			Type:     schema.TypeString,
			Computed: true,
			Description: "Immutable Volume for this drive. Only one of imvolname " +
				"and mvolname must be specified.",
		},
		"maxsize": {
			Type:        schema.TypeInt,
			Optional:    true,
			Description: "Drive maximum size",
		},
		"mountpath": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Mount Path for the drive in the App Instance",
		},
		"mvolname": {
			Type:     schema.TypeString,
			Computed: true,
			Description: "Mutable Volume for this drive. Only one of imvolname " +
				"and mvolname must be specified.",
		},
		"preserve": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "Preserve the drive even when all app instances using it are deleted",
		},
		"readonly": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "ReadOnly Flag. If set, drive is mounted as readonly by app instance.",
		},
		"target": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Target drive",
		},
		"volumelabel": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "User defined volume to use for this drive",
		},
	},
}

var appInstanceLogsResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"access": {
			Type:     schema.TypeBool,
			Optional: true,
			Description: "Flag to enable (true) / disable (false) sending of logs " +
				"generated by app instance to ZEDCloud.",
		},
	},
}

var appInstVMResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"cpus": {
			Type:        schema.TypeInt,
			Optional:    true,
			Description: "Number of cpus assigned to app instance",
		},
		"memory": {
			Type:        schema.TypeInt,
			Optional:    true,
			Description: "Memory assigned to app instance",
		},
		"mode": {
			Type:     schema.TypeString,
			Optional: true,
			Description: "Mode of VM. Applicable to App Instance of type VM. Valid Values: " +
				"HV_PV, HV_HVM, HV_FML, HV_NOHYPER, HV_LEGACY",
		},
		"vnc": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "Enable VNC connections to the App Instance",
		},
		"vnc_display": {
			Type:        schema.TypeInt,
			Optional:    true,
			Description: "VNC number to be assigned for the App Instance",
		},
	},
}

var appACEMatchResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"type": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Type of Match",
		},
		"value": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Value of Match",
		},
	},
}

var appMapParamsResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"port": {
			Type:        schema.TypeInt,
			Optional:    true,
			Description: "Application port",
		},
	},
}

var appACEActionResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"drop": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "ACE drop flag",
		},
		"limit": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "ACE limit flag",
		},
		"limitburst": {
			Type:        schema.TypeInt,
			Optional:    true,
			Description: "ACE limit burst",
		},
		"limitrate": {
			Type:        schema.TypeInt,
			Optional:    true,
			Description: "ACE limit rate",
		},
		"limitunit": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "ACE limit unit",
		},
		"mapparams": {
			Type:        schema.TypeList,
			Optional:    true,
			Elem:        appMapParamsResourceSchema,
			MaxItems:    1,
			Description: "Application map params",
		},
		"portmap": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "Application port map flag",
		},
	},
}

var appInstACEResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"action": {
			Type:        schema.TypeList,
			Optional:    true,
			Elem:        appACEActionResourceSchema,
			Description: "Access Control Entry (ACE) actions",
		},
		"id": {
			Type:        schema.TypeInt,
			Optional:    true,
			Description: "ACE id",
		},
		"match": {
			Type:        schema.TypeList,
			Optional:    true,
			Elem:        appACEMatchResourceSchema,
			Description: "ACE Match",
		},
		"name": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "User defined name of ACE",
		},
	},
}

var phyAdapterResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"name": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Physical Adapter name",
		},
		"tags": tagsSchema,
		"type": {
			Type:     schema.TypeString,
			Optional: true,
			Description: "IoType specifies the type of the Input output of the " +
				"Edge Node / App Instance. Valid Values: " +
				"IO_TYPE_UNSPECIFIED, IO_TYPE_ETH, IO_TYPE_USB, IO_TYPE_COM, IO_TYPE_AUDIO, " +
				"IO_TYPE_WLAN, IO_TYPE_WWAN, IO_TYPE_HDMI, IO_TYPE_LTE, IO_TYPE_OTHER",
		},
	},
}

var appInterfaceResourceSchema = &schema.Resource{
	Schema: map[string]*schema.Schema{
		"access_vlan_id": {
			Type:     schema.TypeInt,
			Optional: true,
			Description: "Access port vlan id. app interface with access vlan id " +
				"zero will be treated as trunk port. valid vlan id range: 2 - 4093",
		},
		"acl": {
			Type:        schema.TypeList,
			Computed:    true,
			Description: "App Access Control Lists on the Interface",
			Elem:        appInstACEResourceSchema,
		},
		"default_net_instance": {
			Type:        schema.TypeBool,
			Optional:    true,
			Description: "Use the project default Network Instance for this interface.",
		},
		"directattach": {
			Type:     schema.TypeBool,
			Computed: true,
			Description: "Comes from manifest during app create. If true, Assign " +
				"the interface to the App Instance.",
		},
		"intfname": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Name of the Interface as specified in the Edge App",
		},
		"io": {
			Type:     schema.TypeList,
			Optional: true,
			Description: "Physical Adapter to be matched for interface assignment." +
				" Applicable only when \"directattach\" flag is true",
			Elem:     phyAdapterResourceSchema,
			MaxItems: 1,
		},
		"ipaddr": {
			Type:     schema.TypeString,
			Optional: true,
			Description: "Static IP Address (/32) to be assigned to the Interface. " +
				"Applicable only if network instance is configured as static DHCP",
		},
		"macaddr": {
			Type:     schema.TypeString,
			Optional: true,
			Description: "In case of p2v we might want to provide a mac-address. " +
				"Applicable only in case of DHCP=passthrough",
		},
		"netinstname": {
			Type:     schema.TypeString,
			Optional: true,
			Description: "Network Instance name attached to the interface. " +
				"Applicable only when \"directattach\" flag is false",
		},
		"netinsttag": {
			Type:     schema.TypeMap,
			Optional: true,
			Elem: &schema.Schema{
				Type: schema.TypeString,
			},
			Description: "Tags for Network Instance",
		},
	},
}

var AppInstSchema = map[string]*schema.Schema{
	// Keep the following common fields at the top of schema definitions for all
	//  objects.
	"name":        nameSchema,
	"id":          idSchema,
	"description": descriptionSchema,
	"title":       titleSchema,

	// Rest of the fields must be in the alphabetical order of keys
	"activate": {
		Type:     schema.TypeBool,
		Optional: true,
		Description: "Mandatory Parameter. Used to activate (set to true) / " +
			"deactivate ( set to false ) an Edge Application Instance",
	},
	"app_id": {
		Type:        schema.TypeString,
		Optional:    true,
		Description: "ID of the Edge APP to be used.",
	},
	"app_policy_id": {
		Type:        schema.TypeString,
		Optional:    true,
		Description: "ID of the associated App Policy Object",
	},
	"app_type": {
		Type:     schema.TypeString,
		Optional: true,
		Description: "Type of Edge App - VM / Container etc. The following are valid values: " +
			"APP_TYPE_UNSPECIFIED, APP_TYPE_VM, APP_TYPE_VM_RUNTIME, APP_TYPE_CONTAINER, " +
			"APP_TYPE_MODULE",
	},
	"bundleversion": {
		Type:        schema.TypeString,
		Computed:    true,
		Description: "Version of Edge App the instance is referring to",
	},
	"cluster_id": {
		Type:        schema.TypeString,
		Computed:    true,
		Description: "ID of the Cluster",
	},
	"collect_stats_ip_addr": {
		Type:        schema.TypeString,
		Optional:    true,
		Description: "IP Address of the Stats Collector module.",
	},
	/// Fix this similar to how we did Wifi
	"crypto_key": {
		Type:     schema.TypeString,
		Optional: true,
		Description: "SENSITIVE. Crypto Key for decrypting user secret information. " +
			"This field will not be published by terraform import command.",
	},
	"custom_config": {
		Type:        schema.TypeList,
		Optional:    true,
		Elem:        customConfigResourceSchema,
		MaxItems:    1,
		Description: "Application initialization script template in cloud-config format and user specified values",
	},
	"deployment_type": {
		Type:     schema.TypeString,
		Optional: true,
		Description: "Type of deployment for the app, eg: azure, k3s, standalone. " +
			"This comes from the App Manifest.",
	},
	"device_id": {
		Type:        schema.TypeString,
		Optional:    true,
		Description: "Edge Node id where the App Instance is deployed.",
	},
	"drive": {
		Type:        schema.TypeList,
		Optional:    true,
		Elem:        appInstDriveResourceSchema,
		Description: "List of Drive configurations",
	},
	"encrypted_secrets": {
		Type:     schema.TypeMap,
		Optional: true,
		Elem: &schema.Schema{
			Type: schema.TypeString,
		},
		Description: "SENSITIVE. Map of encrypted secrets" +
			"This field will not be published by terraform import command.",
	},
	"interface": {
		Type:        schema.TypeList,
		Optional:    true,
		Elem:        appInterfaceResourceSchema,
		Description: "Interface Configuration for the App Instance",
	},
	"is_secret_updated": {
		Type:     schema.TypeBool,
		Computed: true,
		Description: "This field tells whether user secrets has updated or not, especially " +
			"the custom config",
	},
	"logs": {
		Type:        schema.TypeList,
		Optional:    true,
		Elem:        appInstanceLogsResourceSchema,
		MaxItems:    1,
		Description: "App Instance Logs related Configuration.",
	},
	"project_id": projectIdComputedSchema,
	"purge": {
		Type:        schema.TypeList,
		Computed:    true,
		Description: "Purge counter: ZedCloudOpsCmd",
		Elem:        zedcloudOpsCmdSchema,
	},
	"refresh": {
		Type:        schema.TypeList,
		Computed:    true,
		Description: "Refresh counter: ZedCloudOpsCmd",
		Elem:        zedcloudOpsCmdSchema,
	},
	"remote_console": {
		Type:        schema.TypeBool,
		Optional:    true,
		Description: "Enable ( true ) / Disable (false ) Remote Console for the Edge App Instance",
	},
	"restart": {
		Type:        schema.TypeList,
		Computed:    true,
		Elem:        zedcloudOpsCmdSchema,
		Description: "Restart counter: ZedCloudOpsCmd",
	},
	"revision": revisionSchema,
	"tags":     tagsSchema,
	"user_defined_version": {
		Type:        schema.TypeString,
		Computed:    true,
		Description: "Edge app UserDefinedVersion this instance is running with",
	},
	"vminfo": {
		Type:        schema.TypeList,
		Computed:    true,
		Description: "Virtual machine info",
		Elem:        appInstVMResourceSchema,
	},
}
