// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DevicePolicy device policy
//
// swagger:model DevicePolicy
type DevicePolicy struct {

	// device attestation policy
	AttestationPolicy *DeviceAttestationPolicy `json:"attestationPolicy,omitempty"`

	// all the required metadata for a policy like id, name, different types of tags
	MetaData *PolicyCommon `json:"metaData,omitempty"`

	// device policy type
	PolicySubType *DevicePolicyType `json:"policySubType,omitempty"`
}

// Validate validates this device policy
func (m *DevicePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicySubType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicePolicy) validateAttestationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AttestationPolicy) { // not required
		return nil
	}

	if m.AttestationPolicy != nil {
		if err := m.AttestationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attestationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attestationPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DevicePolicy) validateMetaData(formats strfmt.Registry) error {
	if swag.IsZero(m.MetaData) { // not required
		return nil
	}

	if m.MetaData != nil {
		if err := m.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

func (m *DevicePolicy) validatePolicySubType(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicySubType) { // not required
		return nil
	}

	if m.PolicySubType != nil {
		if err := m.PolicySubType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policySubType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policySubType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device policy based on the context it is used
func (m *DevicePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttestationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetaData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicySubType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevicePolicy) contextValidateAttestationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.AttestationPolicy != nil {
		if err := m.AttestationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attestationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attestationPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DevicePolicy) contextValidateMetaData(ctx context.Context, formats strfmt.Registry) error {

	if m.MetaData != nil {
		if err := m.MetaData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

func (m *DevicePolicy) contextValidatePolicySubType(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicySubType != nil {
		if err := m.PolicySubType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policySubType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policySubType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevicePolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevicePolicy) UnmarshalBinary(b []byte) error {
	var res DevicePolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
