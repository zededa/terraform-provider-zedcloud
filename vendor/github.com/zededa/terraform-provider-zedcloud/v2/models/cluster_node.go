// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterNode Cluster node detail
//
// # Cluster node detail
//
// swagger:model ClusterNode
type ClusterNode struct {

	// User defined name of the cluster interface, unique across the enterprise. Once cluster interface is created, name canâ€™t be changed
	// Required: true
	ClusterInterface *string `json:"clusterInterface"`

	// A cluster prefix
	ClusterPrefix string `json:"clusterPrefix,omitempty"`

	// System defined universally unique Id of the node
	// Required: true
	// Read Only: true
	// Pattern: [0-9A-Za-z-]+
	ID string `json:"id"`

	// Type of node
	NodeType *ClusterNodeType `json:"nodeType,omitempty"`

	// Resource labels are name/value pairs that enable you to categorize resources. Label names are case insensitive with max_length 512 and min_length 3. Label values are case sensitive with max_length 256 and min_length 3.
	ResourceLabels map[string]string `json:"resourceLabels,omitempty"`
}

// Validate validates this edge node cluster node
func (m *ClusterNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNode) validateClusterInterface(formats strfmt.Registry) error {

	if err := validate.Required("clusterInterface", "body", m.ClusterInterface); err != nil {
		return err
	}

	return nil
}

func (m *ClusterNode) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", m.ID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterNode) validateNodeType(formats strfmt.Registry) error {
	if swag.IsZero(m.NodeType) { // not required
		return nil
	}

	if m.NodeType != nil {
		if err := m.NodeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this edge node cluster node based on the context it is used
func (m *ClusterNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNode) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ClusterNode) contextValidateNodeType(ctx context.Context, formats strfmt.Registry) error {

	if m.NodeType != nil {

		if swag.IsZero(m.NodeType) { // not required
			return nil
		}

		if err := m.NodeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nodeType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNode) UnmarshalBinary(b []byte) error {
	var res ClusterNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
