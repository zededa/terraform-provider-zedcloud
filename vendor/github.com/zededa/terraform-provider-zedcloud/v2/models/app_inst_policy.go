// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppInstPolicy app inst policy
//
// swagger:model AppInstPolicy
type AppInstPolicy struct {

	// app instance config for automated deployment
	AppInstConfig *AppInstConfig `json:"appInstConfig,omitempty"`

	// all the required metadata for a policy like id, name, different types of tags
	MetaData *PolicyCommon `json:"metaData,omitempty"`
}

// Validate validates this app inst policy
func (m *AppInstPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppInstConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstPolicy) validateAppInstConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AppInstConfig) { // not required
		return nil
	}

	if m.AppInstConfig != nil {
		if err := m.AppInstConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appInstConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appInstConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstPolicy) validateMetaData(formats strfmt.Registry) error {
	if swag.IsZero(m.MetaData) { // not required
		return nil
	}

	if m.MetaData != nil {
		if err := m.MetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app inst policy based on the context it is used
func (m *AppInstPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppInstConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetaData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstPolicy) contextValidateAppInstConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AppInstConfig != nil {
		if err := m.AppInstConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appInstConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appInstConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstPolicy) contextValidateMetaData(ctx context.Context, formats strfmt.Registry) error {

	if m.MetaData != nil {
		if err := m.MetaData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstPolicy) UnmarshalBinary(b []byte) error {
	var res AppInstPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
