// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppInterface App Interface detail
//
// # App Interface detail
//
// swagger:model appInterface
type AppInterface struct {

	// access port VLAN ID, vlan id of zero will be treated as trunk port and vlan id 1 is implicitly used by linux bridges
	// Maximum: 4093
	// Minimum: 2
	AccessVlanID int64 `json:"accessVlanId,omitempty"`

	// app Acls
	// Required: true
	Acls []*AppACE `json:"acls"`

	// default instance flag
	DefaultNetInstance bool `json:"defaultNetInstance,omitempty"`

	// comes from manifest during app create
	//
	// direct attach flag
	// Required: true
	Directattach *bool `json:"directattach"`

	// FIXME: Check why is this required
	//
	// EID register details
	// Required: true
	Eidregister *EIDRegister `json:"eidregister"`

	// intf Name
	// Required: true
	Intfname *string `json:"intfname"`

	// intforder
	// Required: true
	Intforder *int64 `json:"intforder"`

	// Physical Adapter to be matched for interface assignment. Applicable only when "direct attach" flag is true
	// Required: true
	Io *PhyAdapter `json:"io"`

	// if netname points static DHCP then we need to take
	// static /32 address here
	//
	// IP address
	// Required: true
	Ipaddr *string `json:"ipaddr"`

	// in case of p2v we might want to provide a mac-address.
	// applicable only in case of DHCP=passthrough
	//
	// MAC address
	// Required: true
	Macaddr *string `json:"macaddr"`

	// Network Instance id to be matched for interface assignment.
	Netinstid string `json:"netinstid,omitempty"`

	// Network Instance name to be matched for interface assignment. Applicable only when "direct attach" flag is false
	// Required: true
	Netinstname *string `json:"netinstname"`

	// Network Instance tag to be matched for interface assignment. Applicable only when "direct attach" flag is false
	Netinsttag map[string]string `json:"netinsttag,omitempty"`

	// network name: will be deprecated in future, use netinstname
	Netname string `json:"netname,omitempty"`

	// Private IP flag
	// Required: true
	Privateip *bool `json:"privateip"`
}

// Validate validates this app interface
func (m *AppInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessVlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectattach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEidregister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntfname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntforder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpaddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMacaddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetinstname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateip(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInterface) validateAccessVlanID(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessVlanID) { // not required
		return nil
	}

	if err := validate.MinimumInt("accessVlanId", "body", m.AccessVlanID, 2, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("accessVlanId", "body", m.AccessVlanID, 4093, false); err != nil {
		return err
	}

	return nil
}

func (m *AppInterface) validateAcls(formats strfmt.Registry) error {

	if err := validate.Required("acls", "body", m.Acls); err != nil {
		return err
	}

	for i := 0; i < len(m.Acls); i++ {
		if swag.IsZero(m.Acls[i]) { // not required
			continue
		}

		if m.Acls[i] != nil {
			if err := m.Acls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInterface) validateDirectattach(formats strfmt.Registry) error {

	if err := validate.Required("directattach", "body", m.Directattach); err != nil {
		return err
	}

	return nil
}

func (m *AppInterface) validateEidregister(formats strfmt.Registry) error {

	if err := validate.Required("eidregister", "body", m.Eidregister); err != nil {
		return err
	}

	if m.Eidregister != nil {
		if err := m.Eidregister.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eidregister")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eidregister")
			}
			return err
		}
	}

	return nil
}

func (m *AppInterface) validateIntfname(formats strfmt.Registry) error {

	if err := validate.Required("intfname", "body", m.Intfname); err != nil {
		return err
	}

	return nil
}

func (m *AppInterface) validateIntforder(formats strfmt.Registry) error {

	if err := validate.Required("intforder", "body", m.Intforder); err != nil {
		return err
	}

	return nil
}

func (m *AppInterface) validateIo(formats strfmt.Registry) error {

	if err := validate.Required("io", "body", m.Io); err != nil {
		return err
	}

	if m.Io != nil {
		if err := m.Io.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io")
			}
			return err
		}
	}

	return nil
}

func (m *AppInterface) validateIpaddr(formats strfmt.Registry) error {

	if err := validate.Required("ipaddr", "body", m.Ipaddr); err != nil {
		return err
	}

	return nil
}

func (m *AppInterface) validateMacaddr(formats strfmt.Registry) error {

	if err := validate.Required("macaddr", "body", m.Macaddr); err != nil {
		return err
	}

	return nil
}

func (m *AppInterface) validateNetinstname(formats strfmt.Registry) error {

	if err := validate.Required("netinstname", "body", m.Netinstname); err != nil {
		return err
	}

	return nil
}

func (m *AppInterface) validatePrivateip(formats strfmt.Registry) error {

	if err := validate.Required("privateip", "body", m.Privateip); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this app interface based on the context it is used
func (m *AppInterface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEidregister(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInterface) contextValidateAcls(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Acls); i++ {

		if m.Acls[i] != nil {
			if err := m.Acls[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acls" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInterface) contextValidateEidregister(ctx context.Context, formats strfmt.Registry) error {

	if m.Eidregister != nil {
		if err := m.Eidregister.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eidregister")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eidregister")
			}
			return err
		}
	}

	return nil
}

func (m *AppInterface) contextValidateIo(ctx context.Context, formats strfmt.Registry) error {

	if m.Io != nil {
		if err := m.Io.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("io")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("io")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInterface) UnmarshalBinary(b []byte) error {
	var res AppInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
