// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BinaryArtifact binary artifact
//
// swagger:model BinaryArtifact
type BinaryArtifact struct {

	// optional - any arbitrary metadata about/for artifact encoded to base64 string
	ArtifactMetaData string `json:"artifactMetaData,omitempty"`

	// base64 artifact
	Base64Artifact *InlineOpaqueBase64Data `json:"base64Artifact,omitempty"`

	// binary artifact
	BinaryArtifact *ExternalOpaqueBinaryBlob `json:"binaryArtifact,omitempty"`

	// base64 or binary blob only - secret type is invalid
	Format *OpaqueObjectCategory `json:"format,omitempty"`

	// artifact id
	//
	// System defined universally unique Id of the artifact.
	// Read Only: true
	// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
	ID string `json:"id,omitempty"`
}

// Validate validates this binary artifact
func (m *BinaryArtifact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBase64Artifact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBinaryArtifact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BinaryArtifact) validateBase64Artifact(formats strfmt.Registry) error {
	if swag.IsZero(m.Base64Artifact) { // not required
		return nil
	}

	if m.Base64Artifact != nil {
		if err := m.Base64Artifact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base64Artifact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base64Artifact")
			}
			return err
		}
	}

	return nil
}

func (m *BinaryArtifact) validateBinaryArtifact(formats strfmt.Registry) error {
	if swag.IsZero(m.BinaryArtifact) { // not required
		return nil
	}

	if m.BinaryArtifact != nil {
		if err := m.BinaryArtifact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("binaryArtifact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("binaryArtifact")
			}
			return err
		}
	}

	return nil
}

func (m *BinaryArtifact) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	if m.Format != nil {
		if err := m.Format.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("format")
			}
			return err
		}
	}

	return nil
}

func (m *BinaryArtifact) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this binary artifact based on the context it is used
func (m *BinaryArtifact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBase64Artifact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBinaryArtifact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BinaryArtifact) contextValidateBase64Artifact(ctx context.Context, formats strfmt.Registry) error {

	if m.Base64Artifact != nil {

		if swag.IsZero(m.Base64Artifact) { // not required
			return nil
		}

		if err := m.Base64Artifact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base64Artifact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("base64Artifact")
			}
			return err
		}
	}

	return nil
}

func (m *BinaryArtifact) contextValidateBinaryArtifact(ctx context.Context, formats strfmt.Registry) error {

	if m.BinaryArtifact != nil {

		if swag.IsZero(m.BinaryArtifact) { // not required
			return nil
		}

		if err := m.BinaryArtifact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("binaryArtifact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("binaryArtifact")
			}
			return err
		}
	}

	return nil
}

func (m *BinaryArtifact) contextValidateFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.Format != nil {

		if swag.IsZero(m.Format) { // not required
			return nil
		}

		if err := m.Format.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("format")
			}
			return err
		}
	}

	return nil
}

func (m *BinaryArtifact) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BinaryArtifact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BinaryArtifact) UnmarshalBinary(b []byte) error {
	var res BinaryArtifact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
