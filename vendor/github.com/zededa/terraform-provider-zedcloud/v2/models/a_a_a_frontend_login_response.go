// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AAAFrontendLoginResponse a a a frontend login response
//
// swagger:model AAA_Frontend_LoginResponse
type AAAFrontendLoginResponse struct {

	// api token
	APIToken *Token64 `json:"apiToken,omitempty"`

	// cause
	Cause *AAAFrontendLoginResponseCause `json:"cause,omitempty"`

	// detailed user
	DetailedUser *DetailedUser `json:"detailedUser,omitempty"`

	// enterprise
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// login token
	LoginToken *Token64 `json:"loginToken,omitempty"`

	// no of login attempts left
	NoOfLoginAttemptsLeft int64 `json:"noOfLoginAttemptsLeft,omitempty"`

	// password expiry notification period in seconds
	PasswordExpiryNotificationPeriodInSeconds int64 `json:"passwordExpiryNotificationPeriodInSeconds,omitempty"`

	// password expiry time
	// Format: date-time
	PasswordExpiryTime strfmt.DateTime `json:"passwordExpiryTime,omitempty"`

	// BEGIN: Only valid when Verbose is requesed
	Policies []*Policy `json:"policies"`

	// realm
	Realm *Realm `json:"realm,omitempty"`

	// redirect Url
	RedirectURL string `json:"redirectUrl,omitempty"`

	// role
	Role *Role `json:"role,omitempty"`

	// simple user
	SimpleUser *SimpleUser `json:"simpleUser,omitempty"`

	// temp token
	TempToken *Token64 `json:"tempToken,omitempty"`

	// token
	Token *Token64 `json:"token,omitempty"`

	// BEGIN: Only valid when Cause == OK
	UserID string `json:"userId,omitempty"`
}

// Validate validates this a a a frontend login response
func (m *AAAFrontendLoginResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCause(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterprise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimpleUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAAFrontendLoginResponse) validateAPIToken(formats strfmt.Registry) error {
	if swag.IsZero(m.APIToken) { // not required
		return nil
	}

	if m.APIToken != nil {
		if err := m.APIToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateCause(formats strfmt.Registry) error {
	if swag.IsZero(m.Cause) { // not required
		return nil
	}

	if m.Cause != nil {
		if err := m.Cause.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cause")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cause")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateDetailedUser(formats strfmt.Registry) error {
	if swag.IsZero(m.DetailedUser) { // not required
		return nil
	}

	if m.DetailedUser != nil {
		if err := m.DetailedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detailedUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("detailedUser")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateEnterprise(formats strfmt.Registry) error {
	if swag.IsZero(m.Enterprise) { // not required
		return nil
	}

	if m.Enterprise != nil {
		if err := m.Enterprise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterprise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enterprise")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateLoginToken(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginToken) { // not required
		return nil
	}

	if m.LoginToken != nil {
		if err := m.LoginToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validatePasswordExpiryTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("passwordExpiryTime", "body", "date-time", m.PasswordExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateRealm(formats strfmt.Registry) error {
	if swag.IsZero(m.Realm) { // not required
		return nil
	}

	if m.Realm != nil {
		if err := m.Realm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realm")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateSimpleUser(formats strfmt.Registry) error {
	if swag.IsZero(m.SimpleUser) { // not required
		return nil
	}

	if m.SimpleUser != nil {
		if err := m.SimpleUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simpleUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simpleUser")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateTempToken(formats strfmt.Registry) error {
	if swag.IsZero(m.TempToken) { // not required
		return nil
	}

	if m.TempToken != nil {
		if err := m.TempToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) validateToken(formats strfmt.Registry) error {
	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if m.Token != nil {
		if err := m.Token.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a a a frontend login response based on the context it is used
func (m *AAAFrontendLoginResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCause(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetailedUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnterprise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRealm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSimpleUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTempToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateAPIToken(ctx context.Context, formats strfmt.Registry) error {

	if m.APIToken != nil {

		if swag.IsZero(m.APIToken) { // not required
			return nil
		}

		if err := m.APIToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateCause(ctx context.Context, formats strfmt.Registry) error {

	if m.Cause != nil {

		if swag.IsZero(m.Cause) { // not required
			return nil
		}

		if err := m.Cause.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cause")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cause")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateDetailedUser(ctx context.Context, formats strfmt.Registry) error {

	if m.DetailedUser != nil {

		if swag.IsZero(m.DetailedUser) { // not required
			return nil
		}

		if err := m.DetailedUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detailedUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("detailedUser")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateEnterprise(ctx context.Context, formats strfmt.Registry) error {

	if m.Enterprise != nil {

		if swag.IsZero(m.Enterprise) { // not required
			return nil
		}

		if err := m.Enterprise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterprise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enterprise")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateLoginToken(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginToken != nil {

		if swag.IsZero(m.LoginToken) { // not required
			return nil
		}

		if err := m.LoginToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Policies); i++ {

		if m.Policies[i] != nil {

			if swag.IsZero(m.Policies[i]) { // not required
				return nil
			}

			if err := m.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateRealm(ctx context.Context, formats strfmt.Registry) error {

	if m.Realm != nil {

		if swag.IsZero(m.Realm) { // not required
			return nil
		}

		if err := m.Realm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realm")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {

		if swag.IsZero(m.Role) { // not required
			return nil
		}

		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateSimpleUser(ctx context.Context, formats strfmt.Registry) error {

	if m.SimpleUser != nil {

		if swag.IsZero(m.SimpleUser) { // not required
			return nil
		}

		if err := m.SimpleUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simpleUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simpleUser")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateTempToken(ctx context.Context, formats strfmt.Registry) error {

	if m.TempToken != nil {

		if swag.IsZero(m.TempToken) { // not required
			return nil
		}

		if err := m.TempToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tempToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tempToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFrontendLoginResponse) contextValidateToken(ctx context.Context, formats strfmt.Registry) error {

	if m.Token != nil {

		if swag.IsZero(m.Token) { // not required
			return nil
		}

		if err := m.Token.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AAAFrontendLoginResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AAAFrontendLoginResponse) UnmarshalBinary(b []byte) error {
	var res AAAFrontendLoginResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
