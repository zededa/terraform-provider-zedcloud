// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkKind NetworkKind: Used for the network configuration, this is
//
//	only client mode
//
// swagger:model NetworkKind
type NetworkKind string

func NewNetworkKind(value NetworkKind) *NetworkKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetworkKind.
func (m NetworkKind) Pointer() *NetworkKind {
	return &m
}

const (

	// NetworkKindNETWORKKINDUNSPECIFIED captures enum value "NETWORK_KIND_UNSPECIFIED"
	NetworkKindNETWORKKINDUNSPECIFIED NetworkKind = "NETWORK_KIND_UNSPECIFIED"

	// NetworkKindNETWORKKINDV4 captures enum value "NETWORK_KIND_V4"
	NetworkKindNETWORKKINDV4 NetworkKind = "NETWORK_KIND_V4"

	// NetworkKindNETWORKKINDV6 captures enum value "NETWORK_KIND_V6"
	NetworkKindNETWORKKINDV6 NetworkKind = "NETWORK_KIND_V6"

	// NetworkKindNETWORKKINDV4ONLY captures enum value "NETWORK_KIND_V4_ONLY"
	NetworkKindNETWORKKINDV4ONLY NetworkKind = "NETWORK_KIND_V4_ONLY"

	// NetworkKindNETWORKKINDV6ONLY captures enum value "NETWORK_KIND_V6_ONLY"
	NetworkKindNETWORKKINDV6ONLY NetworkKind = "NETWORK_KIND_V6_ONLY"

	// NetworkKindNETWORKKINDDUALV4V6 captures enum value "NETWORK_KIND_DUAL_V4_V6"
	NetworkKindNETWORKKINDDUALV4V6 NetworkKind = "NETWORK_KIND_DUAL_V4_V6"
)

// for schema
var networkKindEnum []interface{}

func init() {
	var res []NetworkKind
	if err := json.Unmarshal([]byte(`["NETWORK_KIND_UNSPECIFIED","NETWORK_KIND_V4","NETWORK_KIND_V6","NETWORK_KIND_V4_ONLY","NETWORK_KIND_V6_ONLY","NETWORK_KIND_DUAL_V4_V6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkKindEnum = append(networkKindEnum, v)
	}
}

func (m NetworkKind) validateNetworkKindEnum(path, location string, value NetworkKind) error {
	if err := validate.EnumCase(path, location, value, networkKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network kind
func (m NetworkKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this network kind based on context it is used
func (m NetworkKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
