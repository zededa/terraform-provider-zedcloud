// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EdgeviewCfg edgeview cfg
//
// swagger:model EdgeviewCfg
type EdgeviewCfg struct {

	// app policy
	AppPolicy *AppAccessPolicy `json:"appPolicy,omitempty"`

	// dev policy
	DevPolicy *DevAccessPolicy `json:"devPolicy,omitempty"`

	// ext policy
	ExtPolicy *ExtAccessPolicy `json:"extPolicy,omitempty"`

	// generation Id
	GenerationID int64 `json:"generationId,omitempty"`

	// jwt info
	JwtInfo *JWTInfo `json:"jwtInfo,omitempty"`

	// token
	Token string `json:"token,omitempty"`
}

// Validate validates this edgeview cfg
func (m *EdgeviewCfg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwtInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeviewCfg) validateAppPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AppPolicy) { // not required
		return nil
	}

	if m.AppPolicy != nil {
		if err := m.AppPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *EdgeviewCfg) validateDevPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.DevPolicy) { // not required
		return nil
	}

	if m.DevPolicy != nil {
		if err := m.DevPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("devPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *EdgeviewCfg) validateExtPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtPolicy) { // not required
		return nil
	}

	if m.ExtPolicy != nil {
		if err := m.ExtPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *EdgeviewCfg) validateJwtInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.JwtInfo) { // not required
		return nil
	}

	if m.JwtInfo != nil {
		if err := m.JwtInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwtInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwtInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this edgeview cfg based on the context it is used
func (m *EdgeviewCfg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJwtInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeviewCfg) contextValidateAppPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.AppPolicy != nil {
		if err := m.AppPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *EdgeviewCfg) contextValidateDevPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.DevPolicy != nil {
		if err := m.DevPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("devPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *EdgeviewCfg) contextValidateExtPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtPolicy != nil {
		if err := m.ExtPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *EdgeviewCfg) contextValidateJwtInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.JwtInfo != nil {
		if err := m.JwtInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwtInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwtInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeviewCfg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeviewCfg) UnmarshalBinary(b []byte) error {
	var res EdgeviewCfg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
