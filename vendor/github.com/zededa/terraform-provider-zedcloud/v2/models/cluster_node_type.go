// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ClusterNodeType edge node cluster node type
//
// swagger:model ClusterNodeType
type ClusterNodeType string

func NewClusterNodeType(value ClusterNodeType) *ClusterNodeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ClusterNodeType.
func (m ClusterNodeType) Pointer() *ClusterNodeType {
	return &m
}

const (

	// ClusterNodeTypeEDGENODECLUSTERNODETYPEUNSPECIFIED captures enum value "EDGE_NODE_CLUSTER_NODE_TYPE_UNSPECIFIED"
	ClusterNodeTypeEDGENODECLUSTERNODETYPEUNSPECIFIED ClusterNodeType = "EDGE_NODE_CLUSTER_NODE_TYPE_UNSPECIFIED"

	// ClusterNodeTypeEDGENODECLUSTERNODETYPESERVER captures enum value "EDGE_NODE_CLUSTER_NODE_TYPE_SERVER"
	ClusterNodeTypeEDGENODECLUSTERNODETYPESERVER ClusterNodeType = "EDGE_NODE_CLUSTER_NODE_TYPE_SERVER"

	// ClusterNodeTypeEDGENODECLUSTERNODETYPEAGENT captures enum value "EDGE_NODE_CLUSTER_NODE_TYPE_AGENT"
	ClusterNodeTypeEDGENODECLUSTERNODETYPEAGENT ClusterNodeType = "EDGE_NODE_CLUSTER_NODE_TYPE_AGENT"
)

// for schema
var edgeNodeClusterNodeTypeEnum []interface{}

func init() {
	var res []ClusterNodeType
	if err := json.Unmarshal([]byte(`["EDGE_NODE_CLUSTER_NODE_TYPE_UNSPECIFIED","EDGE_NODE_CLUSTER_NODE_TYPE_SERVER","EDGE_NODE_CLUSTER_NODE_TYPE_AGENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		edgeNodeClusterNodeTypeEnum = append(edgeNodeClusterNodeTypeEnum, v)
	}
}

func (m ClusterNodeType) validateClusterNodeTypeEnum(path, location string, value ClusterNodeType) error {
	if err := validate.EnumCase(path, location, value, edgeNodeClusterNodeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this edge node cluster node type
func (m ClusterNodeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterNodeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this edge node cluster node type based on context it is used
func (m ClusterNodeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
