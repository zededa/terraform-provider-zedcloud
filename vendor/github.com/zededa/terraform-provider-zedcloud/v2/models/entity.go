// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Entity Edge node components
//
// - ENTITY_UNSPECIFIED: Invalid Device Entity
//   - ENTITY_BASE_OS: Base OS entity
//   - ENTITY_SYSTEM_ADAPTER: System Adapter Entity
//   - ENTITY_VAULT: Vault Entity
//   - ENTITY_ATTESTATION: Attestation Entity
//   - ENTITY_APP_INSTANCE: App Instance Entity
//   - ENTITY_PORT: Port Entity
//   - ENTITY_NETWORK: Network Entity
//   - ENTITY_NETWORK_INSTANCE: Network Instance Entity
//   - ENTITY_CONTENT_TREE: ContentTree Entity
//   - ENTITY_CONTENT_BLOB: Blob Entity
//   - ENTITY_VOLUME: VOLUME Entity
//
// swagger:model Entity
type Entity string

func NewEntity(value Entity) *Entity {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Entity.
func (m Entity) Pointer() *Entity {
	return &m
}

const (

	// EntityENTITYUNSPECIFIED captures enum value "ENTITY_UNSPECIFIED"
	EntityENTITYUNSPECIFIED Entity = "ENTITY_UNSPECIFIED"

	// EntityENTITYBASEOS captures enum value "ENTITY_BASE_OS"
	EntityENTITYBASEOS Entity = "ENTITY_BASE_OS"

	// EntityENTITYSYSTEMADAPTER captures enum value "ENTITY_SYSTEM_ADAPTER"
	EntityENTITYSYSTEMADAPTER Entity = "ENTITY_SYSTEM_ADAPTER"

	// EntityENTITYVAULT captures enum value "ENTITY_VAULT"
	EntityENTITYVAULT Entity = "ENTITY_VAULT"

	// EntityENTITYATTESTATION captures enum value "ENTITY_ATTESTATION"
	EntityENTITYATTESTATION Entity = "ENTITY_ATTESTATION"

	// EntityENTITYAPPINSTANCE captures enum value "ENTITY_APP_INSTANCE"
	EntityENTITYAPPINSTANCE Entity = "ENTITY_APP_INSTANCE"

	// EntityENTITYPORT captures enum value "ENTITY_PORT"
	EntityENTITYPORT Entity = "ENTITY_PORT"

	// EntityENTITYNETWORK captures enum value "ENTITY_NETWORK"
	EntityENTITYNETWORK Entity = "ENTITY_NETWORK"

	// EntityENTITYNETWORKINSTANCE captures enum value "ENTITY_NETWORK_INSTANCE"
	EntityENTITYNETWORKINSTANCE Entity = "ENTITY_NETWORK_INSTANCE"

	// EntityENTITYCONTENTTREE captures enum value "ENTITY_CONTENT_TREE"
	EntityENTITYCONTENTTREE Entity = "ENTITY_CONTENT_TREE"

	// EntityENTITYCONTENTBLOB captures enum value "ENTITY_CONTENT_BLOB"
	EntityENTITYCONTENTBLOB Entity = "ENTITY_CONTENT_BLOB"

	// EntityENTITYVOLUME captures enum value "ENTITY_VOLUME"
	EntityENTITYVOLUME Entity = "ENTITY_VOLUME"
)

// for schema
var entityEnum []interface{}

func init() {
	var res []Entity
	if err := json.Unmarshal([]byte(`["ENTITY_UNSPECIFIED","ENTITY_BASE_OS","ENTITY_SYSTEM_ADAPTER","ENTITY_VAULT","ENTITY_ATTESTATION","ENTITY_APP_INSTANCE","ENTITY_PORT","ENTITY_NETWORK","ENTITY_NETWORK_INSTANCE","ENTITY_CONTENT_TREE","ENTITY_CONTENT_BLOB","ENTITY_VOLUME"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		entityEnum = append(entityEnum, v)
	}
}

func (m Entity) validateEntityEnum(path, location string, value Entity) error {
	if err := validate.EnumCase(path, location, value, entityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this entity
func (m Entity) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEntityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this entity based on context it is used
func (m Entity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
