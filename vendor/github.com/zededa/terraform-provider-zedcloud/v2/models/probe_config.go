// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProbeConfig Probing configuration
//
// # Probing configuration
//
// swagger:model ProbeConfig
type ProbeConfig struct {

	// Custom probe configuration
	CustomProbeConfig *ConfigConnectivityProbe `json:"customProbeConfig,omitempty"`

	// Enable gateway ping
	EnableGatewayPing bool `json:"enableGatewayPing,omitempty"`

	// Ping max cost
	PingMaxCost int64 `json:"pingMaxCost,omitempty"`

	// Prefer lower cost
	PreferLowerCost bool `json:"preferLowerCost,omitempty"`

	// Prefer stronger WWAN signal
	PreferStrongerWwanSignal bool `json:"preferStrongerWwanSignal,omitempty"`
}

// Validate validates this probe config
func (m *ProbeConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomProbeConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProbeConfig) validateCustomProbeConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomProbeConfig) { // not required
		return nil
	}

	if m.CustomProbeConfig != nil {
		if err := m.CustomProbeConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customProbeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customProbeConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this probe config based on the context it is used
func (m *ProbeConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomProbeConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProbeConfig) contextValidateCustomProbeConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomProbeConfig != nil {

		if swag.IsZero(m.CustomProbeConfig) { // not required
			return nil
		}

		if err := m.CustomProbeConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customProbeConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customProbeConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProbeConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProbeConfig) UnmarshalBinary(b []byte) error {
	var res ProbeConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
