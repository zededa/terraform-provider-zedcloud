// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IoBundleStatus IoBundleStatus is used to store the status of the Input Output bundle
//
// # IoBundleStatus is used to store the status of the Input Output bundle
//
// swagger:model IoBundleStatus
type IoBundleStatus struct {

	// Application name
	// Required: true
	AppName *string `json:"appName"`

	// 6 - DEPRECATED
	//
	// Device error details
	Err *DeviceError `json:"err,omitempty"`

	// LTE information
	LteInfo *LTEAdapter `json:"lteInfo,omitempty"`

	// List of IO members
	MemberList []*IoMemberStatus `json:"memberList"`

	// members - Deprecated by memberList
	//
	// Member Array
	// Required: true
	Members []string `json:"members"`

	// Io Bundle status name
	// Required: true
	Name *string `json:"name"`

	// IoType specifies the type of the Input output of the device
	// Required: true
	Type *IoType `json:"type"`
}

// Validate validates this io bundle status
func (m *IoBundleStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLteInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoBundleStatus) validateAppName(formats strfmt.Registry) error {

	if err := validate.Required("appName", "body", m.AppName); err != nil {
		return err
	}

	return nil
}

func (m *IoBundleStatus) validateErr(formats strfmt.Registry) error {
	if swag.IsZero(m.Err) { // not required
		return nil
	}

	if m.Err != nil {
		if err := m.Err.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("err")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("err")
			}
			return err
		}
	}

	return nil
}

func (m *IoBundleStatus) validateLteInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LteInfo) { // not required
		return nil
	}

	if m.LteInfo != nil {
		if err := m.LteInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lteInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lteInfo")
			}
			return err
		}
	}

	return nil
}

func (m *IoBundleStatus) validateMemberList(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberList) { // not required
		return nil
	}

	for i := 0; i < len(m.MemberList); i++ {
		if swag.IsZero(m.MemberList[i]) { // not required
			continue
		}

		if m.MemberList[i] != nil {
			if err := m.MemberList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoBundleStatus) validateMembers(formats strfmt.Registry) error {

	if err := validate.Required("members", "body", m.Members); err != nil {
		return err
	}

	return nil
}

func (m *IoBundleStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IoBundleStatus) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this io bundle status based on the context it is used
func (m *IoBundleStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLteInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IoBundleStatus) contextValidateErr(ctx context.Context, formats strfmt.Registry) error {

	if m.Err != nil {
		if err := m.Err.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("err")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("err")
			}
			return err
		}
	}

	return nil
}

func (m *IoBundleStatus) contextValidateLteInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LteInfo != nil {
		if err := m.LteInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lteInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lteInfo")
			}
			return err
		}
	}

	return nil
}

func (m *IoBundleStatus) contextValidateMemberList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MemberList); i++ {

		if m.MemberList[i] != nil {
			if err := m.MemberList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IoBundleStatus) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IoBundleStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IoBundleStatus) UnmarshalBinary(b []byte) error {
	var res IoBundleStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
