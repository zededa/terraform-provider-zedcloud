// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VariableGroupConditionOperator variable group condition operator
//
// swagger:model VariableGroupConditionOperator
type VariableGroupConditionOperator string

func NewVariableGroupConditionOperator(value VariableGroupConditionOperator) *VariableGroupConditionOperator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VariableGroupConditionOperator.
func (m VariableGroupConditionOperator) Pointer() *VariableGroupConditionOperator {
	return &m
}

const (

	// VariableGroupConditionOperatorCONDITIONOPERATORUNSPECIFIED captures enum value "CONDITION_OPERATOR_UNSPECIFIED"
	VariableGroupConditionOperatorCONDITIONOPERATORUNSPECIFIED VariableGroupConditionOperator = "CONDITION_OPERATOR_UNSPECIFIED"

	// VariableGroupConditionOperatorCONDITIONOPERATOREQUALTO captures enum value "CONDITION_OPERATOR_EQUALTO"
	VariableGroupConditionOperatorCONDITIONOPERATOREQUALTO VariableGroupConditionOperator = "CONDITION_OPERATOR_EQUALTO"

	// VariableGroupConditionOperatorCONDITIONOPERATORNOTEQUALTO captures enum value "CONDITION_OPERATOR_NOTEQUALTO"
	VariableGroupConditionOperatorCONDITIONOPERATORNOTEQUALTO VariableGroupConditionOperator = "CONDITION_OPERATOR_NOTEQUALTO"
)

// for schema
var variableGroupConditionOperatorEnum []interface{}

func init() {
	var res []VariableGroupConditionOperator
	if err := json.Unmarshal([]byte(`["CONDITION_OPERATOR_UNSPECIFIED","CONDITION_OPERATOR_EQUALTO","CONDITION_OPERATOR_NOTEQUALTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		variableGroupConditionOperatorEnum = append(variableGroupConditionOperatorEnum, v)
	}
}

func (m VariableGroupConditionOperator) validateVariableGroupConditionOperatorEnum(path, location string, value VariableGroupConditionOperator) error {
	if err := validate.EnumCase(path, location, value, variableGroupConditionOperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this variable group condition operator
func (m VariableGroupConditionOperator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVariableGroupConditionOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this variable group condition operator based on context it is used
func (m VariableGroupConditionOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
