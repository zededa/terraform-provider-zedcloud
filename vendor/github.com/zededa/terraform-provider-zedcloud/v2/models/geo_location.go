// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GeoLocation Geographic location of an edge node
//
// Geographic location of an edge node determined by a variety of data collection mechanisms (e.g. network routing addresses or internal GPS devices).
//
// swagger:model GeoLocation
type GeoLocation struct {

	// City
	City string `json:"city,omitempty"`

	// Country code consisting of 2 capital letters as per ISO 3166-1 alpha2 standard
	Country string `json:"country,omitempty"`

	// Free formatted location string
	Freeloc string `json:"freeloc,omitempty"`

	// Host name
	Hostname string `json:"hostname,omitempty"`

	// Deprecated field: comma, separated lat, long
	Latlong string `json:"latlong,omitempty"`

	// Ordered pair of (latitude, longitude) separated by comma (,). Latitude is the horizontal component used for geographic positioning; it is the angle between 0° (the equator) and ±90° (north or south) at the poles measured in decimal degrees. It is the first value in an ordered pair. A negative number denotes a location south of the equator; a positive number is north. Longitude is the vertical component used for geographic positioning; it is the angle between 0° (the Prime Meridian) and ±180° (westward or eastward) measured in decimal degrees. It is the second number in an ordered pair. A negative number indicates a location west of Greenwich, England; a positive number east.
	Loc string `json:"loc,omitempty"`

	// The name of the recipient, firm, or company at this geographical location.
	Org string `json:"org,omitempty"`

	// Postal code (ZIP code for USA) of the geographical location
	Postal string `json:"postal,omitempty"`

	// Region
	Region string `json:"region,omitempty"`

	// Single IP address, either in IPv4 or in IPv6 format
	UnderlayIP string `json:"underlayIP,omitempty"`
}

// Validate validates this geo location
func (m *GeoLocation) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this geo location based on context it is used
func (m *GeoLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GeoLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GeoLocation) UnmarshalBinary(b []byte) error {
	var res GeoLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
