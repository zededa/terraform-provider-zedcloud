// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzurePolicy Azure policy body detail
//
// All azure policy related details that are required to provision an iot edge device and deploy a module on that.
//
// swagger:model AzurePolicy
type AzurePolicy struct {

	// app id for rbac
	// Required: true
	AppID *string `json:"appId"`

	// app password for rbac
	// Required: true
	AppPassword *string `json:"appPassword"`

	// azure resource and service the policy will be interested in
	AzureResourceAndServices *AzureResourceAndServices `json:"azureResourceAndServices,omitempty"`

	// Certificate object holds the details of certificate like encryption type, validity, subject etc
	Certificate *Certificate `json:"certificate,omitempty"`

	// key to decrypt AppPassword
	CryptoKey string `json:"cryptoKey,omitempty"`

	// custom deployment managed
	CustomDeploymentManaged bool `json:"customDeploymentManaged,omitempty"`

	// encrypted AppPassword
	EncryptedSecrets map[string]string `json:"encryptedSecrets,omitempty"`

	// tenant id for rbac
	// Required: true
	TenantID *string `json:"tenantId"`
}

// Validate validates this azure policy
func (m *AzurePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureResourceAndServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzurePolicy) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("appId", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *AzurePolicy) validateAppPassword(formats strfmt.Registry) error {

	if err := validate.Required("appPassword", "body", m.AppPassword); err != nil {
		return err
	}

	return nil
}

func (m *AzurePolicy) validateAzureResourceAndServices(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureResourceAndServices) { // not required
		return nil
	}

	if m.AzureResourceAndServices != nil {
		if err := m.AzureResourceAndServices.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureResourceAndServices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureResourceAndServices")
			}
			return err
		}
	}

	return nil
}

func (m *AzurePolicy) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

func (m *AzurePolicy) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this azure policy based on the context it is used
func (m *AzurePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAzureResourceAndServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzurePolicy) contextValidateAzureResourceAndServices(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureResourceAndServices != nil {
		if err := m.AzureResourceAndServices.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureResourceAndServices")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureResourceAndServices")
			}
			return err
		}
	}

	return nil
}

func (m *AzurePolicy) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {
		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzurePolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzurePolicy) UnmarshalBinary(b []byte) error {
	var res AzurePolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
