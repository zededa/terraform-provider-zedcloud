// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SysModelState SysModelState : enum specifies the SysModel status
//
// - SYS_MODEL_STATE_UNSPECIFIED: default options, which says no Operation/Invalid Operation
//   - SYS_MODEL_STATE_ARCHIVE: Archived  sysModel State
//   - SYS_MODEL_STATE_ACTIVE: Active sysModel state
//
// swagger:model SysModelState
type SysModelState string

func NewSysModelState(value SysModelState) *SysModelState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SysModelState.
func (m SysModelState) Pointer() *SysModelState {
	return &m
}

const (

	// SysModelStateSYSMODELSTATEUNSPECIFIED captures enum value "SYS_MODEL_STATE_UNSPECIFIED"
	SysModelStateSYSMODELSTATEUNSPECIFIED SysModelState = "SYS_MODEL_STATE_UNSPECIFIED"

	// SysModelStateSYSMODELSTATEARCHIVE captures enum value "SYS_MODEL_STATE_ARCHIVE"
	SysModelStateSYSMODELSTATEARCHIVE SysModelState = "SYS_MODEL_STATE_ARCHIVE"

	// SysModelStateSYSMODELSTATEACTIVE captures enum value "SYS_MODEL_STATE_ACTIVE"
	SysModelStateSYSMODELSTATEACTIVE SysModelState = "SYS_MODEL_STATE_ACTIVE"
)

// for schema
var sysModelStateEnum []interface{}

func init() {
	var res []SysModelState
	if err := json.Unmarshal([]byte(`["SYS_MODEL_STATE_UNSPECIFIED","SYS_MODEL_STATE_ARCHIVE","SYS_MODEL_STATE_ACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sysModelStateEnum = append(sysModelStateEnum, v)
	}
}

func (m SysModelState) validateSysModelStateEnum(path, location string, value SysModelState) error {
	if err := validate.EnumCase(path, location, value, sysModelStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sys model state
func (m SysModelState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSysModelStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sys model state based on context it is used
func (m SysModelState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
