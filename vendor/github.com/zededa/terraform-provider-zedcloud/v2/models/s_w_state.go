// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SWState State of EVE/Edge Application software
//
// - SW_STATE_RESOLVING_TAG: Prior to DOWNLOAD_STARTED we go through these:
// Resolving an image tag
//   - SW_STATE_RESOLVED_TAG: Tag has been resolved/failed
//   - SW_STATE_CREATING_VOLUME: Prior to INSTALLED we go through these:
//
// Volume create in progress
//   - SW_STATE_CREATED_VOLUME: Volume create done/failed
//   - SW_STATE_VERIFYING: Verification in-progress
//   - SW_STATE_LOADING: Loading blob in CAS
//   - SW_STATE_LOADED: Loaded blob in CAS
//   - SW_STATE_AWAITNETWORKINSTANCE: Wait for network instance
//
// swagger:model SWState
type SWState string

func NewSWState(value SWState) *SWState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SWState.
func (m SWState) Pointer() *SWState {
	return &m
}

const (

	// SWStateSWSTATEUNSPECIFIED captures enum value "SW_STATE_UNSPECIFIED"
	SWStateSWSTATEUNSPECIFIED SWState = "SW_STATE_UNSPECIFIED"

	// SWStateSWSTATEINITIAL captures enum value "SW_STATE_INITIAL"
	SWStateSWSTATEINITIAL SWState = "SW_STATE_INITIAL"

	// SWStateSWSTATEDOWNLOADINPROGRESS captures enum value "SW_STATE_DOWNLOAD_IN_PROGRESS"
	SWStateSWSTATEDOWNLOADINPROGRESS SWState = "SW_STATE_DOWNLOAD_IN_PROGRESS"

	// SWStateSWSTATEDOWNLOADED captures enum value "SW_STATE_DOWNLOADED"
	SWStateSWSTATEDOWNLOADED SWState = "SW_STATE_DOWNLOADED"

	// SWStateSWSTATEVERIFIED captures enum value "SW_STATE_VERIFIED"
	SWStateSWSTATEVERIFIED SWState = "SW_STATE_VERIFIED"

	// SWStateSWSTATEINSTALLED captures enum value "SW_STATE_INSTALLED"
	SWStateSWSTATEINSTALLED SWState = "SW_STATE_INSTALLED"

	// SWStateSWSTATEBOOTING captures enum value "SW_STATE_BOOTING"
	SWStateSWSTATEBOOTING SWState = "SW_STATE_BOOTING"

	// SWStateSWSTATERUNNING captures enum value "SW_STATE_RUNNING"
	SWStateSWSTATERUNNING SWState = "SW_STATE_RUNNING"

	// SWStateSWSTATEHALTING captures enum value "SW_STATE_HALTING"
	SWStateSWSTATEHALTING SWState = "SW_STATE_HALTING"

	// SWStateSWSTATEHALTED captures enum value "SW_STATE_HALTED"
	SWStateSWSTATEHALTED SWState = "SW_STATE_HALTED"

	// SWStateSWSTATEREFRESHING captures enum value "SW_STATE_REFRESHING"
	SWStateSWSTATEREFRESHING SWState = "SW_STATE_REFRESHING"

	// SWStateSWSTATEPURGING captures enum value "SW_STATE_PURGING"
	SWStateSWSTATEPURGING SWState = "SW_STATE_PURGING"

	// SWStateSWSTATERESOLVINGTAG captures enum value "SW_STATE_RESOLVING_TAG"
	SWStateSWSTATERESOLVINGTAG SWState = "SW_STATE_RESOLVING_TAG"

	// SWStateSWSTATERESOLVEDTAG captures enum value "SW_STATE_RESOLVED_TAG"
	SWStateSWSTATERESOLVEDTAG SWState = "SW_STATE_RESOLVED_TAG"

	// SWStateSWSTATECREATINGVOLUME captures enum value "SW_STATE_CREATING_VOLUME"
	SWStateSWSTATECREATINGVOLUME SWState = "SW_STATE_CREATING_VOLUME"

	// SWStateSWSTATECREATEDVOLUME captures enum value "SW_STATE_CREATED_VOLUME"
	SWStateSWSTATECREATEDVOLUME SWState = "SW_STATE_CREATED_VOLUME"

	// SWStateSWSTATEVERIFYING captures enum value "SW_STATE_VERIFYING"
	SWStateSWSTATEVERIFYING SWState = "SW_STATE_VERIFYING"

	// SWStateSWSTATELOADING captures enum value "SW_STATE_LOADING"
	SWStateSWSTATELOADING SWState = "SW_STATE_LOADING"

	// SWStateSWSTATELOADED captures enum value "SW_STATE_LOADED"
	SWStateSWSTATELOADED SWState = "SW_STATE_LOADED"

	// SWStateSWSTATEAWAITNETWORKINSTANCE captures enum value "SW_STATE_AWAITNETWORKINSTANCE"
	SWStateSWSTATEAWAITNETWORKINSTANCE SWState = "SW_STATE_AWAITNETWORKINSTANCE"
)

// for schema
var sWStateEnum []interface{}

func init() {
	var res []SWState
	if err := json.Unmarshal([]byte(`["SW_STATE_UNSPECIFIED","SW_STATE_INITIAL","SW_STATE_DOWNLOAD_IN_PROGRESS","SW_STATE_DOWNLOADED","SW_STATE_VERIFIED","SW_STATE_INSTALLED","SW_STATE_BOOTING","SW_STATE_RUNNING","SW_STATE_HALTING","SW_STATE_HALTED","SW_STATE_REFRESHING","SW_STATE_PURGING","SW_STATE_RESOLVING_TAG","SW_STATE_RESOLVED_TAG","SW_STATE_CREATING_VOLUME","SW_STATE_CREATED_VOLUME","SW_STATE_VERIFYING","SW_STATE_LOADING","SW_STATE_LOADED","SW_STATE_AWAITNETWORKINSTANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sWStateEnum = append(sWStateEnum, v)
	}
}

func (m SWState) validateSWStateEnum(path, location string, value SWState) error {
	if err := validate.EnumCase(path, location, value, sWStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this s w state
func (m SWState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSWStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this s w state based on context it is used
func (m SWState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
