// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppNamingScheme type of name aliasing.
//
// swagger:model AppNamingScheme
type AppNamingScheme string

func NewAppNamingScheme(value AppNamingScheme) *AppNamingScheme {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppNamingScheme.
func (m AppNamingScheme) Pointer() *AppNamingScheme {
	return &m
}

const (

	// AppNamingSchemeAPPNAMINGSCHEMEUNSPECIFIED captures enum value "APP_NAMING_SCHEME_UNSPECIFIED"
	AppNamingSchemeAPPNAMINGSCHEMEUNSPECIFIED AppNamingScheme = "APP_NAMING_SCHEME_UNSPECIFIED"

	// AppNamingSchemeAPPNAMINGSCHEMEDEVICE captures enum value "APP_NAMING_SCHEME_DEVICE"
	AppNamingSchemeAPPNAMINGSCHEMEDEVICE AppNamingScheme = "APP_NAMING_SCHEME_DEVICE"

	// AppNamingSchemeAPPNAMINGSCHEMEAPPDEVICE captures enum value "APP_NAMING_SCHEME_APP_DEVICE"
	AppNamingSchemeAPPNAMINGSCHEMEAPPDEVICE AppNamingScheme = "APP_NAMING_SCHEME_APP_DEVICE"

	// AppNamingSchemeAPPNAMINGSCHEMEPROJECTDEVICE captures enum value "APP_NAMING_SCHEME_PROJECT_DEVICE"
	AppNamingSchemeAPPNAMINGSCHEMEPROJECTDEVICE AppNamingScheme = "APP_NAMING_SCHEME_PROJECT_DEVICE"

	// AppNamingSchemeAPPNAMINGSCHEMEPROJECTAPPDEVICE captures enum value "APP_NAMING_SCHEME_PROJECT_APP_DEVICE"
	AppNamingSchemeAPPNAMINGSCHEMEPROJECTAPPDEVICE AppNamingScheme = "APP_NAMING_SCHEME_PROJECT_APP_DEVICE"
)

// for schema
var appNamingSchemeEnum []interface{}

func init() {
	var res []AppNamingScheme
	if err := json.Unmarshal([]byte(`["APP_NAMING_SCHEME_UNSPECIFIED","APP_NAMING_SCHEME_DEVICE","APP_NAMING_SCHEME_APP_DEVICE","APP_NAMING_SCHEME_PROJECT_DEVICE","APP_NAMING_SCHEME_PROJECT_APP_DEVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appNamingSchemeEnum = append(appNamingSchemeEnum, v)
	}
}

func (m AppNamingScheme) validateAppNamingSchemeEnum(path, location string, value AppNamingScheme) error {
	if err := validate.EnumCase(path, location, value, appNamingSchemeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app naming scheme
func (m AppNamingScheme) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppNamingSchemeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app naming scheme based on context it is used
func (m AppNamingScheme) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
