// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PCRType - PCR_TYPE_UNSPECIFIED: Unset PCR type
//   - PCR_TYPE_HASH: PCR value of type HASH
//   - PCR_TYPE_EVENT_LOG: PCR value of type event log
//
// swagger:model PCRType
type PCRType string

func NewPCRType(value PCRType) *PCRType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PCRType.
func (m PCRType) Pointer() *PCRType {
	return &m
}

const (

	// PCRTypePCRTYPEUNSPECIFIED captures enum value "PCR_TYPE_UNSPECIFIED"
	PCRTypePCRTYPEUNSPECIFIED PCRType = "PCR_TYPE_UNSPECIFIED"

	// PCRTypePCRTYPEHASH captures enum value "PCR_TYPE_HASH"
	PCRTypePCRTYPEHASH PCRType = "PCR_TYPE_HASH"

	// PCRTypePCRTYPEEVENTLOG captures enum value "PCR_TYPE_EVENT_LOG"
	PCRTypePCRTYPEEVENTLOG PCRType = "PCR_TYPE_EVENT_LOG"
)

// for schema
var pCRTypeEnum []interface{}

func init() {
	var res []PCRType
	if err := json.Unmarshal([]byte(`["PCR_TYPE_UNSPECIFIED","PCR_TYPE_HASH","PCR_TYPE_EVENT_LOG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pCRTypeEnum = append(pCRTypeEnum, v)
	}
}

func (m PCRType) validatePCRTypeEnum(path, location string, value PCRType) error {
	if err := validate.EnumCase(path, location, value, pCRTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this p c r type
func (m PCRType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePCRTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this p c r type based on context it is used
func (m PCRType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
