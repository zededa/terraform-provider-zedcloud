// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TagLevelSettings TagLevelSettings defines settings at a specific tag level within a enterprise.
// It includes configurations that control certain behaviors or features,
// such as the transmission of flow logs for monitoring and analysis purposes.
//
// swagger:model TagLevelSettings
type TagLevelSettings struct {

	// Flow log transmission setting for the network instances
	FlowLogTransmission *NetworkInstanceFlowLogTransmission `json:"flowLogTransmission,omitempty"`

	// interface ordering for app instances
	InterfaceOrdering *InterfaceOrdering `json:"interfaceOrdering,omitempty"`
}

// Validate validates this tag level settings
func (m *TagLevelSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlowLogTransmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceOrdering(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagLevelSettings) validateFlowLogTransmission(formats strfmt.Registry) error {
	if swag.IsZero(m.FlowLogTransmission) { // not required
		return nil
	}

	if m.FlowLogTransmission != nil {
		if err := m.FlowLogTransmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flowLogTransmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flowLogTransmission")
			}
			return err
		}
	}

	return nil
}

func (m *TagLevelSettings) validateInterfaceOrdering(formats strfmt.Registry) error {
	if swag.IsZero(m.InterfaceOrdering) { // not required
		return nil
	}

	if m.InterfaceOrdering != nil {
		if err := m.InterfaceOrdering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interfaceOrdering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("interfaceOrdering")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tag level settings based on the context it is used
func (m *TagLevelSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlowLogTransmission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterfaceOrdering(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagLevelSettings) contextValidateFlowLogTransmission(ctx context.Context, formats strfmt.Registry) error {

	if m.FlowLogTransmission != nil {
		if err := m.FlowLogTransmission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flowLogTransmission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flowLogTransmission")
			}
			return err
		}
	}

	return nil
}

func (m *TagLevelSettings) contextValidateInterfaceOrdering(ctx context.Context, formats strfmt.Registry) error {

	if m.InterfaceOrdering != nil {
		if err := m.InterfaceOrdering.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interfaceOrdering")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("interfaceOrdering")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TagLevelSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagLevelSettings) UnmarshalBinary(b []byte) error {
	var res TagLevelSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
