// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SimcardState simcard state
//
// swagger:model SimcardState
type SimcardState string

func NewSimcardState(value SimcardState) *SimcardState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SimcardState.
func (m SimcardState) Pointer() *SimcardState {
	return &m
}

const (

	// SimcardStateSIMCARDSTATEINVALID captures enum value "SIMCARD_STATE_INVALID"
	SimcardStateSIMCARDSTATEINVALID SimcardState = "SIMCARD_STATE_INVALID"

	// SimcardStateSIMCARDSTATEASSIGNED captures enum value "SIMCARD_STATE_ASSIGNED"
	SimcardStateSIMCARDSTATEASSIGNED SimcardState = "SIMCARD_STATE_ASSIGNED"

	// SimcardStateSIMCARDSTATEPROVISIONED captures enum value "SIMCARD_STATE_PROVISIONED"
	SimcardStateSIMCARDSTATEPROVISIONED SimcardState = "SIMCARD_STATE_PROVISIONED"

	// SimcardStateSIMCARDSTATEACTIVE captures enum value "SIMCARD_STATE_ACTIVE"
	SimcardStateSIMCARDSTATEACTIVE SimcardState = "SIMCARD_STATE_ACTIVE"

	// SimcardStateSIMCARDSTATESUSPENDED captures enum value "SIMCARD_STATE_SUSPENDED"
	SimcardStateSIMCARDSTATESUSPENDED SimcardState = "SIMCARD_STATE_SUSPENDED"

	// SimcardStateSIMCARDSTATECANCELLED captures enum value "SIMCARD_STATE_CANCELLED"
	SimcardStateSIMCARDSTATECANCELLED SimcardState = "SIMCARD_STATE_CANCELLED"
)

// for schema
var simcardStateEnum []interface{}

func init() {
	var res []SimcardState
	if err := json.Unmarshal([]byte(`["SIMCARD_STATE_INVALID","SIMCARD_STATE_ASSIGNED","SIMCARD_STATE_PROVISIONED","SIMCARD_STATE_ACTIVE","SIMCARD_STATE_SUSPENDED","SIMCARD_STATE_CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simcardStateEnum = append(simcardStateEnum, v)
	}
}

func (m SimcardState) validateSimcardStateEnum(path, location string, value SimcardState) error {
	if err := validate.EnumCase(path, location, value, simcardStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this simcard state
func (m SimcardState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSimcardStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this simcard state based on context it is used
func (m SimcardState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
