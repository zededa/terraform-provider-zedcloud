// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeploymentConfigSummary deployment config summary
//
// swagger:model DeploymentConfigSummary
type DeploymentConfigSummary struct {

	// list of app instance policies
	AppInstPolicies []*PolicyCommon `json:"appInstPolicies"`

	// cluster policy details
	ClusterPolicy *PolicyCommon `json:"clusterPolicy,omitempty"`

	// user defined tag for an deployment
	DeploymentTag string `json:"deploymentTag,omitempty"`

	// list of device policies
	DevicePolicies []*PolicyCommon `json:"devicePolicies"`

	// edge view policy details
	EdgeViewPolicy *PolicyCommon `json:"edgeViewPolicy,omitempty"`

	// system generated unique id for an deployment
	ID string `json:"id,omitempty"`

	// integration policy details
	IntegrationPolicy *PolicyCommon `json:"integrationPolicy,omitempty"`

	// user defined deployment name
	Name string `json:"name,omitempty"`

	// list of network instance policies
	NetworkInstPolicies []*PolicyCommon `json:"networkInstPolicies"`

	// object revision details
	Revision *ObjectRevision `json:"revision,omitempty"`

	// user defined deployment title
	Title string `json:"title,omitempty"`

	// list of volume instance policies
	VolumeInstPolicies []*PolicyCommon `json:"volumeInstPolicies"`
}

// Validate validates this deployment config summary
func (m *DeploymentConfigSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppInstPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevicePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeViewPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInstPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeInstPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentConfigSummary) validateAppInstPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.AppInstPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.AppInstPolicies); i++ {
		if swag.IsZero(m.AppInstPolicies[i]) { // not required
			continue
		}

		if m.AppInstPolicies[i] != nil {
			if err := m.AppInstPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentConfigSummary) validateClusterPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterPolicy) { // not required
		return nil
	}

	if m.ClusterPolicy != nil {
		if err := m.ClusterPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentConfigSummary) validateDevicePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.DevicePolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.DevicePolicies); i++ {
		if swag.IsZero(m.DevicePolicies[i]) { // not required
			continue
		}

		if m.DevicePolicies[i] != nil {
			if err := m.DevicePolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devicePolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devicePolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentConfigSummary) validateEdgeViewPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeViewPolicy) { // not required
		return nil
	}

	if m.EdgeViewPolicy != nil {
		if err := m.EdgeViewPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeViewPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeViewPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentConfigSummary) validateIntegrationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.IntegrationPolicy) { // not required
		return nil
	}

	if m.IntegrationPolicy != nil {
		if err := m.IntegrationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integrationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integrationPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentConfigSummary) validateNetworkInstPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkInstPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInstPolicies); i++ {
		if swag.IsZero(m.NetworkInstPolicies[i]) { // not required
			continue
		}

		if m.NetworkInstPolicies[i] != nil {
			if err := m.NetworkInstPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentConfigSummary) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentConfigSummary) validateVolumeInstPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeInstPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeInstPolicies); i++ {
		if swag.IsZero(m.VolumeInstPolicies[i]) { // not required
			continue
		}

		if m.VolumeInstPolicies[i] != nil {
			if err := m.VolumeInstPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this deployment config summary based on the context it is used
func (m *DeploymentConfigSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppInstPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevicePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeViewPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntegrationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkInstPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeInstPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeploymentConfigSummary) contextValidateAppInstPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AppInstPolicies); i++ {

		if m.AppInstPolicies[i] != nil {

			if swag.IsZero(m.AppInstPolicies[i]) { // not required
				return nil
			}

			if err := m.AppInstPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentConfigSummary) contextValidateClusterPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterPolicy != nil {

		if swag.IsZero(m.ClusterPolicy) { // not required
			return nil
		}

		if err := m.ClusterPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentConfigSummary) contextValidateDevicePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DevicePolicies); i++ {

		if m.DevicePolicies[i] != nil {

			if swag.IsZero(m.DevicePolicies[i]) { // not required
				return nil
			}

			if err := m.DevicePolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devicePolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devicePolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentConfigSummary) contextValidateEdgeViewPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeViewPolicy != nil {

		if swag.IsZero(m.EdgeViewPolicy) { // not required
			return nil
		}

		if err := m.EdgeViewPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeViewPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeViewPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentConfigSummary) contextValidateIntegrationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.IntegrationPolicy != nil {

		if swag.IsZero(m.IntegrationPolicy) { // not required
			return nil
		}

		if err := m.IntegrationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("integrationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("integrationPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentConfigSummary) contextValidateNetworkInstPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkInstPolicies); i++ {

		if m.NetworkInstPolicies[i] != nil {

			if swag.IsZero(m.NetworkInstPolicies[i]) { // not required
				return nil
			}

			if err := m.NetworkInstPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeploymentConfigSummary) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {

		if swag.IsZero(m.Revision) { // not required
			return nil
		}

		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *DeploymentConfigSummary) contextValidateVolumeInstPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeInstPolicies); i++ {

		if m.VolumeInstPolicies[i] != nil {

			if swag.IsZero(m.VolumeInstPolicies[i]) { // not required
				return nil
			}

			if err := m.VolumeInstPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentConfigSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentConfigSummary) UnmarshalBinary(b []byte) error {
	var res DeploymentConfigSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
