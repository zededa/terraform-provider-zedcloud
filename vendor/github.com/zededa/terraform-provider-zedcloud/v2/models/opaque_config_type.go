// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpaqueConfigType opaque config type
//
// swagger:model OpaqueConfigType
type OpaqueConfigType string

func NewOpaqueConfigType(value OpaqueConfigType) *OpaqueConfigType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OpaqueConfigType.
func (m OpaqueConfigType) Pointer() *OpaqueConfigType {
	return &m
}

const (

	// OpaqueConfigTypeOPAQUECONFIGTYPEUNSPECIFIED captures enum value "OPAQUE_CONFIG_TYPE_UNSPECIFIED"
	OpaqueConfigTypeOPAQUECONFIGTYPEUNSPECIFIED OpaqueConfigType = "OPAQUE_CONFIG_TYPE_UNSPECIFIED"

	// OpaqueConfigTypeOPAQUECONFIGTYPEVPN captures enum value "OPAQUE_CONFIG_TYPE_VPN"
	OpaqueConfigTypeOPAQUECONFIGTYPEVPN OpaqueConfigType = "OPAQUE_CONFIG_TYPE_VPN"

	// OpaqueConfigTypeOPAQUECONFIGTYPELISP captures enum value "OPAQUE_CONFIG_TYPE_LISP"
	OpaqueConfigTypeOPAQUECONFIGTYPELISP OpaqueConfigType = "OPAQUE_CONFIG_TYPE_LISP"
)

// for schema
var opaqueConfigTypeEnum []interface{}

func init() {
	var res []OpaqueConfigType
	if err := json.Unmarshal([]byte(`["OPAQUE_CONFIG_TYPE_UNSPECIFIED","OPAQUE_CONFIG_TYPE_VPN","OPAQUE_CONFIG_TYPE_LISP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		opaqueConfigTypeEnum = append(opaqueConfigTypeEnum, v)
	}
}

func (m OpaqueConfigType) validateOpaqueConfigTypeEnum(path, location string, value OpaqueConfigType) error {
	if err := validate.EnumCase(path, location, value, opaqueConfigTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this opaque config type
func (m OpaqueConfigType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpaqueConfigTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this opaque config type based on context it is used
func (m OpaqueConfigType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
