// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FlowlogDirection flowlog direction
//
// swagger:model FlowlogDirection
type FlowlogDirection string

func NewFlowlogDirection(value FlowlogDirection) *FlowlogDirection {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FlowlogDirection.
func (m FlowlogDirection) Pointer() *FlowlogDirection {
	return &m
}

const (

	// FlowlogDirectionFLOWLOGDIRECTIONUNSPECIFIED captures enum value "FLOW_LOG_DIRECTION_UNSPECIFIED"
	FlowlogDirectionFLOWLOGDIRECTIONUNSPECIFIED FlowlogDirection = "FLOW_LOG_DIRECTION_UNSPECIFIED"

	// FlowlogDirectionFLOWLOGDIRECTIONEGRESS captures enum value "FLOW_LOG_DIRECTION_EGRESS"
	FlowlogDirectionFLOWLOGDIRECTIONEGRESS FlowlogDirection = "FLOW_LOG_DIRECTION_EGRESS"

	// FlowlogDirectionFLOWLOGDIRECTIONINGRESS captures enum value "FLOW_LOG_DIRECTION_INGRESS"
	FlowlogDirectionFLOWLOGDIRECTIONINGRESS FlowlogDirection = "FLOW_LOG_DIRECTION_INGRESS"
)

// for schema
var flowlogDirectionEnum []interface{}

func init() {
	var res []FlowlogDirection
	if err := json.Unmarshal([]byte(`["FLOW_LOG_DIRECTION_UNSPECIFIED","FLOW_LOG_DIRECTION_EGRESS","FLOW_LOG_DIRECTION_INGRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowlogDirectionEnum = append(flowlogDirectionEnum, v)
	}
}

func (m FlowlogDirection) validateFlowlogDirectionEnum(path, location string, value FlowlogDirection) error {
	if err := validate.EnumCase(path, location, value, flowlogDirectionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this flowlog direction
func (m FlowlogDirection) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFlowlogDirectionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this flowlog direction based on context it is used
func (m FlowlogDirection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
