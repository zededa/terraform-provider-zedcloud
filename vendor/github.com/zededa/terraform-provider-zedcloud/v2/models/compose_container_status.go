// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComposeContainerStatus compose container status
//
// swagger:model ComposeContainerStatus
type ComposeContainerStatus struct {

	// container entry point
	ContainerEntryPoint string `json:"containerEntryPoint,omitempty"`

	// container image
	ContainerImage string `json:"containerImage,omitempty"`

	// container name
	ContainerName string `json:"containerName,omitempty"`

	// running status of container (running, stopped, exited)
	ContainerState string `json:"containerState,omitempty"`

	// container creation time - UTC
	CreateTimeUTC string `json:"createTimeUTC,omitempty"`

	// container error information
	ErrInfo *DeviceError `json:"errInfo,omitempty"`

	// ports mapped to container
	PortMaps []*ContainerPortMap `json:"portMaps"`

	// container up-time in seconds from start
	Uptime uint64 `json:"uptime,omitempty"`
}

// Validate validates this compose container status
func (m *ComposeContainerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortMaps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComposeContainerStatus) validateErrInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrInfo) { // not required
		return nil
	}

	if m.ErrInfo != nil {
		if err := m.ErrInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ComposeContainerStatus) validatePortMaps(formats strfmt.Registry) error {
	if swag.IsZero(m.PortMaps) { // not required
		return nil
	}

	for i := 0; i < len(m.PortMaps); i++ {
		if swag.IsZero(m.PortMaps[i]) { // not required
			continue
		}

		if m.PortMaps[i] != nil {
			if err := m.PortMaps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portMaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("portMaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this compose container status based on the context it is used
func (m *ComposeContainerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortMaps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComposeContainerStatus) contextValidateErrInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ErrInfo != nil {

		if swag.IsZero(m.ErrInfo) { // not required
			return nil
		}

		if err := m.ErrInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("errInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("errInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ComposeContainerStatus) contextValidatePortMaps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PortMaps); i++ {

		if m.PortMaps[i] != nil {

			if swag.IsZero(m.PortMaps[i]) { // not required
				return nil
			}

			if err := m.PortMaps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("portMaps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("portMaps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComposeContainerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComposeContainerStatus) UnmarshalBinary(b []byte) error {
	var res ComposeContainerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
