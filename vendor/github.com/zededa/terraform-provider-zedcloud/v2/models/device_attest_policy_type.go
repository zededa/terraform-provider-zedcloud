// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeviceAttestPolicyType  - DEVICE_ATTEST_POLICY_TYPE_ACCEPT: Do not enforce attestation. All devices are marked as successfully attested.
//   - DEVICE_ATTEST_POLICY_TYPE_ENFORCE: Enforce attestation. Devices failing attestation are marked accordingly.
//
// swagger:model DeviceAttestPolicyType
type DeviceAttestPolicyType string

func NewDeviceAttestPolicyType(value DeviceAttestPolicyType) *DeviceAttestPolicyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeviceAttestPolicyType.
func (m DeviceAttestPolicyType) Pointer() *DeviceAttestPolicyType {
	return &m
}

const (

	// DeviceAttestPolicyTypeDEVICEATTESTPOLICYTYPEUNSPECIFIED captures enum value "DEVICE_ATTEST_POLICY_TYPE_UNSPECIFIED"
	DeviceAttestPolicyTypeDEVICEATTESTPOLICYTYPEUNSPECIFIED DeviceAttestPolicyType = "DEVICE_ATTEST_POLICY_TYPE_UNSPECIFIED"

	// DeviceAttestPolicyTypeDEVICEATTESTPOLICYTYPEACCEPT captures enum value "DEVICE_ATTEST_POLICY_TYPE_ACCEPT"
	DeviceAttestPolicyTypeDEVICEATTESTPOLICYTYPEACCEPT DeviceAttestPolicyType = "DEVICE_ATTEST_POLICY_TYPE_ACCEPT"

	// DeviceAttestPolicyTypeDEVICEATTESTPOLICYTYPEENFORCE captures enum value "DEVICE_ATTEST_POLICY_TYPE_ENFORCE"
	DeviceAttestPolicyTypeDEVICEATTESTPOLICYTYPEENFORCE DeviceAttestPolicyType = "DEVICE_ATTEST_POLICY_TYPE_ENFORCE"
)

// for schema
var deviceAttestPolicyTypeEnum []interface{}

func init() {
	var res []DeviceAttestPolicyType
	if err := json.Unmarshal([]byte(`["DEVICE_ATTEST_POLICY_TYPE_UNSPECIFIED","DEVICE_ATTEST_POLICY_TYPE_ACCEPT","DEVICE_ATTEST_POLICY_TYPE_ENFORCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAttestPolicyTypeEnum = append(deviceAttestPolicyTypeEnum, v)
	}
}

func (m DeviceAttestPolicyType) validateDeviceAttestPolicyTypeEnum(path, location string, value DeviceAttestPolicyType) error {
	if err := validate.EnumCase(path, location, value, deviceAttestPolicyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this device attest policy type
func (m DeviceAttestPolicyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeviceAttestPolicyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this device attest policy type based on context it is used
func (m DeviceAttestPolicyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
