// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZManufacturerInfo z manufacturer info
//
// swagger:model ZManufacturerInfo
type ZManufacturerInfo struct {

	// bios release date
	BiosReleaseDate string `json:"biosReleaseDate,omitempty"`

	// bios vendor
	BiosVendor string `json:"biosVendor,omitempty"`

	// bios version
	BiosVersion string `json:"biosVersion,omitempty"`

	// compatible
	Compatible string `json:"compatible,omitempty"`

	// endorsement key
	EndorsementKey string `json:"endorsementKey,omitempty"`

	// h s m info
	HSMInfo string `json:"hSMInfo,omitempty"`

	// h s m status
	HSMStatus *DeviceHWSecurityModuleStatus `json:"hSMStatus,omitempty"`

	// manufacturer
	Manufacturer string `json:"manufacturer,omitempty"`

	// product name
	ProductName string `json:"productName,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this z manufacturer info
func (m *ZManufacturerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHSMStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZManufacturerInfo) validateHSMStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.HSMStatus) { // not required
		return nil
	}

	if m.HSMStatus != nil {
		if err := m.HSMStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hSMStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hSMStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this z manufacturer info based on the context it is used
func (m *ZManufacturerInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHSMStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZManufacturerInfo) contextValidateHSMStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.HSMStatus != nil {
		if err := m.HSMStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hSMStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hSMStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZManufacturerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZManufacturerInfo) UnmarshalBinary(b []byte) error {
	var res ZManufacturerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
