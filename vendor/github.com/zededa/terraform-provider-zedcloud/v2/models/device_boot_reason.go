// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeviceBootReason device boot reason
//
// swagger:model DeviceBootReason
type DeviceBootReason string

func NewDeviceBootReason(value DeviceBootReason) *DeviceBootReason {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeviceBootReason.
func (m DeviceBootReason) Pointer() *DeviceBootReason {
	return &m
}

const (

	// DeviceBootReasonDEVICEBOOTREASONUNSPECIFIED captures enum value "DEVICE_BOOT_REASON_UNSPECIFIED"
	DeviceBootReasonDEVICEBOOTREASONUNSPECIFIED DeviceBootReason = "DEVICE_BOOT_REASON_UNSPECIFIED"

	// DeviceBootReasonDEVICEBOOTREASONFIRST captures enum value "DEVICE_BOOT_REASON_FIRST"
	DeviceBootReasonDEVICEBOOTREASONFIRST DeviceBootReason = "DEVICE_BOOT_REASON_FIRST"

	// DeviceBootReasonDEVICEBOOTREASONREBOOTCMD captures enum value "DEVICE_BOOT_REASON_REBOOT_CMD"
	DeviceBootReasonDEVICEBOOTREASONREBOOTCMD DeviceBootReason = "DEVICE_BOOT_REASON_REBOOT_CMD"

	// DeviceBootReasonDEVICEBOOTREASONUPDATE captures enum value "DEVICE_BOOT_REASON_UPDATE"
	DeviceBootReasonDEVICEBOOTREASONUPDATE DeviceBootReason = "DEVICE_BOOT_REASON_UPDATE"

	// DeviceBootReasonDEVICEBOOTREASONFALLBACK captures enum value "DEVICE_BOOT_REASON_FALLBACK"
	DeviceBootReasonDEVICEBOOTREASONFALLBACK DeviceBootReason = "DEVICE_BOOT_REASON_FALLBACK"

	// DeviceBootReasonDEVICEBOOTREASONDISCONNECT captures enum value "DEVICE_BOOT_REASON_DISCONNECT"
	DeviceBootReasonDEVICEBOOTREASONDISCONNECT DeviceBootReason = "DEVICE_BOOT_REASON_DISCONNECT"

	// DeviceBootReasonDEVICEBOOTREASONFATAL captures enum value "DEVICE_BOOT_REASON_FATAL"
	DeviceBootReasonDEVICEBOOTREASONFATAL DeviceBootReason = "DEVICE_BOOT_REASON_FATAL"

	// DeviceBootReasonDEVICEBOOTREASONOOM captures enum value "DEVICE_BOOT_REASON_OOM"
	DeviceBootReasonDEVICEBOOTREASONOOM DeviceBootReason = "DEVICE_BOOT_REASON_OOM"

	// DeviceBootReasonDEVICEBOOTREASONWATCHDOGHUNG captures enum value "DEVICE_BOOT_REASON_WATCHDOG_HUNG"
	DeviceBootReasonDEVICEBOOTREASONWATCHDOGHUNG DeviceBootReason = "DEVICE_BOOT_REASON_WATCHDOG_HUNG"

	// DeviceBootReasonDEVICEBOOTREASONWATCHDOGPID captures enum value "DEVICE_BOOT_REASON_WATCHDOG_PID"
	DeviceBootReasonDEVICEBOOTREASONWATCHDOGPID DeviceBootReason = "DEVICE_BOOT_REASON_WATCHDOG_PID"

	// DeviceBootReasonDEVICEBOOTREASONKERNEL captures enum value "DEVICE_BOOT_REASON_KERNEL"
	DeviceBootReasonDEVICEBOOTREASONKERNEL DeviceBootReason = "DEVICE_BOOT_REASON_KERNEL"

	// DeviceBootReasonDEVICEBOOTREASONPOWERFAIL captures enum value "DEVICE_BOOT_REASON_POWER_FAIL"
	DeviceBootReasonDEVICEBOOTREASONPOWERFAIL DeviceBootReason = "DEVICE_BOOT_REASON_POWER_FAIL"

	// DeviceBootReasonDEVICEBOOTREASONUNKNOWN captures enum value "DEVICE_BOOT_REASON_UNKNOWN"
	DeviceBootReasonDEVICEBOOTREASONUNKNOWN DeviceBootReason = "DEVICE_BOOT_REASON_UNKNOWN"

	// DeviceBootReasonDEVICEBOOTREASONPARSEFAIL captures enum value "DEVICE_BOOT_REASON_PARSE_FAIL"
	DeviceBootReasonDEVICEBOOTREASONPARSEFAIL DeviceBootReason = "DEVICE_BOOT_REASON_PARSE_FAIL"
)

// for schema
var deviceBootReasonEnum []interface{}

func init() {
	var res []DeviceBootReason
	if err := json.Unmarshal([]byte(`["DEVICE_BOOT_REASON_UNSPECIFIED","DEVICE_BOOT_REASON_FIRST","DEVICE_BOOT_REASON_REBOOT_CMD","DEVICE_BOOT_REASON_UPDATE","DEVICE_BOOT_REASON_FALLBACK","DEVICE_BOOT_REASON_DISCONNECT","DEVICE_BOOT_REASON_FATAL","DEVICE_BOOT_REASON_OOM","DEVICE_BOOT_REASON_WATCHDOG_HUNG","DEVICE_BOOT_REASON_WATCHDOG_PID","DEVICE_BOOT_REASON_KERNEL","DEVICE_BOOT_REASON_POWER_FAIL","DEVICE_BOOT_REASON_UNKNOWN","DEVICE_BOOT_REASON_PARSE_FAIL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceBootReasonEnum = append(deviceBootReasonEnum, v)
	}
}

func (m DeviceBootReason) validateDeviceBootReasonEnum(path, location string, value DeviceBootReason) error {
	if err := validate.EnumCase(path, location, value, deviceBootReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this device boot reason
func (m DeviceBootReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeviceBootReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this device boot reason based on context it is used
func (m DeviceBootReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
