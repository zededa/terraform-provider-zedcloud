// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpaqueObjectCategory opaque object category
//
// swagger:model OpaqueObjectCategory
type OpaqueObjectCategory string

func NewOpaqueObjectCategory(value OpaqueObjectCategory) *OpaqueObjectCategory {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OpaqueObjectCategory.
func (m OpaqueObjectCategory) Pointer() *OpaqueObjectCategory {
	return &m
}

const (

	// OpaqueObjectCategoryOpaqueObjectCategoryUnknown captures enum value "OpaqueObjectCategoryUnknown"
	OpaqueObjectCategoryOpaqueObjectCategoryUnknown OpaqueObjectCategory = "OpaqueObjectCategoryUnknown"

	// OpaqueObjectCategoryOpaqueObjectCategoryInline captures enum value "OpaqueObjectCategoryInline"
	OpaqueObjectCategoryOpaqueObjectCategoryInline OpaqueObjectCategory = "OpaqueObjectCategoryInline"

	// OpaqueObjectCategoryOpaqueObjectCategoryExternalBinary captures enum value "OpaqueObjectCategoryExternalBinary"
	OpaqueObjectCategoryOpaqueObjectCategoryExternalBinary OpaqueObjectCategory = "OpaqueObjectCategoryExternalBinary"
)

// for schema
var opaqueObjectCategoryEnum []interface{}

func init() {
	var res []OpaqueObjectCategory
	if err := json.Unmarshal([]byte(`["OpaqueObjectCategoryUnknown","OpaqueObjectCategoryInline","OpaqueObjectCategoryExternalBinary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		opaqueObjectCategoryEnum = append(opaqueObjectCategoryEnum, v)
	}
}

func (m OpaqueObjectCategory) validateOpaqueObjectCategoryEnum(path, location string, value OpaqueObjectCategory) error {
	if err := validate.EnumCase(path, location, value, opaqueObjectCategoryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this opaque object category
func (m OpaqueObjectCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpaqueObjectCategoryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this opaque object category based on context it is used
func (m OpaqueObjectCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
