// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VariableFileEncoding File content encoding type
//
// - FILE_ENCODING_UNSPECIFIED: File content not encoded
//   - FILE_ENCODING_BASE64: File content encoded in Base64
//
// swagger:model VariableFileEncoding
type VariableFileEncoding string

func NewVariableFileEncoding(value VariableFileEncoding) *VariableFileEncoding {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VariableFileEncoding.
func (m VariableFileEncoding) Pointer() *VariableFileEncoding {
	return &m
}

const (

	// VariableFileEncodingFILEENCODINGUNSPECIFIED captures enum value "FILE_ENCODING_UNSPECIFIED"
	VariableFileEncodingFILEENCODINGUNSPECIFIED VariableFileEncoding = "FILE_ENCODING_UNSPECIFIED"

	// VariableFileEncodingFILEENCODINGBASE64 captures enum value "FILE_ENCODING_BASE64"
	VariableFileEncodingFILEENCODINGBASE64 VariableFileEncoding = "FILE_ENCODING_BASE64"
)

// for schema
var variableFileEncodingEnum []interface{}

func init() {
	var res []VariableFileEncoding
	if err := json.Unmarshal([]byte(`["FILE_ENCODING_UNSPECIFIED","FILE_ENCODING_BASE64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		variableFileEncodingEnum = append(variableFileEncodingEnum, v)
	}
}

func (m VariableFileEncoding) validateVariableFileEncodingEnum(path, location string, value VariableFileEncoding) error {
	if err := validate.EnumCase(path, location, value, variableFileEncodingEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this variable file encoding
func (m VariableFileEncoding) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVariableFileEncodingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this variable file encoding based on context it is used
func (m VariableFileEncoding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
