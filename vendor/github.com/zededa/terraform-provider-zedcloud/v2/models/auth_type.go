// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthType auth type
//
// swagger:model AuthType
type AuthType string

func NewAuthType(value AuthType) *AuthType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthType.
func (m AuthType) Pointer() *AuthType {
	return &m
}

const (

	// AuthTypeAUTHTYPEUNSPECIFIED captures enum value "AUTH_TYPE_UNSPECIFIED"
	AuthTypeAUTHTYPEUNSPECIFIED AuthType = "AUTH_TYPE_UNSPECIFIED"

	// AuthTypeAUTHTYPELOCAL captures enum value "AUTH_TYPE_LOCAL"
	AuthTypeAUTHTYPELOCAL AuthType = "AUTH_TYPE_LOCAL"

	// AuthTypeAUTHTYPEOAUTH captures enum value "AUTH_TYPE_OAUTH"
	AuthTypeAUTHTYPEOAUTH AuthType = "AUTH_TYPE_OAUTH"

	// AuthTypeAUTHTYPESAML captures enum value "AUTH_TYPE_SAML"
	AuthTypeAUTHTYPESAML AuthType = "AUTH_TYPE_SAML"
)

// for schema
var authTypeEnum []interface{}

func init() {
	var res []AuthType
	if err := json.Unmarshal([]byte(`["AUTH_TYPE_UNSPECIFIED","AUTH_TYPE_LOCAL","AUTH_TYPE_OAUTH","AUTH_TYPE_SAML"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authTypeEnum = append(authTypeEnum, v)
	}
}

func (m AuthType) validateAuthTypeEnum(path, location string, value AuthType) error {
	if err := validate.EnumCase(path, location, value, authTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this auth type
func (m AuthType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this auth type based on context it is used
func (m AuthType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
