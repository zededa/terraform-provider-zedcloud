// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Drive Drive details
//
// # Drive configuration
//
// swagger:model drive
type Drive struct {

	// If set, don't encrypt the drive. Store in cleartext
	Cleartext bool `json:"cleartext,omitempty"`

	// Type of Drive. Valid Values: UNSPECIFIED, CDROM, HDD, NET, HDD_EMPTY. HDD_EMPTY - is to allocate the empty disk of maxsizebytes specified
	// Required: true
	Drvtype *string `json:"drvtype"`

	// don't purge this drive as part of purge command for mutable volumes
	Ignorepurge bool `json:"ignorepurge,omitempty"`

	// Name of Image Object used for the drive.
	// Required: true
	Imagename *string `json:"imagename"`

	// immutable Volume for this drive. Only one of imvolname and mvolname must be specified.
	Imvolname string `json:"imvolname,omitempty"`

	// Drive maximum size
	// Required: true
	Maxsize *string `json:"maxsize"`

	// Mount Path for the drive in the App Instance
	Mountpath string `json:"mountpath,omitempty"`

	// mutable Volume for this drive. Only one of imvolname and mvolname must be specified.
	Mvolname string `json:"mvolname,omitempty"`

	// Preserve the drive even when all app instances using it are deleted
	// Required: true
	Preserve *bool `json:"preserve"`

	// Read only flag. If set, drive is mounted as readonly by app instance.
	// Required: true
	Readonly *bool `json:"readonly"`

	// type of target. Valid values: Disk, Kernel, Initrd, RamDisk
	// Required: true
	Target *string `json:"target"`

	// User defined volume to use for this drive
	Volumelabel string `json:"volumelabel,omitempty"`
}

// Validate validates this drive
func (m *Drive) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDrvtype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxsize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreserve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadonly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Drive) validateDrvtype(formats strfmt.Registry) error {

	if err := validate.Required("drvtype", "body", m.Drvtype); err != nil {
		return err
	}

	return nil
}

func (m *Drive) validateImagename(formats strfmt.Registry) error {

	if err := validate.Required("imagename", "body", m.Imagename); err != nil {
		return err
	}

	return nil
}

func (m *Drive) validateMaxsize(formats strfmt.Registry) error {

	if err := validate.Required("maxsize", "body", m.Maxsize); err != nil {
		return err
	}

	return nil
}

func (m *Drive) validatePreserve(formats strfmt.Registry) error {

	if err := validate.Required("preserve", "body", m.Preserve); err != nil {
		return err
	}

	return nil
}

func (m *Drive) validateReadonly(formats strfmt.Registry) error {

	if err := validate.Required("readonly", "body", m.Readonly); err != nil {
		return err
	}

	return nil
}

func (m *Drive) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this drive based on context it is used
func (m *Drive) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Drive) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Drive) UnmarshalBinary(b []byte) error {
	var res Drive
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
