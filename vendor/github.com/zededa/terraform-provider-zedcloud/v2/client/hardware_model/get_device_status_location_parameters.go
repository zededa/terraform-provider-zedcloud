// Code generated by go-swagger; DO NOT EDIT.

package hardware_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewHardwareModelGetDeviceStatusLocationParams creates a new HardwareModelGetDeviceStatusLocationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHardwareModelGetDeviceStatusLocationParams() *HardwareModelGetDeviceStatusLocationParams {
	return &HardwareModelGetDeviceStatusLocationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHardwareModelGetDeviceStatusLocationParamsWithTimeout creates a new HardwareModelGetDeviceStatusLocationParams object
// with the ability to set a timeout on a request.
func NewHardwareModelGetDeviceStatusLocationParamsWithTimeout(timeout time.Duration) *HardwareModelGetDeviceStatusLocationParams {
	return &HardwareModelGetDeviceStatusLocationParams{
		timeout: timeout,
	}
}

// NewHardwareModelGetDeviceStatusLocationParamsWithContext creates a new HardwareModelGetDeviceStatusLocationParams object
// with the ability to set a context for a request.
func NewHardwareModelGetDeviceStatusLocationParamsWithContext(ctx context.Context) *HardwareModelGetDeviceStatusLocationParams {
	return &HardwareModelGetDeviceStatusLocationParams{
		Context: ctx,
	}
}

// NewHardwareModelGetDeviceStatusLocationParamsWithHTTPClient creates a new HardwareModelGetDeviceStatusLocationParams object
// with the ability to set a custom HTTPClient for a request.
func NewHardwareModelGetDeviceStatusLocationParamsWithHTTPClient(client *http.Client) *HardwareModelGetDeviceStatusLocationParams {
	return &HardwareModelGetDeviceStatusLocationParams{
		HTTPClient: client,
	}
}

/*
HardwareModelGetDeviceStatusLocationParams contains all the parameters to send to the API endpoint

	for the hardware model get device status location operation.

	Typically these are written to a http.Request.
*/
type HardwareModelGetDeviceStatusLocationParams struct {

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	// DeviceName.
	DeviceName *string

	/* Fields.

	   Fields to select for composite api: id, name, title, serialNo, projectId, projectName, isEveLatest, appInstCount, runState, adminState.
	*/
	Fields []string

	// Load.
	//
	// Default: "DEVICE_LOAD_UNSPECIFIED"
	Load *string

	// NamePattern.
	NamePattern *string

	/* NextOrderBy.

	   OrderBy helps in sorting the list response
	*/
	NextOrderBy []string

	/* NextPageNum.

	   Page Number

	   Format: int64
	*/
	NextPageNum *int64

	/* NextPageSize.

	   Defines the page size

	   Format: int64
	*/
	NextPageSize *int64

	/* NextPageToken.

	   Page Token
	*/
	NextPageToken *string

	/* NextTotalPages.

	   Total number of pages to be fetched.

	   Format: int64
	*/
	NextTotalPages *int64

	// ProjectName.
	ProjectName *string

	// ProjectNamePattern.
	ProjectNamePattern *string

	/* RunState.

	     - RUN_STATE_ONLINE: Entity Online
	- RUN_STATE_HALTED: Entity Halted
	- RUN_STATE_INIT: Entity Initializing
	- RUN_STATE_REBOOTING: Entity Rebooting
	- RUN_STATE_OFFLINE: Entity Offline
	- RUN_STATE_UNKNOWN: Entity state Unknown
	- RUN_STATE_UNPROVISIONED: Entity Unprovisioned
	- RUN_STATE_PROVISIONED: Entity Provisioned
	- RUN_STATE_SUSPECT: Entity Suspect
	- RUN_STATE_DOWNLOADING: Edge-node downloading entity artifacts
	- RUN_STATE_RESTARTING: Entity Restarting
	- RUN_STATE_PURGING: Entity Purging
	- RUN_STATE_HALTING: Entity Halting
	- RUN_STATE_ERROR: Entity encountered an error
	- RUN_STATE_VERIFYING: Verification of downloaded Artifacts in Progress.
	- RUN_STATE_LOADING: Loading of Artifacts into local datastore in Progress.
	- RUN_STATE_CREATING_VOLUME: Volume creation from artifacts in Progress
	- RUN_STATE_BOOTING: Entity booting up
	- RUN_STATE_MAINTENANCE_MODE: Entity maintenance mode
	- RUN_STATE_START_DELAYED: Application start delayed as per configuration
	- RUN_STATE_BASEOS_UPDATING: Device BaseOs Update in Progress
	- RUN_STATE_PREPARING_POWEROFF: device preparing power off - shutting down all app instances
	- RUN_STATE_POWERING_OFF: device powering off from local profile server
	- RUN_STATE_PREPARED_POWEROFF: device prepared power off - all app instances are shut down

	    Default: "RUN_STATE_UNSPECIFIED"
	*/
	RunState *string

	// Summary.
	Summary *bool

	// Tags.
	Tags *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the hardware model get device status location params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HardwareModelGetDeviceStatusLocationParams) WithDefaults() *HardwareModelGetDeviceStatusLocationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the hardware model get device status location params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HardwareModelGetDeviceStatusLocationParams) SetDefaults() {
	var (
		loadDefault = string("DEVICE_LOAD_UNSPECIFIED")

		runStateDefault = string("RUN_STATE_UNSPECIFIED")
	)

	val := HardwareModelGetDeviceStatusLocationParams{
		Load:     &loadDefault,
		RunState: &runStateDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithTimeout(timeout time.Duration) *HardwareModelGetDeviceStatusLocationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithContext(ctx context.Context) *HardwareModelGetDeviceStatusLocationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithHTTPClient(client *http.Client) *HardwareModelGetDeviceStatusLocationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithXRequestID(xRequestID *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithDeviceName adds the deviceName to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithDeviceName(deviceName *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetDeviceName(deviceName)
	return o
}

// SetDeviceName adds the deviceName to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetDeviceName(deviceName *string) {
	o.DeviceName = deviceName
}

// WithFields adds the fields to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithFields(fields []string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetFields(fields []string) {
	o.Fields = fields
}

// WithLoad adds the load to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithLoad(load *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetLoad(load)
	return o
}

// SetLoad adds the load to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetLoad(load *string) {
	o.Load = load
}

// WithNamePattern adds the namePattern to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithNamePattern(namePattern *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetNamePattern(namePattern)
	return o
}

// SetNamePattern adds the namePattern to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetNamePattern(namePattern *string) {
	o.NamePattern = namePattern
}

// WithNextOrderBy adds the nextOrderBy to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithNextOrderBy(nextOrderBy []string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetNextOrderBy(nextOrderBy)
	return o
}

// SetNextOrderBy adds the nextOrderBy to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetNextOrderBy(nextOrderBy []string) {
	o.NextOrderBy = nextOrderBy
}

// WithNextPageNum adds the nextPageNum to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithNextPageNum(nextPageNum *int64) *HardwareModelGetDeviceStatusLocationParams {
	o.SetNextPageNum(nextPageNum)
	return o
}

// SetNextPageNum adds the nextPageNum to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetNextPageNum(nextPageNum *int64) {
	o.NextPageNum = nextPageNum
}

// WithNextPageSize adds the nextPageSize to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithNextPageSize(nextPageSize *int64) *HardwareModelGetDeviceStatusLocationParams {
	o.SetNextPageSize(nextPageSize)
	return o
}

// SetNextPageSize adds the nextPageSize to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetNextPageSize(nextPageSize *int64) {
	o.NextPageSize = nextPageSize
}

// WithNextPageToken adds the nextPageToken to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithNextPageToken(nextPageToken *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetNextPageToken(nextPageToken)
	return o
}

// SetNextPageToken adds the nextPageToken to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetNextPageToken(nextPageToken *string) {
	o.NextPageToken = nextPageToken
}

// WithNextTotalPages adds the nextTotalPages to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithNextTotalPages(nextTotalPages *int64) *HardwareModelGetDeviceStatusLocationParams {
	o.SetNextTotalPages(nextTotalPages)
	return o
}

// SetNextTotalPages adds the nextTotalPages to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetNextTotalPages(nextTotalPages *int64) {
	o.NextTotalPages = nextTotalPages
}

// WithProjectName adds the projectName to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithProjectName(projectName *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetProjectName(projectName *string) {
	o.ProjectName = projectName
}

// WithProjectNamePattern adds the projectNamePattern to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithProjectNamePattern(projectNamePattern *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetProjectNamePattern(projectNamePattern)
	return o
}

// SetProjectNamePattern adds the projectNamePattern to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetProjectNamePattern(projectNamePattern *string) {
	o.ProjectNamePattern = projectNamePattern
}

// WithRunState adds the runState to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithRunState(runState *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetRunState(runState)
	return o
}

// SetRunState adds the runState to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetRunState(runState *string) {
	o.RunState = runState
}

// WithSummary adds the summary to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithSummary(summary *bool) *HardwareModelGetDeviceStatusLocationParams {
	o.SetSummary(summary)
	return o
}

// SetSummary adds the summary to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetSummary(summary *bool) {
	o.Summary = summary
}

// WithTags adds the tags to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) WithTags(tags *string) *HardwareModelGetDeviceStatusLocationParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the hardware model get device status location params
func (o *HardwareModelGetDeviceStatusLocationParams) SetTags(tags *string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *HardwareModelGetDeviceStatusLocationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.DeviceName != nil {

		// query param deviceName
		var qrDeviceName string

		if o.DeviceName != nil {
			qrDeviceName = *o.DeviceName
		}
		qDeviceName := qrDeviceName
		if qDeviceName != "" {

			if err := r.SetQueryParam("deviceName", qDeviceName); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// binding items for fields
		joinedFields := o.bindParamFields(reg)

		// query array param fields
		if err := r.SetQueryParam("fields", joinedFields...); err != nil {
			return err
		}
	}

	if o.Load != nil {

		// query param load
		var qrLoad string

		if o.Load != nil {
			qrLoad = *o.Load
		}
		qLoad := qrLoad
		if qLoad != "" {

			if err := r.SetQueryParam("load", qLoad); err != nil {
				return err
			}
		}
	}

	if o.NamePattern != nil {

		// query param namePattern
		var qrNamePattern string

		if o.NamePattern != nil {
			qrNamePattern = *o.NamePattern
		}
		qNamePattern := qrNamePattern
		if qNamePattern != "" {

			if err := r.SetQueryParam("namePattern", qNamePattern); err != nil {
				return err
			}
		}
	}

	if o.NextOrderBy != nil {

		// binding items for next.orderBy
		joinedNextOrderBy := o.bindParamNextOrderBy(reg)

		// query array param next.orderBy
		if err := r.SetQueryParam("next.orderBy", joinedNextOrderBy...); err != nil {
			return err
		}
	}

	if o.NextPageNum != nil {

		// query param next.pageNum
		var qrNextPageNum int64

		if o.NextPageNum != nil {
			qrNextPageNum = *o.NextPageNum
		}
		qNextPageNum := swag.FormatInt64(qrNextPageNum)
		if qNextPageNum != "" {

			if err := r.SetQueryParam("next.pageNum", qNextPageNum); err != nil {
				return err
			}
		}
	}

	if o.NextPageSize != nil {

		// query param next.pageSize
		var qrNextPageSize int64

		if o.NextPageSize != nil {
			qrNextPageSize = *o.NextPageSize
		}
		qNextPageSize := swag.FormatInt64(qrNextPageSize)
		if qNextPageSize != "" {

			if err := r.SetQueryParam("next.pageSize", qNextPageSize); err != nil {
				return err
			}
		}
	}

	if o.NextPageToken != nil {

		// query param next.pageToken
		var qrNextPageToken string

		if o.NextPageToken != nil {
			qrNextPageToken = *o.NextPageToken
		}
		qNextPageToken := qrNextPageToken
		if qNextPageToken != "" {

			if err := r.SetQueryParam("next.pageToken", qNextPageToken); err != nil {
				return err
			}
		}
	}

	if o.NextTotalPages != nil {

		// query param next.totalPages
		var qrNextTotalPages int64

		if o.NextTotalPages != nil {
			qrNextTotalPages = *o.NextTotalPages
		}
		qNextTotalPages := swag.FormatInt64(qrNextTotalPages)
		if qNextTotalPages != "" {

			if err := r.SetQueryParam("next.totalPages", qNextTotalPages); err != nil {
				return err
			}
		}
	}

	if o.ProjectName != nil {

		// query param projectName
		var qrProjectName string

		if o.ProjectName != nil {
			qrProjectName = *o.ProjectName
		}
		qProjectName := qrProjectName
		if qProjectName != "" {

			if err := r.SetQueryParam("projectName", qProjectName); err != nil {
				return err
			}
		}
	}

	if o.ProjectNamePattern != nil {

		// query param projectNamePattern
		var qrProjectNamePattern string

		if o.ProjectNamePattern != nil {
			qrProjectNamePattern = *o.ProjectNamePattern
		}
		qProjectNamePattern := qrProjectNamePattern
		if qProjectNamePattern != "" {

			if err := r.SetQueryParam("projectNamePattern", qProjectNamePattern); err != nil {
				return err
			}
		}
	}

	if o.RunState != nil {

		// query param runState
		var qrRunState string

		if o.RunState != nil {
			qrRunState = *o.RunState
		}
		qRunState := qrRunState
		if qRunState != "" {

			if err := r.SetQueryParam("runState", qRunState); err != nil {
				return err
			}
		}
	}

	if o.Summary != nil {

		// query param summary
		var qrSummary bool

		if o.Summary != nil {
			qrSummary = *o.Summary
		}
		qSummary := swag.FormatBool(qrSummary)
		if qSummary != "" {

			if err := r.SetQueryParam("summary", qSummary); err != nil {
				return err
			}
		}
	}

	if o.Tags != nil {

		// query param tags
		var qrTags string

		if o.Tags != nil {
			qrTags = *o.Tags
		}
		qTags := qrTags
		if qTags != "" {

			if err := r.SetQueryParam("tags", qTags); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamHardwareModelGetDeviceStatusLocation binds the parameter fields
func (o *HardwareModelGetDeviceStatusLocationParams) bindParamFields(formats strfmt.Registry) []string {
	fieldsIR := o.Fields

	var fieldsIC []string
	for _, fieldsIIR := range fieldsIR { // explode []string

		fieldsIIV := fieldsIIR // string as string
		fieldsIC = append(fieldsIC, fieldsIIV)
	}

	// items.CollectionFormat: "multi"
	fieldsIS := swag.JoinByFormat(fieldsIC, "multi")

	return fieldsIS
}

// bindParamHardwareModelGetDeviceStatusLocation binds the parameter next.orderBy
func (o *HardwareModelGetDeviceStatusLocationParams) bindParamNextOrderBy(formats strfmt.Registry) []string {
	nextOrderByIR := o.NextOrderBy

	var nextOrderByIC []string
	for _, nextOrderByIIR := range nextOrderByIR { // explode []string

		nextOrderByIIV := nextOrderByIIR // string as string
		nextOrderByIC = append(nextOrderByIC, nextOrderByIIV)
	}

	// items.CollectionFormat: "multi"
	nextOrderByIS := swag.JoinByFormat(nextOrderByIC, "multi")

	return nextOrderByIS
}
