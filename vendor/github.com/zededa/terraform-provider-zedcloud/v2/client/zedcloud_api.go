package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/hashicorp/go-retryablehttp"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/app_profile_service"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/application"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/application_instance"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/asset_group_service"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/cluster"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/datastore"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/deployment"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/hardware_model"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/identity_access_management"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/image"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/network"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/network_instance"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/node"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/patch_envelope"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/profile_deployment_service"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/projects"
	"github.com/zededa/terraform-provider-zedcloud/v2/client/volume_instance"
)

// Default zedcloudapi HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new zedcloudapi HTTP client.
func NewHTTPClient(formats strfmt.Registry) *ZedcloudAPI {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new zedcloudapi HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *ZedcloudAPI {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	retryClient := retryablehttp.NewClient()
	retryClient.RetryMax = 10
	transport := httptransport.NewWithClient(cfg.Host, cfg.BasePath, cfg.Schemes, retryClient.StandardClient())
	return New(transport, formats)
}

// New creates a new zedcloudapi client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *ZedcloudAPI {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(ZedcloudAPI)
	cli.Transport = transport
	cli.Node = node.New(transport, formats)
	cli.HardwareModel = hardware_model.New(transport, formats)
	cli.Network = network.New(transport, formats)
	cli.NetworkInstance = network_instance.New(transport, formats)
	cli.Image = image.New(transport, formats)
	cli.Datastore = datastore.New(transport, formats)
	cli.VolumeInstance = volume_instance.New(transport, formats)
	cli.Application = application.New(transport, formats)
	cli.ApplicationInstance = application_instance.New(transport, formats)
	cli.Project = projects.New(transport, formats)
	cli.IdentityAccessManagement = identity_access_management.New(transport, formats)
	cli.PatchEnvelope = patch_envelope.New(transport, formats)
	cli.Deployment = deployment.New(transport, formats)
	cli.Cluster = cluster.New(transport, formats)
	cli.AppProfile = app_profile_service.New(transport, formats)
	cli.AssetGroup = asset_group_service.New(transport, formats)
	cli.ProfileDeployment = profile_deployment_service.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// ZedcloudAPI is a client for zedcloudapi
type ZedcloudAPI struct {
	Node node.ClientService

	HardwareModel hardware_model.ClientService

	Network network.ClientService

	NetworkInstance network_instance.ClientService

	Image image.ClientService

	Datastore datastore.ClientService

	VolumeInstance volume_instance.ClientService

	Application application.ClientService

	ApplicationInstance application_instance.ClientService

	Project projects.ClientService

	Transport runtime.ClientTransport

	IdentityAccessManagement identity_access_management.ClientService

	PatchEnvelope patch_envelope.ClientService

	Deployment deployment.ClientService

	Cluster cluster.ClientService

	AppProfile app_profile_service.ClientService

	AssetGroup asset_group_service.ClientService

	ProfileDeployment profile_deployment_service.ClientService
}

// SetTransport changes the transport on the client and all its subresources
func (c *ZedcloudAPI) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Node.SetTransport(transport)
	c.Cluster.SetTransport(transport)
	c.HardwareModel.SetTransport(transport)
	c.Network.SetTransport(transport)
	c.NetworkInstance.SetTransport(transport)
	c.Image.SetTransport(transport)
	c.Datastore.SetTransport(transport)
	c.Application.SetTransport(transport)
	c.ApplicationInstance.SetTransport(transport)
	c.Project.SetTransport(transport)

	c.IdentityAccessManagement.SetTransport(transport)

	c.PatchEnvelope.SetTransport(transport)

	c.Deployment.SetTransport(transport)

	c.AppProfile.SetTransport(transport)

	c.AssetGroup.SetTransport(transport)

	c.ProfileDeployment.SetTransport(transport)
}
