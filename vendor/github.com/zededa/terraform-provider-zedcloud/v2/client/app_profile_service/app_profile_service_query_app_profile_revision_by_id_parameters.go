// Code generated by go-swagger; DO NOT EDIT.

package app_profile_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAppProfileServiceQueryAppProfileRevisionByIDParams creates a new AppProfileServiceQueryAppProfileRevisionByIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAppProfileServiceQueryAppProfileRevisionByIDParams() *AppProfileServiceQueryAppProfileRevisionByIDParams {
	return &AppProfileServiceQueryAppProfileRevisionByIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAppProfileServiceQueryAppProfileRevisionByIDParamsWithTimeout creates a new AppProfileServiceQueryAppProfileRevisionByIDParams object
// with the ability to set a timeout on a request.
func NewAppProfileServiceQueryAppProfileRevisionByIDParamsWithTimeout(timeout time.Duration) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	return &AppProfileServiceQueryAppProfileRevisionByIDParams{
		timeout: timeout,
	}
}

// NewAppProfileServiceQueryAppProfileRevisionByIDParamsWithContext creates a new AppProfileServiceQueryAppProfileRevisionByIDParams object
// with the ability to set a context for a request.
func NewAppProfileServiceQueryAppProfileRevisionByIDParamsWithContext(ctx context.Context) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	return &AppProfileServiceQueryAppProfileRevisionByIDParams{
		Context: ctx,
	}
}

// NewAppProfileServiceQueryAppProfileRevisionByIDParamsWithHTTPClient creates a new AppProfileServiceQueryAppProfileRevisionByIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewAppProfileServiceQueryAppProfileRevisionByIDParamsWithHTTPClient(client *http.Client) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	return &AppProfileServiceQueryAppProfileRevisionByIDParams{
		HTTPClient: client,
	}
}

/*
AppProfileServiceQueryAppProfileRevisionByIDParams contains all the parameters to send to the API endpoint

	for the app profile service query app profile revision by Id operation.

	Typically these are written to a http.Request.
*/
type AppProfileServiceQueryAppProfileRevisionByIDParams struct {

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	/* ID.

	   unique id for an App profile
	*/
	ID string

	/* Name.

	   user defined name for the App profile
	*/
	Name *string

	/* NextOrderBy.

	   OrderBy helps in sorting the list response
	*/
	NextOrderBy []string

	/* NextPageNum.

	   Page Number

	   Format: int64
	*/
	NextPageNum *int64

	/* NextPageSize.

	   Defines the page size

	   Format: int64
	*/
	NextPageSize *int64

	/* NextPageToken.

	   Page Token
	*/
	NextPageToken *string

	/* NextTotalPages.

	   Total number of pages to be fetched.

	   Format: int64
	*/
	NextTotalPages *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the app profile service query app profile revision by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithDefaults() *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the app profile service query app profile revision by Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithTimeout(timeout time.Duration) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithContext(ctx context.Context) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithHTTPClient(client *http.Client) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithXRequestID(xRequestID *string) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithID adds the id to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithID(id string) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetID(id string) {
	o.ID = id
}

// WithName adds the name to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithName(name *string) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetName(name *string) {
	o.Name = name
}

// WithNextOrderBy adds the nextOrderBy to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithNextOrderBy(nextOrderBy []string) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetNextOrderBy(nextOrderBy)
	return o
}

// SetNextOrderBy adds the nextOrderBy to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetNextOrderBy(nextOrderBy []string) {
	o.NextOrderBy = nextOrderBy
}

// WithNextPageNum adds the nextPageNum to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithNextPageNum(nextPageNum *int64) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetNextPageNum(nextPageNum)
	return o
}

// SetNextPageNum adds the nextPageNum to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetNextPageNum(nextPageNum *int64) {
	o.NextPageNum = nextPageNum
}

// WithNextPageSize adds the nextPageSize to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithNextPageSize(nextPageSize *int64) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetNextPageSize(nextPageSize)
	return o
}

// SetNextPageSize adds the nextPageSize to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetNextPageSize(nextPageSize *int64) {
	o.NextPageSize = nextPageSize
}

// WithNextPageToken adds the nextPageToken to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithNextPageToken(nextPageToken *string) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetNextPageToken(nextPageToken)
	return o
}

// SetNextPageToken adds the nextPageToken to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetNextPageToken(nextPageToken *string) {
	o.NextPageToken = nextPageToken
}

// WithNextTotalPages adds the nextTotalPages to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WithNextTotalPages(nextTotalPages *int64) *AppProfileServiceQueryAppProfileRevisionByIDParams {
	o.SetNextTotalPages(nextTotalPages)
	return o
}

// SetNextTotalPages adds the nextTotalPages to the app profile service query app profile revision by Id params
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) SetNextTotalPages(nextTotalPages *int64) {
	o.NextTotalPages = nextTotalPages
}

// WriteToRequest writes these params to a swagger request
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NextOrderBy != nil {

		// binding items for next.orderBy
		joinedNextOrderBy := o.bindParamNextOrderBy(reg)

		// query array param next.orderBy
		if err := r.SetQueryParam("next.orderBy", joinedNextOrderBy...); err != nil {
			return err
		}
	}

	if o.NextPageNum != nil {

		// query param next.pageNum
		var qrNextPageNum int64

		if o.NextPageNum != nil {
			qrNextPageNum = *o.NextPageNum
		}
		qNextPageNum := swag.FormatInt64(qrNextPageNum)
		if qNextPageNum != "" {

			if err := r.SetQueryParam("next.pageNum", qNextPageNum); err != nil {
				return err
			}
		}
	}

	if o.NextPageSize != nil {

		// query param next.pageSize
		var qrNextPageSize int64

		if o.NextPageSize != nil {
			qrNextPageSize = *o.NextPageSize
		}
		qNextPageSize := swag.FormatInt64(qrNextPageSize)
		if qNextPageSize != "" {

			if err := r.SetQueryParam("next.pageSize", qNextPageSize); err != nil {
				return err
			}
		}
	}

	if o.NextPageToken != nil {

		// query param next.pageToken
		var qrNextPageToken string

		if o.NextPageToken != nil {
			qrNextPageToken = *o.NextPageToken
		}
		qNextPageToken := qrNextPageToken
		if qNextPageToken != "" {

			if err := r.SetQueryParam("next.pageToken", qNextPageToken); err != nil {
				return err
			}
		}
	}

	if o.NextTotalPages != nil {

		// query param next.totalPages
		var qrNextTotalPages int64

		if o.NextTotalPages != nil {
			qrNextTotalPages = *o.NextTotalPages
		}
		qNextTotalPages := swag.FormatInt64(qrNextTotalPages)
		if qNextTotalPages != "" {

			if err := r.SetQueryParam("next.totalPages", qNextTotalPages); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamAppProfileServiceQueryAppProfileRevisionByID binds the parameter next.orderBy
func (o *AppProfileServiceQueryAppProfileRevisionByIDParams) bindParamNextOrderBy(formats strfmt.Registry) []string {
	nextOrderByIR := o.NextOrderBy

	var nextOrderByIC []string
	for _, nextOrderByIIR := range nextOrderByIR { // explode []string

		nextOrderByIIV := nextOrderByIIR // string as string
		nextOrderByIC = append(nextOrderByIC, nextOrderByIIV)
	}

	// items.CollectionFormat: "multi"
	nextOrderByIS := swag.JoinByFormat(nextOrderByIC, "multi")

	return nextOrderByIS
}
