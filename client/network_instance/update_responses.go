package network_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceReader is a Reader for the EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstance structure.
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK creates a EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK with default headers values
func NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK() *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK {
	return &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK{}
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK describes a response with status code 200, with default header values.

A successful response.
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge network instance configuration update edge network instance o k response has a 2xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edge network instance configuration update edge network instance o k response has a 3xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge network instance configuration update edge network instance o k response has a 4xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge network instance configuration update edge network instance o k response has a 5xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this edge network instance configuration update edge network instance o k response a status code equal to that given
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the edge network instance configuration update edge network instance o k response
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) Code() int {
	return 200
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK  %+v", 200, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) String() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK  %+v", 200, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized creates a EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized with default headers values
func NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized() *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized {
	return &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized{}
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge network instance configuration update edge network instance unauthorized response has a 2xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge network instance configuration update edge network instance unauthorized response has a 3xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge network instance configuration update edge network instance unauthorized response has a 4xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge network instance configuration update edge network instance unauthorized response has a 5xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this edge network instance configuration update edge network instance unauthorized response a status code equal to that given
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the edge network instance configuration update edge network instance unauthorized response
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) Code() int {
	return 401
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized  %+v", 401, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized  %+v", 401, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden creates a EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden with default headers values
func NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden() *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden {
	return &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden{}
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge network instance configuration update edge network instance forbidden response has a 2xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge network instance configuration update edge network instance forbidden response has a 3xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge network instance configuration update edge network instance forbidden response has a 4xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge network instance configuration update edge network instance forbidden response has a 5xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this edge network instance configuration update edge network instance forbidden response a status code equal to that given
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the edge network instance configuration update edge network instance forbidden response
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) Code() int {
	return 403
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden  %+v", 403, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden  %+v", 403, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound creates a EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound with default headers values
func NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound() *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound {
	return &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound{}
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge network instance configuration update edge network instance not found response has a 2xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge network instance configuration update edge network instance not found response has a 3xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge network instance configuration update edge network instance not found response has a 4xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge network instance configuration update edge network instance not found response has a 5xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this edge network instance configuration update edge network instance not found response a status code equal to that given
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the edge network instance configuration update edge network instance not found response
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) Code() int {
	return 404
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound  %+v", 404, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound  %+v", 404, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict creates a EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict with default headers values
func NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict() *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict {
	return &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict{}
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge network record.
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge network instance configuration update edge network instance conflict response has a 2xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge network instance configuration update edge network instance conflict response has a 3xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge network instance configuration update edge network instance conflict response has a 4xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge network instance configuration update edge network instance conflict response has a 5xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this edge network instance configuration update edge network instance conflict response a status code equal to that given
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the edge network instance configuration update edge network instance conflict response
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) Code() int {
	return 409
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict  %+v", 409, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) String() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict  %+v", 409, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError creates a EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError with default headers values
func NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError() *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError {
	return &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError{}
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge network instance configuration update edge network instance internal server error response has a 2xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge network instance configuration update edge network instance internal server error response has a 3xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge network instance configuration update edge network instance internal server error response has a 4xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge network instance configuration update edge network instance internal server error response has a 5xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this edge network instance configuration update edge network instance internal server error response a status code equal to that given
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the edge network instance configuration update edge network instance internal server error response
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) Code() int {
	return 500
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError  %+v", 500, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError  %+v", 500, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout creates a EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout with default headers values
func NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout() *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout {
	return &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout{}
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge network instance configuration update edge network instance gateway timeout response has a 2xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge network instance configuration update edge network instance gateway timeout response has a 3xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge network instance configuration update edge network instance gateway timeout response has a 4xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge network instance configuration update edge network instance gateway timeout response has a 5xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this edge network instance configuration update edge network instance gateway timeout response a status code equal to that given
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the edge network instance configuration update edge network instance gateway timeout response
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) Code() int {
	return 504
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] edgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault creates a EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault with default headers values
func NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault(code int) *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault {
	return &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault{
		_statusCode: code,
	}
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this edge network instance configuration update edge network instance default response has a 2xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this edge network instance configuration update edge network instance default response has a 3xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this edge network instance configuration update edge network instance default response has a 4xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this edge network instance configuration update edge network instance default response has a 5xx status code
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this edge network instance configuration update edge network instance default response a status code equal to that given
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the edge network instance configuration update edge network instance default response
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) Code() int {
	return o._statusCode
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] EdgeNetworkInstanceConfiguration_UpdateEdgeNetworkInstance default  %+v", o._statusCode, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) String() string {
	return fmt.Sprintf("[PUT /v1/netinsts/id/{id}][%d] EdgeNetworkInstanceConfiguration_UpdateEdgeNetworkInstance default  %+v", o._statusCode, o.Payload)
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody Network instance detailed configuration
//
// Network instance provides Edge applications a variety of connectivity choices for all types of networks. This enables logical secure connectivity between Edge applications within a single Edge node and within a logical group of Edge nodes. This provides detailed configuration of a Network instance.
// Example: {"id":"d85a545f-6510-4327-b03d-c02eef119e99","name":"sample-app"}
swagger:model EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody
*/
type EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody struct {

	// id of the Cluster in which the network instance is configured
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ClusterID string `json:"clusterID,omitempty"`

	// Detailed description of the network instance
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// flag to indicate if this is default network
	//
	// flag to indicate if this is the default network instance for the device
	DeviceDefault string `json:"deviceDefault,omitempty"`

	// device on which this network is running
	//
	// id of the device on which network instance is created
	// Required: true
	DeviceID *string `json:"deviceId"`

	// dhcp - DEPRECATED
	//
	// Deprecated
	Dhcp bool `json:"dhcp,omitempty"`

	// List of Static DNS entries
	DNSList []*models.StaticDNSList `json:"dnsList"`

	// Dhcp Server Configuration
	IP *models.DhcpServerConfig `json:"ip,omitempty"`

	// Kind of Network Instance ( Local, Switch etc )
	// Required: true
	Kind *models.NetworkInstanceKind `json:"kind"`

	// Lisp Config : read only for now. Deprecated.
	Lisp *models.LispConfig `json:"lisp,omitempty"`

	// User defined name of the network instance, unique across the enterprise. Once object is created, name can’t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// id of the network policy to be attached to this network instance
	NetworkPolicyID string `json:"networkPolicyId,omitempty"`

	// Deprecated
	Oconfig string `json:"oconfig,omitempty"`

	// Service specific Config
	Opaque *models.NetInstOpaqueConfig `json:"opaque,omitempty"`

	// name of port mapping in the model
	//
	// name of port mapping in the model
	// Required: true
	Port *string `json:"port"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	PortTags map[string]string `json:"portTags,omitempty"`

	// id of the project in which network instance is created
	ProjectID string `json:"projectId,omitempty"`

	// system defined info for the object
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// User defined title of the network instance. Title can be changed at any time
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: ^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$
	Title *string `json:"title"`

	// Type of DHCP for this Network Instance
	Type *models.NetworkInstanceDhcpType `json:"type,omitempty"`
}

// Validate validates this edge network instance configuration update edge network instance body
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDNSList(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLisp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOpaque(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(o.ClusterID) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"clusterID", "body", o.ClusterID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"clusterID", "body", o.ClusterID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"clusterID", "body", o.ClusterID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"deviceId", "body", o.DeviceID); err != nil {
		return err
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateDNSList(formats strfmt.Registry) error {
	if swag.IsZero(o.DNSList) { // not required
		return nil
	}

	for i := 0; i < len(o.DNSList); i++ {
		if swag.IsZero(o.DNSList[i]) { // not required
			continue
		}

		if o.DNSList[i] != nil {
			if err := o.DNSList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "dnsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "dnsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateIP(formats strfmt.Registry) error {
	if swag.IsZero(o.IP) { // not required
		return nil
	}

	if o.IP != nil {
		if err := o.IP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "ip")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"kind", "body", o.Kind); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"kind", "body", o.Kind); err != nil {
		return err
	}

	if o.Kind != nil {
		if err := o.Kind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "kind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "kind")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateLisp(formats strfmt.Registry) error {
	if swag.IsZero(o.Lisp) { // not required
		return nil
	}

	if o.Lisp != nil {
		if err := o.Lisp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "lisp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "lisp")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateOpaque(formats strfmt.Registry) error {
	if swag.IsZero(o.Opaque) { // not required
		return nil
	}

	if o.Opaque != nil {
		if err := o.Opaque.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "opaque")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "opaque")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"port", "body", o.Port); err != nil {
		return err
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$`); err != nil {
		return err
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this edge network instance configuration update edge network instance body based on the context it is used
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDNSList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLisp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOpaque(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) contextValidateDNSList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DNSList); i++ {

		if o.DNSList[i] != nil {
			if err := o.DNSList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "dnsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "dnsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) contextValidateIP(ctx context.Context, formats strfmt.Registry) error {

	if o.IP != nil {
		if err := o.IP.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "ip")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "ip")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if o.Kind != nil {
		if err := o.Kind.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "kind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "kind")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) contextValidateLisp(ctx context.Context, formats strfmt.Registry) error {

	if o.Lisp != nil {
		if err := o.Lisp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "lisp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "lisp")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) contextValidateOpaque(ctx context.Context, formats strfmt.Registry) error {

	if o.Opaque != nil {
		if err := o.Opaque.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "opaque")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "opaque")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {
		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {
		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody) UnmarshalBinary(b []byte) error {
	var res EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
