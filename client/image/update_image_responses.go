package image

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// ImageConfigurationUpdateImageReader is a Reader for the ImageConfigurationUpdateImage structure.
type ImageConfigurationUpdateImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImageConfigurationUpdateImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImageConfigurationUpdateImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImageConfigurationUpdateImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewImageConfigurationUpdateImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewImageConfigurationUpdateImageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImageConfigurationUpdateImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewImageConfigurationUpdateImageConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewImageConfigurationUpdateImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewImageConfigurationUpdateImageGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewImageConfigurationUpdateImageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewImageConfigurationUpdateImageOK creates a ImageConfigurationUpdateImageOK with default headers values
func NewImageConfigurationUpdateImageOK() *ImageConfigurationUpdateImageOK {
	return &ImageConfigurationUpdateImageOK{}
}

/*
ImageConfigurationUpdateImageOK describes a response with status code 200, with default header values.

A successful response.
*/
type ImageConfigurationUpdateImageOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this image configuration update image o k response has a 2xx status code
func (o *ImageConfigurationUpdateImageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this image configuration update image o k response has a 3xx status code
func (o *ImageConfigurationUpdateImageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this image configuration update image o k response has a 4xx status code
func (o *ImageConfigurationUpdateImageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this image configuration update image o k response has a 5xx status code
func (o *ImageConfigurationUpdateImageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this image configuration update image o k response a status code equal to that given
func (o *ImageConfigurationUpdateImageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the image configuration update image o k response
func (o *ImageConfigurationUpdateImageOK) Code() int {
	return 200
}

func (o *ImageConfigurationUpdateImageOK) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageOK  %+v", 200, o.Payload)
}

func (o *ImageConfigurationUpdateImageOK) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageOK  %+v", 200, o.Payload)
}

func (o *ImageConfigurationUpdateImageOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageConfigurationUpdateImageBadRequest creates a ImageConfigurationUpdateImageBadRequest with default headers values
func NewImageConfigurationUpdateImageBadRequest() *ImageConfigurationUpdateImageBadRequest {
	return &ImageConfigurationUpdateImageBadRequest{}
}

/*
ImageConfigurationUpdateImageBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type ImageConfigurationUpdateImageBadRequest struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this image configuration update image bad request response has a 2xx status code
func (o *ImageConfigurationUpdateImageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this image configuration update image bad request response has a 3xx status code
func (o *ImageConfigurationUpdateImageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this image configuration update image bad request response has a 4xx status code
func (o *ImageConfigurationUpdateImageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this image configuration update image bad request response has a 5xx status code
func (o *ImageConfigurationUpdateImageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this image configuration update image bad request response a status code equal to that given
func (o *ImageConfigurationUpdateImageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the image configuration update image bad request response
func (o *ImageConfigurationUpdateImageBadRequest) Code() int {
	return 400
}

func (o *ImageConfigurationUpdateImageBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageBadRequest  %+v", 400, o.Payload)
}

func (o *ImageConfigurationUpdateImageBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageBadRequest  %+v", 400, o.Payload)
}

func (o *ImageConfigurationUpdateImageBadRequest) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageConfigurationUpdateImageUnauthorized creates a ImageConfigurationUpdateImageUnauthorized with default headers values
func NewImageConfigurationUpdateImageUnauthorized() *ImageConfigurationUpdateImageUnauthorized {
	return &ImageConfigurationUpdateImageUnauthorized{}
}

/*
ImageConfigurationUpdateImageUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type ImageConfigurationUpdateImageUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this image configuration update image unauthorized response has a 2xx status code
func (o *ImageConfigurationUpdateImageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this image configuration update image unauthorized response has a 3xx status code
func (o *ImageConfigurationUpdateImageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this image configuration update image unauthorized response has a 4xx status code
func (o *ImageConfigurationUpdateImageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this image configuration update image unauthorized response has a 5xx status code
func (o *ImageConfigurationUpdateImageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this image configuration update image unauthorized response a status code equal to that given
func (o *ImageConfigurationUpdateImageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the image configuration update image unauthorized response
func (o *ImageConfigurationUpdateImageUnauthorized) Code() int {
	return 401
}

func (o *ImageConfigurationUpdateImageUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageUnauthorized  %+v", 401, o.Payload)
}

func (o *ImageConfigurationUpdateImageUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageUnauthorized  %+v", 401, o.Payload)
}

func (o *ImageConfigurationUpdateImageUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageConfigurationUpdateImageForbidden creates a ImageConfigurationUpdateImageForbidden with default headers values
func NewImageConfigurationUpdateImageForbidden() *ImageConfigurationUpdateImageForbidden {
	return &ImageConfigurationUpdateImageForbidden{}
}

/*
ImageConfigurationUpdateImageForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type ImageConfigurationUpdateImageForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this image configuration update image forbidden response has a 2xx status code
func (o *ImageConfigurationUpdateImageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this image configuration update image forbidden response has a 3xx status code
func (o *ImageConfigurationUpdateImageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this image configuration update image forbidden response has a 4xx status code
func (o *ImageConfigurationUpdateImageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this image configuration update image forbidden response has a 5xx status code
func (o *ImageConfigurationUpdateImageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this image configuration update image forbidden response a status code equal to that given
func (o *ImageConfigurationUpdateImageForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the image configuration update image forbidden response
func (o *ImageConfigurationUpdateImageForbidden) Code() int {
	return 403
}

func (o *ImageConfigurationUpdateImageForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageForbidden  %+v", 403, o.Payload)
}

func (o *ImageConfigurationUpdateImageForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageForbidden  %+v", 403, o.Payload)
}

func (o *ImageConfigurationUpdateImageForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageConfigurationUpdateImageNotFound creates a ImageConfigurationUpdateImageNotFound with default headers values
func NewImageConfigurationUpdateImageNotFound() *ImageConfigurationUpdateImageNotFound {
	return &ImageConfigurationUpdateImageNotFound{}
}

/*
ImageConfigurationUpdateImageNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type ImageConfigurationUpdateImageNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this image configuration update image not found response has a 2xx status code
func (o *ImageConfigurationUpdateImageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this image configuration update image not found response has a 3xx status code
func (o *ImageConfigurationUpdateImageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this image configuration update image not found response has a 4xx status code
func (o *ImageConfigurationUpdateImageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this image configuration update image not found response has a 5xx status code
func (o *ImageConfigurationUpdateImageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this image configuration update image not found response a status code equal to that given
func (o *ImageConfigurationUpdateImageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the image configuration update image not found response
func (o *ImageConfigurationUpdateImageNotFound) Code() int {
	return 404
}

func (o *ImageConfigurationUpdateImageNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageNotFound  %+v", 404, o.Payload)
}

func (o *ImageConfigurationUpdateImageNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageNotFound  %+v", 404, o.Payload)
}

func (o *ImageConfigurationUpdateImageNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageConfigurationUpdateImageConflict creates a ImageConfigurationUpdateImageConflict with default headers values
func NewImageConfigurationUpdateImageConflict() *ImageConfigurationUpdateImageConflict {
	return &ImageConfigurationUpdateImageConflict{}
}

/*
ImageConfigurationUpdateImageConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge application image record.
*/
type ImageConfigurationUpdateImageConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this image configuration update image conflict response has a 2xx status code
func (o *ImageConfigurationUpdateImageConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this image configuration update image conflict response has a 3xx status code
func (o *ImageConfigurationUpdateImageConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this image configuration update image conflict response has a 4xx status code
func (o *ImageConfigurationUpdateImageConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this image configuration update image conflict response has a 5xx status code
func (o *ImageConfigurationUpdateImageConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this image configuration update image conflict response a status code equal to that given
func (o *ImageConfigurationUpdateImageConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the image configuration update image conflict response
func (o *ImageConfigurationUpdateImageConflict) Code() int {
	return 409
}

func (o *ImageConfigurationUpdateImageConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageConflict  %+v", 409, o.Payload)
}

func (o *ImageConfigurationUpdateImageConflict) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageConflict  %+v", 409, o.Payload)
}

func (o *ImageConfigurationUpdateImageConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageConfigurationUpdateImageInternalServerError creates a ImageConfigurationUpdateImageInternalServerError with default headers values
func NewImageConfigurationUpdateImageInternalServerError() *ImageConfigurationUpdateImageInternalServerError {
	return &ImageConfigurationUpdateImageInternalServerError{}
}

/*
ImageConfigurationUpdateImageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type ImageConfigurationUpdateImageInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this image configuration update image internal server error response has a 2xx status code
func (o *ImageConfigurationUpdateImageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this image configuration update image internal server error response has a 3xx status code
func (o *ImageConfigurationUpdateImageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this image configuration update image internal server error response has a 4xx status code
func (o *ImageConfigurationUpdateImageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this image configuration update image internal server error response has a 5xx status code
func (o *ImageConfigurationUpdateImageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this image configuration update image internal server error response a status code equal to that given
func (o *ImageConfigurationUpdateImageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the image configuration update image internal server error response
func (o *ImageConfigurationUpdateImageInternalServerError) Code() int {
	return 500
}

func (o *ImageConfigurationUpdateImageInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageInternalServerError  %+v", 500, o.Payload)
}

func (o *ImageConfigurationUpdateImageInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageInternalServerError  %+v", 500, o.Payload)
}

func (o *ImageConfigurationUpdateImageInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageConfigurationUpdateImageGatewayTimeout creates a ImageConfigurationUpdateImageGatewayTimeout with default headers values
func NewImageConfigurationUpdateImageGatewayTimeout() *ImageConfigurationUpdateImageGatewayTimeout {
	return &ImageConfigurationUpdateImageGatewayTimeout{}
}

/*
ImageConfigurationUpdateImageGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type ImageConfigurationUpdateImageGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this image configuration update image gateway timeout response has a 2xx status code
func (o *ImageConfigurationUpdateImageGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this image configuration update image gateway timeout response has a 3xx status code
func (o *ImageConfigurationUpdateImageGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this image configuration update image gateway timeout response has a 4xx status code
func (o *ImageConfigurationUpdateImageGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this image configuration update image gateway timeout response has a 5xx status code
func (o *ImageConfigurationUpdateImageGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this image configuration update image gateway timeout response a status code equal to that given
func (o *ImageConfigurationUpdateImageGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the image configuration update image gateway timeout response
func (o *ImageConfigurationUpdateImageGatewayTimeout) Code() int {
	return 504
}

func (o *ImageConfigurationUpdateImageGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *ImageConfigurationUpdateImageGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] imageConfigurationUpdateImageGatewayTimeout  %+v", 504, o.Payload)
}

func (o *ImageConfigurationUpdateImageGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImageConfigurationUpdateImageDefault creates a ImageConfigurationUpdateImageDefault with default headers values
func NewImageConfigurationUpdateImageDefault(code int) *ImageConfigurationUpdateImageDefault {
	return &ImageConfigurationUpdateImageDefault{
		_statusCode: code,
	}
}

/*
ImageConfigurationUpdateImageDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ImageConfigurationUpdateImageDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this image configuration update image default response has a 2xx status code
func (o *ImageConfigurationUpdateImageDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this image configuration update image default response has a 3xx status code
func (o *ImageConfigurationUpdateImageDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this image configuration update image default response has a 4xx status code
func (o *ImageConfigurationUpdateImageDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this image configuration update image default response has a 5xx status code
func (o *ImageConfigurationUpdateImageDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this image configuration update image default response a status code equal to that given
func (o *ImageConfigurationUpdateImageDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the image configuration update image default response
func (o *ImageConfigurationUpdateImageDefault) Code() int {
	return o._statusCode
}

func (o *ImageConfigurationUpdateImageDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] ImageConfiguration_UpdateImage default  %+v", o._statusCode, o.Payload)
}

func (o *ImageConfigurationUpdateImageDefault) String() string {
	return fmt.Sprintf("[PUT /v1/apps/images/id/{id}][%d] ImageConfiguration_UpdateImage default  %+v", o._statusCode, o.Payload)
}

func (o *ImageConfigurationUpdateImageDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *ImageConfigurationUpdateImageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ImageConfigurationUpdateImageBody Image metadata detail
//
// Image metadata for edge gateway Base OS or for eedge applications.
// Example: {"description":"My test image in QCOW2 format for Edge computing","dsId":"7927f6e3-484d-4105-a98e-868b21c1cb61","id":"d1125b0f-633d-459c-99c6-f47e7467cebc","imageArch":"AMD64","imageError":"Image uplinked successfully...","imageFormat":3,"imageLocal":"","imageRelUrl":"edge/computing/AMD64","imageSha256":"ADC5BB9DD39F83DD74C276B0BA119FB27925A5CDEA343FE1F2C8433F28AB345B","imageSizeBytes":142016512,"imageStatus":4,"imageType":2,"imageVersion":"","name":"my-test-image","originType":2,"revision":{"createdAt":{"seconds":1592068270},"createdBy":"admin@my-company.com","curr":"1","updatedAt":{"seconds":1592068271},"updatedBy":"admin@my-company.com"},"title":"My Test Image for Edge Computing"}
swagger:model ImageConfigurationUpdateImageBody
*/
type ImageConfigurationUpdateImageBody struct {

	// Datastore Id where image binary is located.
	// Required: true
	// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
	DatastoreID *string `json:"datastoreId"`

	// Detailed description of the image.
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// Image Architecture.
	// Required: true
	ImageArch *models.ModelArchType `json:"imageArch"`

	// Image upload/uplink detailed error/status message
	// Read Only: true
	ImageError string `json:"imageError,omitempty"`

	// Image binary format.
	// Required: true
	ImageFormat *models.ConfigFormat `json:"imageFormat"`

	// Internal image location.
	// Read Only: true
	ImageLocal string `json:"imageLocal,omitempty"`

	// Image relative path w.r.t. Datastore
	ImageRelURL string `json:"imageRelUrl,omitempty"`

	// Image checksum in SHA256 format
	ImageSha256 string `json:"imageSha256,omitempty"`

	// Image size in KBytes.
	ImageSizeBytes string `json:"imageSizeBytes,omitempty"`

	// Image status
	// Read Only: true
	ImageStatus *models.ImageStatus `json:"imageStatus,omitempty"`

	// Image type
	// Required: true
	ImageType *models.ImageType `json:"imageType"`

	// system defined info
	ImageVersion string `json:"imageVersion,omitempty"`

	// User defined name of the image, unique across the enterprise. Once image is created, name can’t be changed.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// Origin type of image.
	// Read Only: true
	OriginType *models.Origin `json:"originType,omitempty"`

	// project access list of the image
	ProjectAccessList []string `json:"projectAccessList"`

	// system defined info
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// User defined title of the image. Title can be changed at any time.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title *string `json:"title"`
}

// Validate validates this image configuration update image body
func (o *ImageConfigurationUpdateImageBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDatastoreID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImageArch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImageFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImageStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImageType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateDatastoreID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"datastoreId", "body", o.DatastoreID); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"datastoreId", "body", *o.DatastoreID, `[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}`); err != nil {
		return err
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateImageArch(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"imageArch", "body", o.ImageArch); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"imageArch", "body", o.ImageArch); err != nil {
		return err
	}

	if o.ImageArch != nil {
		if err := o.ImageArch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageArch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageArch")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateImageFormat(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"imageFormat", "body", o.ImageFormat); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"imageFormat", "body", o.ImageFormat); err != nil {
		return err
	}

	if o.ImageFormat != nil {
		if err := o.ImageFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageFormat")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateImageStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.ImageStatus) { // not required
		return nil
	}

	if o.ImageStatus != nil {
		if err := o.ImageStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageStatus")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateImageType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"imageType", "body", o.ImageType); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"imageType", "body", o.ImageType); err != nil {
		return err
	}

	if o.ImageType != nil {
		if err := o.ImageType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageType")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateOriginType(formats strfmt.Registry) error {
	if swag.IsZero(o.OriginType) { // not required
		return nil
	}

	if o.OriginType != nil {
		if err := o.OriginType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "originType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "originType")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this image configuration update image body based on the context it is used
func (o *ImageConfigurationUpdateImageBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateImageArch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateImageError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateImageFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateImageLocal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateImageStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateImageType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOriginType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ImageConfigurationUpdateImageBody) contextValidateImageArch(ctx context.Context, formats strfmt.Registry) error {

	if o.ImageArch != nil {
		if err := o.ImageArch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageArch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageArch")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) contextValidateImageError(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"imageError", "body", string(o.ImageError)); err != nil {
		return err
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) contextValidateImageFormat(ctx context.Context, formats strfmt.Registry) error {

	if o.ImageFormat != nil {
		if err := o.ImageFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageFormat")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) contextValidateImageLocal(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"imageLocal", "body", string(o.ImageLocal)); err != nil {
		return err
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) contextValidateImageStatus(ctx context.Context, formats strfmt.Registry) error {

	if o.ImageStatus != nil {
		if err := o.ImageStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageStatus")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) contextValidateImageType(ctx context.Context, formats strfmt.Registry) error {

	if o.ImageType != nil {
		if err := o.ImageType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageType")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) contextValidateOriginType(ctx context.Context, formats strfmt.Registry) error {

	if o.OriginType != nil {
		if err := o.OriginType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "originType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "originType")
			}
			return err
		}
	}

	return nil
}

func (o *ImageConfigurationUpdateImageBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {
		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ImageConfigurationUpdateImageBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ImageConfigurationUpdateImageBody) UnmarshalBinary(b []byte) error {
	var res ImageConfigurationUpdateImageBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
