// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new identity access management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for identity access management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	IdentityAccessManagementCreateAuthProfile(params *IdentityAccessManagementCreateAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateAuthProfileOK, error)

	IdentityAccessManagementCreateCredential(params *IdentityAccessManagementCreateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateCredentialOK, error)

	IdentityAccessManagementCreateDocPolicy(params *IdentityAccessManagementCreateDocPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateDocPolicyOK, error)

	IdentityAccessManagementCreateEnterprise(params *IdentityAccessManagementCreateEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateEnterpriseOK, error)

	IdentityAccessManagementCreateRealm(params *IdentityAccessManagementCreateRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateRealmOK, error)

	IdentityAccessManagementCreateRole(params *IdentityAccessManagementCreateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateRoleOK, error)

	IdentityAccessManagementCreateUser(params *IdentityAccessManagementCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateUserOK, error)

	IdentityAccessManagementCreateUserSessionSelf(params *IdentityAccessManagementCreateUserSessionSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateUserSessionSelfOK, error)

	IdentityAccessManagementDeleteAuthProfile(params *IdentityAccessManagementDeleteAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteAuthProfileOK, error)

	IdentityAccessManagementDeleteCredential(params *IdentityAccessManagementDeleteCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteCredentialOK, error)

	IdentityAccessManagementDeleteDocPolicy(params *IdentityAccessManagementDeleteDocPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteDocPolicyOK, error)

	IdentityAccessManagementDeleteEnterprise(params *IdentityAccessManagementDeleteEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteEnterpriseOK, error)

	IdentityAccessManagementDeleteRealm(params *IdentityAccessManagementDeleteRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteRealmOK, error)

	IdentityAccessManagementDeleteRole(params *IdentityAccessManagementDeleteRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteRoleOK, error)

	IdentityAccessManagementDeleteUser(params *IdentityAccessManagementDeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteUserOK, error)

	IdentityAccessManagementGetAuthProfile(params *IdentityAccessManagementGetAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetAuthProfileOK, error)

	IdentityAccessManagementGetAuthProfileByName(params *IdentityAccessManagementGetAuthProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetAuthProfileByNameOK, error)

	IdentityAccessManagementGetDocPolicy(params *IdentityAccessManagementGetDocPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetDocPolicyOK, error)

	IdentityAccessManagementGetEnterprise(params *IdentityAccessManagementGetEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetEnterpriseOK, error)

	IdentityAccessManagementGetEnterpriseByName(params *IdentityAccessManagementGetEnterpriseByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetEnterpriseByNameOK, error)

	IdentityAccessManagementGetEnterpriseSelf(params *IdentityAccessManagementGetEnterpriseSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetEnterpriseSelfOK, error)

	IdentityAccessManagementGetRealm(params *IdentityAccessManagementGetRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRealmOK, error)

	IdentityAccessManagementGetRealmByName(params *IdentityAccessManagementGetRealmByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRealmByNameOK, error)

	IdentityAccessManagementGetRole(params *IdentityAccessManagementGetRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRoleOK, error)

	IdentityAccessManagementGetRoleByName(params *IdentityAccessManagementGetRoleByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRoleByNameOK, error)

	IdentityAccessManagementGetRoleSelf(params *IdentityAccessManagementGetRoleSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRoleSelfOK, error)

	IdentityAccessManagementGetUser(params *IdentityAccessManagementGetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserOK, error)

	IdentityAccessManagementGetUserByName(params *IdentityAccessManagementGetUserByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserByNameOK, error)

	IdentityAccessManagementGetUserSelf(params *IdentityAccessManagementGetUserSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserSelfOK, error)

	IdentityAccessManagementGetUserSession(params *IdentityAccessManagementGetUserSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserSessionOK, error)

	IdentityAccessManagementGetUserSession2(params *IdentityAccessManagementGetUserSession2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserSession2OK, error)

	IdentityAccessManagementGetUserSessionSelf(params *IdentityAccessManagementGetUserSessionSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserSessionSelfOK, error)

	IdentityAccessManagementLogin(params *IdentityAccessManagementLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginOK, error)

	IdentityAccessManagementLoginExternal(params *IdentityAccessManagementLoginExternalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginExternalOK, error)

	IdentityAccessManagementLoginExternalOAuth2Callback(params *IdentityAccessManagementLoginExternalOAuth2CallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginExternalOAuth2CallbackOK, error)

	IdentityAccessManagementLoginForgotPassword(params *IdentityAccessManagementLoginForgotPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginForgotPasswordOK, error)

	IdentityAccessManagementLoginMode(params *IdentityAccessManagementLoginModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginModeOK, error)

	IdentityAccessManagementLogout(params *IdentityAccessManagementLogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLogoutOK, error)

	IdentityAccessManagementQueryAuthProfiles(params *IdentityAccessManagementQueryAuthProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryAuthProfilesOK, error)

	IdentityAccessManagementQueryDocPolicy(params *IdentityAccessManagementQueryDocPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryDocPolicyOK, error)

	IdentityAccessManagementQueryEnterprises(params *IdentityAccessManagementQueryEnterprisesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryEnterprisesOK, error)

	IdentityAccessManagementQueryRealms(params *IdentityAccessManagementQueryRealmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryRealmsOK, error)

	IdentityAccessManagementQueryRoles(params *IdentityAccessManagementQueryRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryRolesOK, error)

	IdentityAccessManagementQueryUserSessions(params *IdentityAccessManagementQueryUserSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryUserSessionsOK, error)

	IdentityAccessManagementQueryUsers(params *IdentityAccessManagementQueryUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryUsersOK, error)

	IdentityAccessManagementRefreshUserSession(params *IdentityAccessManagementRefreshUserSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementRefreshUserSessionOK, error)

	IdentityAccessManagementSignupEnterprise(params *IdentityAccessManagementSignupEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementSignupEnterpriseOK, error)

	IdentityAccessManagementSignupUser(params *IdentityAccessManagementSignupUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementSignupUserOK, error)

	IdentityAccessManagementUpdateAuthProfile(params *IdentityAccessManagementUpdateAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateAuthProfileOK, error)

	IdentityAccessManagementUpdateCredential(params *IdentityAccessManagementUpdateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateCredentialOK, error)

	IdentityAccessManagementUpdateCredentialSelf(params *IdentityAccessManagementUpdateCredentialSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateCredentialSelfOK, error)

	IdentityAccessManagementUpdateDocPolicyLatest(params *IdentityAccessManagementUpdateDocPolicyLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateDocPolicyLatestOK, error)

	IdentityAccessManagementUpdateEnterprise(params *IdentityAccessManagementUpdateEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateEnterpriseOK, error)

	IdentityAccessManagementUpdateEnterprise2(params *IdentityAccessManagementUpdateEnterprise2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateEnterprise2OK, error)

	IdentityAccessManagementUpdateRealm(params *IdentityAccessManagementUpdateRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateRealmOK, error)

	IdentityAccessManagementUpdateRole(params *IdentityAccessManagementUpdateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateRoleOK, error)

	IdentityAccessManagementUpdateUser(params *IdentityAccessManagementUpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateUserOK, error)

	IdentityAccessManagementUpdateUser2(params *IdentityAccessManagementUpdateUser2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateUser2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
IdentityAccessManagementCreateAuthProfile creates a a a profile

Create an AAA profile record.
*/
func (a *Client) IdentityAccessManagementCreateAuthProfile(params *IdentityAccessManagementCreateAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateAuthProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementCreateAuthProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_CreateAuthProfile",
		Method:             "POST",
		PathPattern:        "/v1/authorization/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementCreateAuthProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementCreateAuthProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementCreateAuthProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementCreateCredential creates i a m credential

Create an IAM credential record.
*/
func (a *Client) IdentityAccessManagementCreateCredential(params *IdentityAccessManagementCreateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementCreateCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_CreateCredential",
		Method:             "POST",
		PathPattern:        "/v1/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementCreateCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementCreateCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementCreateCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementCreateDocPolicy creates document policy

Create document policy.
*/
func (a *Client) IdentityAccessManagementCreateDocPolicy(params *IdentityAccessManagementCreateDocPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateDocPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementCreateDocPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_CreateDocPolicy",
		Method:             "POST",
		PathPattern:        "/v1/cloud/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementCreateDocPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementCreateDocPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementCreateDocPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementCreateEnterprise creates i a m enterprise

Create an IAM enterprise record.
*/
func (a *Client) IdentityAccessManagementCreateEnterprise(params *IdentityAccessManagementCreateEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementCreateEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_CreateEnterprise",
		Method:             "POST",
		PathPattern:        "/v1/enterprises",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementCreateEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementCreateEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementCreateEnterpriseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementCreateRealm creates a realm for an enterprise

Create a realm. For example, zededa.com can be registered as a realm for an enterprise. Only those Oauth users who belong to this domain will be allowed to login to the enterprise.
*/
func (a *Client) IdentityAccessManagementCreateRealm(params *IdentityAccessManagementCreateRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateRealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementCreateRealmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_CreateRealm",
		Method:             "POST",
		PathPattern:        "/v1/realms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementCreateRealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementCreateRealmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementCreateRealmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementCreateRole creates i a m role

Create an IAM role record.
*/
func (a *Client) IdentityAccessManagementCreateRole(params *IdentityAccessManagementCreateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementCreateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_CreateRole",
		Method:             "POST",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementCreateRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementCreateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementCreateRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementCreateUser creates i a m user

Create an IAM user record.
*/
func (a *Client) IdentityAccessManagementCreateUser(params *IdentityAccessManagementCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_CreateUser",
		Method:             "POST",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementCreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementCreateUserSessionSelf generates a new session token

Generate a new token with an extended expiry time. The desired expiry time should be passed as number of seconds.
*/
func (a *Client) IdentityAccessManagementCreateUserSessionSelf(params *IdentityAccessManagementCreateUserSessionSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementCreateUserSessionSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementCreateUserSessionSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_CreateUserSessionSelf",
		Method:             "POST",
		PathPattern:        "/v1/sessions/token/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementCreateUserSessionSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementCreateUserSessionSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementCreateUserSessionSelfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementDeleteAuthProfile deletes a a a profile

Delete an AAA profile record.
*/
func (a *Client) IdentityAccessManagementDeleteAuthProfile(params *IdentityAccessManagementDeleteAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteAuthProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementDeleteAuthProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_DeleteAuthProfile",
		Method:             "DELETE",
		PathPattern:        "/v1/authorization/profiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementDeleteAuthProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementDeleteAuthProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementDeleteAuthProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementDeleteCredential deletes i a m credential

Delete an IAM credential record.
*/
func (a *Client) IdentityAccessManagementDeleteCredential(params *IdentityAccessManagementDeleteCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementDeleteCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_DeleteCredential",
		Method:             "DELETE",
		PathPattern:        "/v1/credentials/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementDeleteCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementDeleteCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementDeleteCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementDeleteDocPolicy deletes document policy by id

Deletes document policy by id
*/
func (a *Client) IdentityAccessManagementDeleteDocPolicy(params *IdentityAccessManagementDeleteDocPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteDocPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementDeleteDocPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_DeleteDocPolicy",
		Method:             "DELETE",
		PathPattern:        "/v1/cloud/policies/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementDeleteDocPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementDeleteDocPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementDeleteDocPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementDeleteEnterprise deletes i a m role

Delete an IAM enterprise record.
*/
func (a *Client) IdentityAccessManagementDeleteEnterprise(params *IdentityAccessManagementDeleteEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementDeleteEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_DeleteEnterprise",
		Method:             "DELETE",
		PathPattern:        "/v1/enterprises/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementDeleteEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementDeleteEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementDeleteEnterpriseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementDeleteRealm deletes a realm

Delete a realm.
*/
func (a *Client) IdentityAccessManagementDeleteRealm(params *IdentityAccessManagementDeleteRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteRealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementDeleteRealmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_DeleteRealm",
		Method:             "DELETE",
		PathPattern:        "/v1/realms/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementDeleteRealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementDeleteRealmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementDeleteRealmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementDeleteRole deletes i a m role

Delete an IAM role record.
*/
func (a *Client) IdentityAccessManagementDeleteRole(params *IdentityAccessManagementDeleteRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementDeleteRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_DeleteRole",
		Method:             "DELETE",
		PathPattern:        "/v1/roles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementDeleteRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementDeleteRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementDeleteRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementDeleteUser deletes i a m user

Delete an IAM user record.
*/
func (a *Client) IdentityAccessManagementDeleteUser(params *IdentityAccessManagementDeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementDeleteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_DeleteUser",
		Method:             "DELETE",
		PathPattern:        "/v1/users/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementDeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementDeleteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementDeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetAuthProfile gets a a a profile

Get the configuration (without security details) of an AAA profile record.
*/
func (a *Client) IdentityAccessManagementGetAuthProfile(params *IdentityAccessManagementGetAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetAuthProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetAuthProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetAuthProfile",
		Method:             "GET",
		PathPattern:        "/v1/authorization/profiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetAuthProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetAuthProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetAuthProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetAuthProfileByName gets a a a profile

Get the configuration (without security details) of an AAA profile record.
*/
func (a *Client) IdentityAccessManagementGetAuthProfileByName(params *IdentityAccessManagementGetAuthProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetAuthProfileByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetAuthProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetAuthProfileByName",
		Method:             "GET",
		PathPattern:        "/v1/authorization/profiles/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetAuthProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetAuthProfileByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetAuthProfileByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetDocPolicy gets document policy by id

Get document policy by id
*/
func (a *Client) IdentityAccessManagementGetDocPolicy(params *IdentityAccessManagementGetDocPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetDocPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetDocPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetDocPolicy",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetDocPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetDocPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetDocPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetEnterprise gets enterprise

Get the configuration (without security details) and status of an enterprise record.
*/
func (a *Client) IdentityAccessManagementGetEnterprise(params *IdentityAccessManagementGetEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetEnterprise",
		Method:             "GET",
		PathPattern:        "/v1/enterprises/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetEnterpriseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetEnterpriseByName gets enterprise

Get the configuration (without security details) and status of an enterprise record.
*/
func (a *Client) IdentityAccessManagementGetEnterpriseByName(params *IdentityAccessManagementGetEnterpriseByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetEnterpriseByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetEnterpriseByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetEnterpriseByName",
		Method:             "GET",
		PathPattern:        "/v1/enterprises/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetEnterpriseByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetEnterpriseByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetEnterpriseByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetEnterpriseSelf gets own enterprise

Get the configuration (without security details) and status of user's own enterprise record.
*/
func (a *Client) IdentityAccessManagementGetEnterpriseSelf(params *IdentityAccessManagementGetEnterpriseSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetEnterpriseSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetEnterpriseSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetEnterpriseSelf",
		Method:             "GET",
		PathPattern:        "/v1/enterprises/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetEnterpriseSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetEnterpriseSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetEnterpriseSelfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetRealm gets a realm

Get the details of a realm
*/
func (a *Client) IdentityAccessManagementGetRealm(params *IdentityAccessManagementGetRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetRealmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetRealm",
		Method:             "GET",
		PathPattern:        "/v1/realms/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetRealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetRealmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetRealmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetRealmByName gets i a m realm

Get a realm by name.
*/
func (a *Client) IdentityAccessManagementGetRealmByName(params *IdentityAccessManagementGetRealmByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRealmByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetRealmByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetRealmByName",
		Method:             "GET",
		PathPattern:        "/v1/realms/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetRealmByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetRealmByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetRealmByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetRole gets i a m role

Get the configuration (without security details) of an IAM role record.
*/
func (a *Client) IdentityAccessManagementGetRole(params *IdentityAccessManagementGetRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetRole",
		Method:             "GET",
		PathPattern:        "/v1/roles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetRoleByName gets i a m role

Get the configuration (without security details) of an IAM role record.
*/
func (a *Client) IdentityAccessManagementGetRoleByName(params *IdentityAccessManagementGetRoleByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRoleByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetRoleByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetRoleByName",
		Method:             "GET",
		PathPattern:        "/v1/roles/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetRoleByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetRoleByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetRoleByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetRoleSelf gets own i a m role

Get the configuration (without security details) of user's own IAM role record.
*/
func (a *Client) IdentityAccessManagementGetRoleSelf(params *IdentityAccessManagementGetRoleSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetRoleSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetRoleSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetRoleSelf",
		Method:             "GET",
		PathPattern:        "/v1/roles/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetRoleSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetRoleSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetRoleSelfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetUser gets i a m user

Get the configuration (without security details) of an IAM user record.
*/
func (a *Client) IdentityAccessManagementGetUser(params *IdentityAccessManagementGetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetUser",
		Method:             "GET",
		PathPattern:        "/v1/users/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetUserByName gets i a m user

Get the configuration (without security details) of an IAM user record.
*/
func (a *Client) IdentityAccessManagementGetUserByName(params *IdentityAccessManagementGetUserByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetUserByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetUserByName",
		Method:             "GET",
		PathPattern:        "/v1/users/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetUserByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetUserByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetUserByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetUserSelf gets own i a m user

Get the configuration (without security details) of user's own IAM user record.
*/
func (a *Client) IdentityAccessManagementGetUserSelf(params *IdentityAccessManagementGetUserSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetUserSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetUserSelf",
		Method:             "GET",
		PathPattern:        "/v1/users/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetUserSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetUserSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetUserSelfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetUserSession gets user session

Get the details of a user session with given session token.
*/
func (a *Client) IdentityAccessManagementGetUserSession(params *IdentityAccessManagementGetUserSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetUserSession",
		Method:             "GET",
		PathPattern:        "/v1/sessions/token/{sessionToken.base64}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetUserSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetUserSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetUserSession2 gets user session

Get the details of a user session with given session token.
*/
func (a *Client) IdentityAccessManagementGetUserSession2(params *IdentityAccessManagementGetUserSession2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserSession2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetUserSession2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetUserSession2",
		Method:             "GET",
		PathPattern:        "/v1/sessions/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetUserSession2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetUserSession2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetUserSession2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementGetUserSessionSelf gets current user session

Get the details of the current user session.
*/
func (a *Client) IdentityAccessManagementGetUserSessionSelf(params *IdentityAccessManagementGetUserSessionSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementGetUserSessionSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementGetUserSessionSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_GetUserSessionSelf",
		Method:             "GET",
		PathPattern:        "/v1/sessions/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementGetUserSessionSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementGetUserSessionSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementGetUserSessionSelfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementLogin logins locally

Login with zedcontrol as identity provider.
*/
func (a *Client) IdentityAccessManagementLogin(params *IdentityAccessManagementLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_Login",
		Method:             "POST",
		PathPattern:        "/v1/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementLoginExternal logins externally

Login with external identity provider (e.g. Okta, gmail, Azure AD etc.). If the enterprise has an AAA Profile configured, zedcontrol will redirect the user to the login page of the external identity provider.
*/
func (a *Client) IdentityAccessManagementLoginExternal(params *IdentityAccessManagementLoginExternalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementLoginExternalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_LoginExternal",
		Method:             "POST",
		PathPattern:        "/v1/login/external",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementLoginExternalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementLoginExternalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementLoginExternalDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementLoginExternalOAuth2Callback logins callback

Login callback for external OAauth2 identity provider
*/
func (a *Client) IdentityAccessManagementLoginExternalOAuth2Callback(params *IdentityAccessManagementLoginExternalOAuth2CallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginExternalOAuth2CallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementLoginExternalOAuth2CallbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_LoginExternalOAuth2Callback",
		Method:             "POST",
		PathPattern:        "/v1/login/oauth/callback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementLoginExternalOAuth2CallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementLoginExternalOAuth2CallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementLoginExternalOAuth2CallbackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementLoginForgotPassword resets forgotten password

Reset password in case it is forgotten
*/
func (a *Client) IdentityAccessManagementLoginForgotPassword(params *IdentityAccessManagementLoginForgotPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginForgotPasswordOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementLoginForgotPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_LoginForgotPassword",
		Method:             "POST",
		PathPattern:        "/v1/login/forgot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementLoginForgotPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementLoginForgotPasswordOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementLoginForgotPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementLoginMode gets a a a mode of the user

Get the AAA mode of the user. AAA mode can be authentication and authorization with zedcontrol as identity provider or authentication (and optionally authorization) with external identity provider. Oauth2 is supported for external authentication protocols.
*/
func (a *Client) IdentityAccessManagementLoginMode(params *IdentityAccessManagementLoginModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLoginModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementLoginModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_LoginMode",
		Method:             "POST",
		PathPattern:        "/v1/login/mode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementLoginModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementLoginModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementLoginModeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementLogout logouts

Logout from zedcontrol. Current user session will be terminated. In case of login with external identity provider, user session in the identity provider will not be impacted.
*/
func (a *Client) IdentityAccessManagementLogout(params *IdentityAccessManagementLogoutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_Logout",
		Method:             "POST",
		PathPattern:        "/v1/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementLogoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementLogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementLogoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementQueryAuthProfiles queries a a a profiles

Query the AAA profile records.
*/
func (a *Client) IdentityAccessManagementQueryAuthProfiles(params *IdentityAccessManagementQueryAuthProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryAuthProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementQueryAuthProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_QueryAuthProfiles",
		Method:             "GET",
		PathPattern:        "/v1/authorization/profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementQueryAuthProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementQueryAuthProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementQueryAuthProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementQueryDocPolicy queries document policy

Query document policy
*/
func (a *Client) IdentityAccessManagementQueryDocPolicy(params *IdentityAccessManagementQueryDocPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryDocPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementQueryDocPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_QueryDocPolicy",
		Method:             "GET",
		PathPattern:        "/v1/cloud/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementQueryDocPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementQueryDocPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementQueryDocPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementQueryEnterprises queries i a m enterprises

Query the IAM Enterprises records.
*/
func (a *Client) IdentityAccessManagementQueryEnterprises(params *IdentityAccessManagementQueryEnterprisesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryEnterprisesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementQueryEnterprisesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_QueryEnterprises",
		Method:             "GET",
		PathPattern:        "/v1/enterprises",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementQueryEnterprisesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementQueryEnterprisesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementQueryEnterprisesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementQueryRealms queries all realms

Query all realms.
*/
func (a *Client) IdentityAccessManagementQueryRealms(params *IdentityAccessManagementQueryRealmsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryRealmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementQueryRealmsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_QueryRealms",
		Method:             "GET",
		PathPattern:        "/v1/realms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementQueryRealmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementQueryRealmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementQueryRealmsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementQueryRoles queries i a m roles

Query the IAM Role records.
*/
func (a *Client) IdentityAccessManagementQueryRoles(params *IdentityAccessManagementQueryRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementQueryRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_QueryRoles",
		Method:             "GET",
		PathPattern:        "/v1/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementQueryRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementQueryRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementQueryRolesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementQueryUserSessions queries user sessions

Query all the active user sessions for all users.
*/
func (a *Client) IdentityAccessManagementQueryUserSessions(params *IdentityAccessManagementQueryUserSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryUserSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementQueryUserSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_QueryUserSessions",
		Method:             "GET",
		PathPattern:        "/v1/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementQueryUserSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementQueryUserSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementQueryUserSessionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementQueryUsers queries i a m users

Query the IAM user records.
*/
func (a *Client) IdentityAccessManagementQueryUsers(params *IdentityAccessManagementQueryUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementQueryUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementQueryUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_QueryUsers",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementQueryUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementQueryUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementQueryUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementRefreshUserSession refreshes current user session

Refresh the current user session. The current session will be extended for another 4 hours.
*/
func (a *Client) IdentityAccessManagementRefreshUserSession(params *IdentityAccessManagementRefreshUserSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementRefreshUserSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementRefreshUserSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_RefreshUserSession",
		Method:             "PUT",
		PathPattern:        "/v1/sessions/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementRefreshUserSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementRefreshUserSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementRefreshUserSessionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementSignupEnterprise signs up for a new enterprise account

Sign up for a new enterprise account in zedcontrol. Enterprise will not be active unless admin user is validated with email.
*/
func (a *Client) IdentityAccessManagementSignupEnterprise(params *IdentityAccessManagementSignupEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementSignupEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementSignupEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_SignupEnterprise",
		Method:             "POST",
		PathPattern:        "/v1/login/signup/enterprise",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementSignupEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementSignupEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementSignupEnterpriseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementSignupUser gets enterprise

Get the configuration (without security details) and status of an enterprise record.
*/
func (a *Client) IdentityAccessManagementSignupUser(params *IdentityAccessManagementSignupUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementSignupUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementSignupUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_SignupUser",
		Method:             "POST",
		PathPattern:        "/v1/login/signup/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementSignupUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementSignupUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementSignupUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateAuthProfile updates a a a profile

Update an AAA profile record. The usual pattern to update an AAA profile record is to retrieve the record and update with the modified values in a new body to update the AAA profile record.
*/
func (a *Client) IdentityAccessManagementUpdateAuthProfile(params *IdentityAccessManagementUpdateAuthProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateAuthProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateAuthProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateAuthProfile",
		Method:             "PUT",
		PathPattern:        "/v1/authorization/profiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateAuthProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateAuthProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateAuthProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateCredential updates i a m credential

Update an IAM credential record.
*/
func (a *Client) IdentityAccessManagementUpdateCredential(params *IdentityAccessManagementUpdateCredentialParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateCredentialParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateCredential",
		Method:             "PUT",
		PathPattern:        "/v1/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateCredentialReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateCredentialOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateCredentialDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateCredentialSelf updates i a m credential

Update user's own IAM credential record.
*/
func (a *Client) IdentityAccessManagementUpdateCredentialSelf(params *IdentityAccessManagementUpdateCredentialSelfParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateCredentialSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateCredentialSelfParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateCredentialSelf",
		Method:             "PUT",
		PathPattern:        "/v1/credentials/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateCredentialSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateCredentialSelfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateCredentialSelfDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateDocPolicyLatest marks document policy as latest

Mark document policy as latest.
*/
func (a *Client) IdentityAccessManagementUpdateDocPolicyLatest(params *IdentityAccessManagementUpdateDocPolicyLatestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateDocPolicyLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateDocPolicyLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateDocPolicyLatest",
		Method:             "PUT",
		PathPattern:        "/v1/cloud/policies/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateDocPolicyLatestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateDocPolicyLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateDocPolicyLatestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateEnterprise updates enterprise

Update an enterprise record. The usual pattern to update an enterprise record is to retrieve the record and update with the modified values in a new body to update the enterprise record.
*/
func (a *Client) IdentityAccessManagementUpdateEnterprise(params *IdentityAccessManagementUpdateEnterpriseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateEnterpriseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateEnterpriseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateEnterprise",
		Method:             "PUT",
		PathPattern:        "/v1/enterprises/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateEnterpriseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateEnterpriseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateEnterpriseDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateEnterprise2 updates enterprise

Update an enterprise record. The usual pattern to update an enterprise record is to retrieve the record and update with the modified values in a new body to update the enterprise record.
*/
func (a *Client) IdentityAccessManagementUpdateEnterprise2(params *IdentityAccessManagementUpdateEnterprise2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateEnterprise2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateEnterprise2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateEnterprise2",
		Method:             "PUT",
		PathPattern:        "/v1/enterprises/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateEnterprise2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateEnterprise2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateEnterprise2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateRealm updates a realm

Update a realm. The usual pattern to update a realm is to retrieve the record and update with the modified values in a new body to update the realm.
*/
func (a *Client) IdentityAccessManagementUpdateRealm(params *IdentityAccessManagementUpdateRealmParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateRealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateRealmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateRealm",
		Method:             "PUT",
		PathPattern:        "/v1/realms/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateRealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateRealmOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateRealmDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateRole updates i a m role

Update an IAM role record. The usual pattern to update an IAM role record is to retrieve the record and update with the modified values in a new body to update the IAM role record.
*/
func (a *Client) IdentityAccessManagementUpdateRole(params *IdentityAccessManagementUpdateRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateRole",
		Method:             "PUT",
		PathPattern:        "/v1/roles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateRoleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateUser updates i a m user

Update an IAM user record. The usual pattern to update an IAM user record is to retrieve the record and update with the modified values in a new body to update the IAM user record.
*/
func (a *Client) IdentityAccessManagementUpdateUser(params *IdentityAccessManagementUpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateUser",
		Method:             "PUT",
		PathPattern:        "/v1/users/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IdentityAccessManagementUpdateUser2 updates i a m user

Update an IAM user record. The usual pattern to update an IAM user record is to retrieve the record and update with the modified values in a new body to update the IAM user record.
*/
func (a *Client) IdentityAccessManagementUpdateUser2(params *IdentityAccessManagementUpdateUser2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*IdentityAccessManagementUpdateUser2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIdentityAccessManagementUpdateUser2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "IdentityAccessManagement_UpdateUser2",
		Method:             "PUT",
		PathPattern:        "/v1/users/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IdentityAccessManagementUpdateUser2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IdentityAccessManagementUpdateUser2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IdentityAccessManagementUpdateUser2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
