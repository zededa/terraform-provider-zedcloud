// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider/models"
)

// IdentityAccessManagementUpdateRealmReader is a Reader for the IdentityAccessManagementUpdateRealm structure.
type IdentityAccessManagementUpdateRealmReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IdentityAccessManagementUpdateRealmReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIdentityAccessManagementUpdateRealmOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIdentityAccessManagementUpdateRealmUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIdentityAccessManagementUpdateRealmForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIdentityAccessManagementUpdateRealmNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewIdentityAccessManagementUpdateRealmConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIdentityAccessManagementUpdateRealmInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewIdentityAccessManagementUpdateRealmGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIdentityAccessManagementUpdateRealmDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIdentityAccessManagementUpdateRealmOK creates a IdentityAccessManagementUpdateRealmOK with default headers values
func NewIdentityAccessManagementUpdateRealmOK() *IdentityAccessManagementUpdateRealmOK {
	return &IdentityAccessManagementUpdateRealmOK{}
}

/*
IdentityAccessManagementUpdateRealmOK describes a response with status code 200, with default header values.

A successful response.
*/
type IdentityAccessManagementUpdateRealmOK struct {
	Payload *models.CrudResponse
}

// IsSuccess returns true when this identity access management update realm o k response has a 2xx status code
func (o *IdentityAccessManagementUpdateRealmOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this identity access management update realm o k response has a 3xx status code
func (o *IdentityAccessManagementUpdateRealmOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update realm o k response has a 4xx status code
func (o *IdentityAccessManagementUpdateRealmOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update realm o k response has a 5xx status code
func (o *IdentityAccessManagementUpdateRealmOK) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update realm o k response a status code equal to that given
func (o *IdentityAccessManagementUpdateRealmOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the identity access management update realm o k response
func (o *IdentityAccessManagementUpdateRealmOK) Code() int {
	return 200
}

func (o *IdentityAccessManagementUpdateRealmOK) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmOK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmOK) String() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmOK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmOK) GetPayload() *models.CrudResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateRealmOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CrudResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateRealmUnauthorized creates a IdentityAccessManagementUpdateRealmUnauthorized with default headers values
func NewIdentityAccessManagementUpdateRealmUnauthorized() *IdentityAccessManagementUpdateRealmUnauthorized {
	return &IdentityAccessManagementUpdateRealmUnauthorized{}
}

/*
IdentityAccessManagementUpdateRealmUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type IdentityAccessManagementUpdateRealmUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update realm unauthorized response has a 2xx status code
func (o *IdentityAccessManagementUpdateRealmUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update realm unauthorized response has a 3xx status code
func (o *IdentityAccessManagementUpdateRealmUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update realm unauthorized response has a 4xx status code
func (o *IdentityAccessManagementUpdateRealmUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update realm unauthorized response has a 5xx status code
func (o *IdentityAccessManagementUpdateRealmUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update realm unauthorized response a status code equal to that given
func (o *IdentityAccessManagementUpdateRealmUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the identity access management update realm unauthorized response
func (o *IdentityAccessManagementUpdateRealmUnauthorized) Code() int {
	return 401
}

func (o *IdentityAccessManagementUpdateRealmUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmUnauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmUnauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateRealmUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateRealmForbidden creates a IdentityAccessManagementUpdateRealmForbidden with default headers values
func NewIdentityAccessManagementUpdateRealmForbidden() *IdentityAccessManagementUpdateRealmForbidden {
	return &IdentityAccessManagementUpdateRealmForbidden{}
}

/*
IdentityAccessManagementUpdateRealmForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type IdentityAccessManagementUpdateRealmForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update realm forbidden response has a 2xx status code
func (o *IdentityAccessManagementUpdateRealmForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update realm forbidden response has a 3xx status code
func (o *IdentityAccessManagementUpdateRealmForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update realm forbidden response has a 4xx status code
func (o *IdentityAccessManagementUpdateRealmForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update realm forbidden response has a 5xx status code
func (o *IdentityAccessManagementUpdateRealmForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update realm forbidden response a status code equal to that given
func (o *IdentityAccessManagementUpdateRealmForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the identity access management update realm forbidden response
func (o *IdentityAccessManagementUpdateRealmForbidden) Code() int {
	return 403
}

func (o *IdentityAccessManagementUpdateRealmForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmForbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmForbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateRealmForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateRealmNotFound creates a IdentityAccessManagementUpdateRealmNotFound with default headers values
func NewIdentityAccessManagementUpdateRealmNotFound() *IdentityAccessManagementUpdateRealmNotFound {
	return &IdentityAccessManagementUpdateRealmNotFound{}
}

/*
IdentityAccessManagementUpdateRealmNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type IdentityAccessManagementUpdateRealmNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update realm not found response has a 2xx status code
func (o *IdentityAccessManagementUpdateRealmNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update realm not found response has a 3xx status code
func (o *IdentityAccessManagementUpdateRealmNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update realm not found response has a 4xx status code
func (o *IdentityAccessManagementUpdateRealmNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update realm not found response has a 5xx status code
func (o *IdentityAccessManagementUpdateRealmNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update realm not found response a status code equal to that given
func (o *IdentityAccessManagementUpdateRealmNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the identity access management update realm not found response
func (o *IdentityAccessManagementUpdateRealmNotFound) Code() int {
	return 404
}

func (o *IdentityAccessManagementUpdateRealmNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmNotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmNotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateRealmNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateRealmConflict creates a IdentityAccessManagementUpdateRealmConflict with default headers values
func NewIdentityAccessManagementUpdateRealmConflict() *IdentityAccessManagementUpdateRealmConflict {
	return &IdentityAccessManagementUpdateRealmConflict{}
}

/*
IdentityAccessManagementUpdateRealmConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing realm.
*/
type IdentityAccessManagementUpdateRealmConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update realm conflict response has a 2xx status code
func (o *IdentityAccessManagementUpdateRealmConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update realm conflict response has a 3xx status code
func (o *IdentityAccessManagementUpdateRealmConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update realm conflict response has a 4xx status code
func (o *IdentityAccessManagementUpdateRealmConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update realm conflict response has a 5xx status code
func (o *IdentityAccessManagementUpdateRealmConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update realm conflict response a status code equal to that given
func (o *IdentityAccessManagementUpdateRealmConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the identity access management update realm conflict response
func (o *IdentityAccessManagementUpdateRealmConflict) Code() int {
	return 409
}

func (o *IdentityAccessManagementUpdateRealmConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmConflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmConflict) String() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmConflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateRealmConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateRealmInternalServerError creates a IdentityAccessManagementUpdateRealmInternalServerError with default headers values
func NewIdentityAccessManagementUpdateRealmInternalServerError() *IdentityAccessManagementUpdateRealmInternalServerError {
	return &IdentityAccessManagementUpdateRealmInternalServerError{}
}

/*
IdentityAccessManagementUpdateRealmInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type IdentityAccessManagementUpdateRealmInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update realm internal server error response has a 2xx status code
func (o *IdentityAccessManagementUpdateRealmInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update realm internal server error response has a 3xx status code
func (o *IdentityAccessManagementUpdateRealmInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update realm internal server error response has a 4xx status code
func (o *IdentityAccessManagementUpdateRealmInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update realm internal server error response has a 5xx status code
func (o *IdentityAccessManagementUpdateRealmInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update realm internal server error response a status code equal to that given
func (o *IdentityAccessManagementUpdateRealmInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the identity access management update realm internal server error response
func (o *IdentityAccessManagementUpdateRealmInternalServerError) Code() int {
	return 500
}

func (o *IdentityAccessManagementUpdateRealmInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmInternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmInternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateRealmInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateRealmGatewayTimeout creates a IdentityAccessManagementUpdateRealmGatewayTimeout with default headers values
func NewIdentityAccessManagementUpdateRealmGatewayTimeout() *IdentityAccessManagementUpdateRealmGatewayTimeout {
	return &IdentityAccessManagementUpdateRealmGatewayTimeout{}
}

/*
IdentityAccessManagementUpdateRealmGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type IdentityAccessManagementUpdateRealmGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update realm gateway timeout response has a 2xx status code
func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update realm gateway timeout response has a 3xx status code
func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update realm gateway timeout response has a 4xx status code
func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update realm gateway timeout response has a 5xx status code
func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update realm gateway timeout response a status code equal to that given
func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the identity access management update realm gateway timeout response
func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) Code() int {
	return 504
}

func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmGatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] identityAccessManagementUpdateRealmGatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateRealmGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateRealmDefault creates a IdentityAccessManagementUpdateRealmDefault with default headers values
func NewIdentityAccessManagementUpdateRealmDefault(code int) *IdentityAccessManagementUpdateRealmDefault {
	return &IdentityAccessManagementUpdateRealmDefault{
		_statusCode: code,
	}
}

/*
IdentityAccessManagementUpdateRealmDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type IdentityAccessManagementUpdateRealmDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this identity access management update realm default response has a 2xx status code
func (o *IdentityAccessManagementUpdateRealmDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this identity access management update realm default response has a 3xx status code
func (o *IdentityAccessManagementUpdateRealmDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this identity access management update realm default response has a 4xx status code
func (o *IdentityAccessManagementUpdateRealmDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this identity access management update realm default response has a 5xx status code
func (o *IdentityAccessManagementUpdateRealmDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this identity access management update realm default response a status code equal to that given
func (o *IdentityAccessManagementUpdateRealmDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the identity access management update realm default response
func (o *IdentityAccessManagementUpdateRealmDefault) Code() int {
	return o._statusCode
}

func (o *IdentityAccessManagementUpdateRealmDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] IdentityAccessManagement_UpdateRealm default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmDefault) String() string {
	return fmt.Sprintf("[PUT /v1/realms/id/{id}][%d] IdentityAccessManagement_UpdateRealm default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateRealmDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateRealmDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
IdentityAccessManagementUpdateRealmBody Realm detail
//
// Realm meta data
// Example: {"description":"Test realm","enterpriseId":"AAFlABDe6Nm63ixF5LJBbk9Keqp6","id":"EAJ1ABAi-KOom7dJlrBoE8eq1pj9","name":"zededa.com","revision":{"createdAt":"2020-07-17T06:03:14Z","createdBy":"us.root@zededa.com","curr":"1","prev":"","updatedAt":"2020-07-17T06:03:14Z","updatedBy":"us.root@zededa.com"},"title":"zededa"}
swagger:model IdentityAccessManagementUpdateRealmBody
*/
type IdentityAccessManagementUpdateRealmBody struct {

	// Detailed description of the realm
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// Enterprise ID of the enterprise where the realm is to be created
	// Required: true
	// Pattern: [0-9A-Za-z_=-]{28}
	EnterpriseID *string `json:"enterpriseId"`

	// User defined name of the realm. Name cannot be changed once created
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// System defined info
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// User defined title of the realm. Title can be changed anytime
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title *string `json:"title"`
}

// Validate validates this identity access management update realm body
func (o *IdentityAccessManagementUpdateRealmBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnterpriseID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IdentityAccessManagementUpdateRealmBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateRealmBody) validateEnterpriseID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"enterpriseId", "body", o.EnterpriseID); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"enterpriseId", "body", *o.EnterpriseID, `[0-9A-Za-z_=-]{28}`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateRealmBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateRealmBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateRealmBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this identity access management update realm body based on the context it is used
func (o *IdentityAccessManagementUpdateRealmBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IdentityAccessManagementUpdateRealmBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {

		if swag.IsZero(o.Revision) { // not required
			return nil
		}

		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IdentityAccessManagementUpdateRealmBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IdentityAccessManagementUpdateRealmBody) UnmarshalBinary(b []byte) error {
	var res IdentityAccessManagementUpdateRealmBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
