// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// IdentityAccessManagementUpdateUser2Reader is a Reader for the IdentityAccessManagementUpdateUser2 structure.
type IdentityAccessManagementUpdateUser2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IdentityAccessManagementUpdateUser2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIdentityAccessManagementUpdateUser2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIdentityAccessManagementUpdateUser2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIdentityAccessManagementUpdateUser2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIdentityAccessManagementUpdateUser2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewIdentityAccessManagementUpdateUser2Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIdentityAccessManagementUpdateUser2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewIdentityAccessManagementUpdateUser2GatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIdentityAccessManagementUpdateUser2Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIdentityAccessManagementUpdateUser2OK creates a IdentityAccessManagementUpdateUser2OK with default headers values
func NewIdentityAccessManagementUpdateUser2OK() *IdentityAccessManagementUpdateUser2OK {
	return &IdentityAccessManagementUpdateUser2OK{}
}

/*
IdentityAccessManagementUpdateUser2OK describes a response with status code 200, with default header values.

A successful response.
*/
type IdentityAccessManagementUpdateUser2OK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user2 o k response has a 2xx status code
func (o *IdentityAccessManagementUpdateUser2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this identity access management update user2 o k response has a 3xx status code
func (o *IdentityAccessManagementUpdateUser2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user2 o k response has a 4xx status code
func (o *IdentityAccessManagementUpdateUser2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update user2 o k response has a 5xx status code
func (o *IdentityAccessManagementUpdateUser2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user2 o k response a status code equal to that given
func (o *IdentityAccessManagementUpdateUser2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the identity access management update user2 o k response
func (o *IdentityAccessManagementUpdateUser2OK) Code() int {
	return 200
}

func (o *IdentityAccessManagementUpdateUser2OK) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2OK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2OK) String() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2OK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2OK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUser2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUser2Unauthorized creates a IdentityAccessManagementUpdateUser2Unauthorized with default headers values
func NewIdentityAccessManagementUpdateUser2Unauthorized() *IdentityAccessManagementUpdateUser2Unauthorized {
	return &IdentityAccessManagementUpdateUser2Unauthorized{}
}

/*
IdentityAccessManagementUpdateUser2Unauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type IdentityAccessManagementUpdateUser2Unauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user2 unauthorized response has a 2xx status code
func (o *IdentityAccessManagementUpdateUser2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user2 unauthorized response has a 3xx status code
func (o *IdentityAccessManagementUpdateUser2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user2 unauthorized response has a 4xx status code
func (o *IdentityAccessManagementUpdateUser2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update user2 unauthorized response has a 5xx status code
func (o *IdentityAccessManagementUpdateUser2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user2 unauthorized response a status code equal to that given
func (o *IdentityAccessManagementUpdateUser2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the identity access management update user2 unauthorized response
func (o *IdentityAccessManagementUpdateUser2Unauthorized) Code() int {
	return 401
}

func (o *IdentityAccessManagementUpdateUser2Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2Unauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2Unauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2Unauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUser2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUser2Forbidden creates a IdentityAccessManagementUpdateUser2Forbidden with default headers values
func NewIdentityAccessManagementUpdateUser2Forbidden() *IdentityAccessManagementUpdateUser2Forbidden {
	return &IdentityAccessManagementUpdateUser2Forbidden{}
}

/*
IdentityAccessManagementUpdateUser2Forbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type IdentityAccessManagementUpdateUser2Forbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user2 forbidden response has a 2xx status code
func (o *IdentityAccessManagementUpdateUser2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user2 forbidden response has a 3xx status code
func (o *IdentityAccessManagementUpdateUser2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user2 forbidden response has a 4xx status code
func (o *IdentityAccessManagementUpdateUser2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update user2 forbidden response has a 5xx status code
func (o *IdentityAccessManagementUpdateUser2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user2 forbidden response a status code equal to that given
func (o *IdentityAccessManagementUpdateUser2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the identity access management update user2 forbidden response
func (o *IdentityAccessManagementUpdateUser2Forbidden) Code() int {
	return 403
}

func (o *IdentityAccessManagementUpdateUser2Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2Forbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2Forbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2Forbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUser2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUser2NotFound creates a IdentityAccessManagementUpdateUser2NotFound with default headers values
func NewIdentityAccessManagementUpdateUser2NotFound() *IdentityAccessManagementUpdateUser2NotFound {
	return &IdentityAccessManagementUpdateUser2NotFound{}
}

/*
IdentityAccessManagementUpdateUser2NotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type IdentityAccessManagementUpdateUser2NotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user2 not found response has a 2xx status code
func (o *IdentityAccessManagementUpdateUser2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user2 not found response has a 3xx status code
func (o *IdentityAccessManagementUpdateUser2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user2 not found response has a 4xx status code
func (o *IdentityAccessManagementUpdateUser2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update user2 not found response has a 5xx status code
func (o *IdentityAccessManagementUpdateUser2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user2 not found response a status code equal to that given
func (o *IdentityAccessManagementUpdateUser2NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the identity access management update user2 not found response
func (o *IdentityAccessManagementUpdateUser2NotFound) Code() int {
	return 404
}

func (o *IdentityAccessManagementUpdateUser2NotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2NotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2NotFound) String() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2NotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2NotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUser2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUser2Conflict creates a IdentityAccessManagementUpdateUser2Conflict with default headers values
func NewIdentityAccessManagementUpdateUser2Conflict() *IdentityAccessManagementUpdateUser2Conflict {
	return &IdentityAccessManagementUpdateUser2Conflict{}
}

/*
IdentityAccessManagementUpdateUser2Conflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing IAM user record.
*/
type IdentityAccessManagementUpdateUser2Conflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user2 conflict response has a 2xx status code
func (o *IdentityAccessManagementUpdateUser2Conflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user2 conflict response has a 3xx status code
func (o *IdentityAccessManagementUpdateUser2Conflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user2 conflict response has a 4xx status code
func (o *IdentityAccessManagementUpdateUser2Conflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update user2 conflict response has a 5xx status code
func (o *IdentityAccessManagementUpdateUser2Conflict) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user2 conflict response a status code equal to that given
func (o *IdentityAccessManagementUpdateUser2Conflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the identity access management update user2 conflict response
func (o *IdentityAccessManagementUpdateUser2Conflict) Code() int {
	return 409
}

func (o *IdentityAccessManagementUpdateUser2Conflict) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2Conflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2Conflict) String() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2Conflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2Conflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUser2Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUser2InternalServerError creates a IdentityAccessManagementUpdateUser2InternalServerError with default headers values
func NewIdentityAccessManagementUpdateUser2InternalServerError() *IdentityAccessManagementUpdateUser2InternalServerError {
	return &IdentityAccessManagementUpdateUser2InternalServerError{}
}

/*
IdentityAccessManagementUpdateUser2InternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type IdentityAccessManagementUpdateUser2InternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user2 internal server error response has a 2xx status code
func (o *IdentityAccessManagementUpdateUser2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user2 internal server error response has a 3xx status code
func (o *IdentityAccessManagementUpdateUser2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user2 internal server error response has a 4xx status code
func (o *IdentityAccessManagementUpdateUser2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update user2 internal server error response has a 5xx status code
func (o *IdentityAccessManagementUpdateUser2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update user2 internal server error response a status code equal to that given
func (o *IdentityAccessManagementUpdateUser2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the identity access management update user2 internal server error response
func (o *IdentityAccessManagementUpdateUser2InternalServerError) Code() int {
	return 500
}

func (o *IdentityAccessManagementUpdateUser2InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2InternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2InternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2InternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2InternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUser2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUser2GatewayTimeout creates a IdentityAccessManagementUpdateUser2GatewayTimeout with default headers values
func NewIdentityAccessManagementUpdateUser2GatewayTimeout() *IdentityAccessManagementUpdateUser2GatewayTimeout {
	return &IdentityAccessManagementUpdateUser2GatewayTimeout{}
}

/*
IdentityAccessManagementUpdateUser2GatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type IdentityAccessManagementUpdateUser2GatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user2 gateway timeout response has a 2xx status code
func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user2 gateway timeout response has a 3xx status code
func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user2 gateway timeout response has a 4xx status code
func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update user2 gateway timeout response has a 5xx status code
func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update user2 gateway timeout response a status code equal to that given
func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the identity access management update user2 gateway timeout response
func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) Code() int {
	return 504
}

func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2GatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] identityAccessManagementUpdateUser2GatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUser2GatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUser2Default creates a IdentityAccessManagementUpdateUser2Default with default headers values
func NewIdentityAccessManagementUpdateUser2Default(code int) *IdentityAccessManagementUpdateUser2Default {
	return &IdentityAccessManagementUpdateUser2Default{
		_statusCode: code,
	}
}

/*
IdentityAccessManagementUpdateUser2Default describes a response with status code -1, with default header values.

An unexpected error response.
*/
type IdentityAccessManagementUpdateUser2Default struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this identity access management update user2 default response has a 2xx status code
func (o *IdentityAccessManagementUpdateUser2Default) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this identity access management update user2 default response has a 3xx status code
func (o *IdentityAccessManagementUpdateUser2Default) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this identity access management update user2 default response has a 4xx status code
func (o *IdentityAccessManagementUpdateUser2Default) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this identity access management update user2 default response has a 5xx status code
func (o *IdentityAccessManagementUpdateUser2Default) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this identity access management update user2 default response a status code equal to that given
func (o *IdentityAccessManagementUpdateUser2Default) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the identity access management update user2 default response
func (o *IdentityAccessManagementUpdateUser2Default) Code() int {
	return o._statusCode
}

func (o *IdentityAccessManagementUpdateUser2Default) Error() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] IdentityAccessManagement_UpdateUser2 default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2Default) String() string {
	return fmt.Sprintf("[PUT /v1/users/id/{id}][%d] IdentityAccessManagement_UpdateUser2 default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateUser2Default) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUser2Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
IdentityAccessManagementUpdateUser2Body User detail
//
// User meta data
swagger:model IdentityAccessManagementUpdateUser2Body
*/
type IdentityAccessManagementUpdateUser2Body struct {

	// hubspot Id
	HubspotID string `json:"HubspotId,omitempty"`

	// Operational Status to be returned to CLI/UI
	//
	// Last login time of the user
	// Format: date-time
	LastLoginTime strfmt.DateTime `json:"LastLoginTime,omitempty"`

	// Last logout time of the user
	// Format: date-time
	LastLogoutTime strfmt.DateTime `json:"LastLogoutTime,omitempty"`

	// sfdc Id
	SfdcID string `json:"SfdcId,omitempty"`

	// Permitted list of enterprises with their associated roles
	AllowedEnterprises []*models.AllowedEnterprise `json:"allowedEnterprises"`

	// Custom user parameters
	CustomUserInput map[string]string `json:"customUserInput,omitempty"`

	// Email of the user
	// Required: true
	Email *string `json:"email"`

	// Email state
	// Read Only: true
	EmailState *models.IDState `json:"emailState,omitempty"`

	// Origin enterprise of the user
	// Read Only: true
	EnterpriseID string `json:"enterpriseId,omitempty"`

	// First name of the user
	FirstName string `json:"firstName,omitempty"`

	// Full name of the user
	FullName string `json:"fullName,omitempty"`

	// Locale of the user
	Locale string `json:"locale,omitempty"`

	// Notification preference of the user
	NotifyPref string `json:"notifyPref,omitempty"`

	// Phone number of the user
	Phone string `json:"phone,omitempty"`

	// Phone state
	// Read Only: true
	PhoneState *models.IDState `json:"phoneState,omitempty"`

	// system defined info
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// Role associated with the user
	// Required: true
	// Pattern: [0-9A-Za-z_=-]{28}
	RoleID *string `json:"roleId"`

	// User state
	// Read Only: true
	State *models.UserState `json:"state,omitempty"`

	// Preferred time zone of the user
	TimeZone string `json:"timeZone,omitempty"`

	// Is TOTP enrolment enabled
	// Read Only: true
	TotpEnabled *bool `json:"totpEnabled,omitempty"`

	// Type of the user
	Type *models.AuthType `json:"type,omitempty"`

	// User defined name
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Username *string `json:"username"`
}

// Validate validates this identity access management update user2 body
func (o *IdentityAccessManagementUpdateUser2Body) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLastLoginTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastLogoutTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAllowedEnterprises(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmailState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePhoneState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateLastLoginTime(formats strfmt.Registry) error {
	if swag.IsZero(o.LastLoginTime) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"LastLoginTime", "body", "date-time", o.LastLoginTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateLastLogoutTime(formats strfmt.Registry) error {
	if swag.IsZero(o.LastLogoutTime) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"LastLogoutTime", "body", "date-time", o.LastLogoutTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateAllowedEnterprises(formats strfmt.Registry) error {
	if swag.IsZero(o.AllowedEnterprises) { // not required
		return nil
	}

	for i := 0; i < len(o.AllowedEnterprises); i++ {
		if swag.IsZero(o.AllowedEnterprises[i]) { // not required
			continue
		}

		if o.AllowedEnterprises[i] != nil {
			if err := o.AllowedEnterprises[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "allowedEnterprises" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "allowedEnterprises" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateEmailState(formats strfmt.Registry) error {
	if swag.IsZero(o.EmailState) { // not required
		return nil
	}

	if o.EmailState != nil {
		if err := o.EmailState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "emailState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "emailState")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validatePhoneState(formats strfmt.Registry) error {
	if swag.IsZero(o.PhoneState) { // not required
		return nil
	}

	if o.PhoneState != nil {
		if err := o.PhoneState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "phoneState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "phoneState")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateRoleID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"roleId", "body", o.RoleID); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"roleId", "body", *o.RoleID, `[0-9A-Za-z_=-]{28}`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	if o.State != nil {
		if err := o.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"username", "body", *o.Username, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"username", "body", *o.Username, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"username", "body", *o.Username, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this identity access management update user2 body based on the context it is used
func (o *IdentityAccessManagementUpdateUser2Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAllowedEnterprises(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEmailState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEnterpriseID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePhoneState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotpEnabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) contextValidateAllowedEnterprises(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AllowedEnterprises); i++ {

		if o.AllowedEnterprises[i] != nil {

			if swag.IsZero(o.AllowedEnterprises[i]) { // not required
				return nil
			}

			if err := o.AllowedEnterprises[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "allowedEnterprises" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "allowedEnterprises" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) contextValidateEmailState(ctx context.Context, formats strfmt.Registry) error {

	if o.EmailState != nil {

		if swag.IsZero(o.EmailState) { // not required
			return nil
		}

		if err := o.EmailState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "emailState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "emailState")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) contextValidateEnterpriseID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"enterpriseId", "body", string(o.EnterpriseID)); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) contextValidatePhoneState(ctx context.Context, formats strfmt.Registry) error {

	if o.PhoneState != nil {

		if swag.IsZero(o.PhoneState) { // not required
			return nil
		}

		if err := o.PhoneState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "phoneState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "phoneState")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {

		if swag.IsZero(o.Revision) { // not required
			return nil
		}

		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if o.State != nil {

		if swag.IsZero(o.State) { // not required
			return nil
		}

		if err := o.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) contextValidateTotpEnabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"totpEnabled", "body", o.TotpEnabled); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateUser2Body) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {

		if swag.IsZero(o.Type) { // not required
			return nil
		}

		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IdentityAccessManagementUpdateUser2Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IdentityAccessManagementUpdateUser2Body) UnmarshalBinary(b []byte) error {
	var res IdentityAccessManagementUpdateUser2Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
