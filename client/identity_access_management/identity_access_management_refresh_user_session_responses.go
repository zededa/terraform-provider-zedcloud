// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider/models"
)

// IdentityAccessManagementRefreshUserSessionReader is a Reader for the IdentityAccessManagementRefreshUserSession structure.
type IdentityAccessManagementRefreshUserSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IdentityAccessManagementRefreshUserSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIdentityAccessManagementRefreshUserSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIdentityAccessManagementRefreshUserSessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIdentityAccessManagementRefreshUserSessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIdentityAccessManagementRefreshUserSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewIdentityAccessManagementRefreshUserSessionGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIdentityAccessManagementRefreshUserSessionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIdentityAccessManagementRefreshUserSessionOK creates a IdentityAccessManagementRefreshUserSessionOK with default headers values
func NewIdentityAccessManagementRefreshUserSessionOK() *IdentityAccessManagementRefreshUserSessionOK {
	return &IdentityAccessManagementRefreshUserSessionOK{}
}

/*
IdentityAccessManagementRefreshUserSessionOK describes a response with status code 200, with default header values.

A successful response.
*/
type IdentityAccessManagementRefreshUserSessionOK struct {
	Payload *models.AAAFrontendRefreshResponse
}

// IsSuccess returns true when this identity access management refresh user session o k response has a 2xx status code
func (o *IdentityAccessManagementRefreshUserSessionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this identity access management refresh user session o k response has a 3xx status code
func (o *IdentityAccessManagementRefreshUserSessionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management refresh user session o k response has a 4xx status code
func (o *IdentityAccessManagementRefreshUserSessionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management refresh user session o k response has a 5xx status code
func (o *IdentityAccessManagementRefreshUserSessionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management refresh user session o k response a status code equal to that given
func (o *IdentityAccessManagementRefreshUserSessionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the identity access management refresh user session o k response
func (o *IdentityAccessManagementRefreshUserSessionOK) Code() int {
	return 200
}

func (o *IdentityAccessManagementRefreshUserSessionOK) Error() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionOK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionOK) String() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionOK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionOK) GetPayload() *models.AAAFrontendRefreshResponse {
	return o.Payload
}

func (o *IdentityAccessManagementRefreshUserSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AAAFrontendRefreshResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementRefreshUserSessionUnauthorized creates a IdentityAccessManagementRefreshUserSessionUnauthorized with default headers values
func NewIdentityAccessManagementRefreshUserSessionUnauthorized() *IdentityAccessManagementRefreshUserSessionUnauthorized {
	return &IdentityAccessManagementRefreshUserSessionUnauthorized{}
}

/*
IdentityAccessManagementRefreshUserSessionUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type IdentityAccessManagementRefreshUserSessionUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management refresh user session unauthorized response has a 2xx status code
func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management refresh user session unauthorized response has a 3xx status code
func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management refresh user session unauthorized response has a 4xx status code
func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management refresh user session unauthorized response has a 5xx status code
func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management refresh user session unauthorized response a status code equal to that given
func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the identity access management refresh user session unauthorized response
func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) Code() int {
	return 401
}

func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionUnauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionUnauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementRefreshUserSessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementRefreshUserSessionForbidden creates a IdentityAccessManagementRefreshUserSessionForbidden with default headers values
func NewIdentityAccessManagementRefreshUserSessionForbidden() *IdentityAccessManagementRefreshUserSessionForbidden {
	return &IdentityAccessManagementRefreshUserSessionForbidden{}
}

/*
IdentityAccessManagementRefreshUserSessionForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type IdentityAccessManagementRefreshUserSessionForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management refresh user session forbidden response has a 2xx status code
func (o *IdentityAccessManagementRefreshUserSessionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management refresh user session forbidden response has a 3xx status code
func (o *IdentityAccessManagementRefreshUserSessionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management refresh user session forbidden response has a 4xx status code
func (o *IdentityAccessManagementRefreshUserSessionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management refresh user session forbidden response has a 5xx status code
func (o *IdentityAccessManagementRefreshUserSessionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management refresh user session forbidden response a status code equal to that given
func (o *IdentityAccessManagementRefreshUserSessionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the identity access management refresh user session forbidden response
func (o *IdentityAccessManagementRefreshUserSessionForbidden) Code() int {
	return 403
}

func (o *IdentityAccessManagementRefreshUserSessionForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionForbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionForbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementRefreshUserSessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementRefreshUserSessionInternalServerError creates a IdentityAccessManagementRefreshUserSessionInternalServerError with default headers values
func NewIdentityAccessManagementRefreshUserSessionInternalServerError() *IdentityAccessManagementRefreshUserSessionInternalServerError {
	return &IdentityAccessManagementRefreshUserSessionInternalServerError{}
}

/*
IdentityAccessManagementRefreshUserSessionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type IdentityAccessManagementRefreshUserSessionInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management refresh user session internal server error response has a 2xx status code
func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management refresh user session internal server error response has a 3xx status code
func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management refresh user session internal server error response has a 4xx status code
func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management refresh user session internal server error response has a 5xx status code
func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management refresh user session internal server error response a status code equal to that given
func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the identity access management refresh user session internal server error response
func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) Code() int {
	return 500
}

func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionInternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementRefreshUserSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementRefreshUserSessionGatewayTimeout creates a IdentityAccessManagementRefreshUserSessionGatewayTimeout with default headers values
func NewIdentityAccessManagementRefreshUserSessionGatewayTimeout() *IdentityAccessManagementRefreshUserSessionGatewayTimeout {
	return &IdentityAccessManagementRefreshUserSessionGatewayTimeout{}
}

/*
IdentityAccessManagementRefreshUserSessionGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type IdentityAccessManagementRefreshUserSessionGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management refresh user session gateway timeout response has a 2xx status code
func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management refresh user session gateway timeout response has a 3xx status code
func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management refresh user session gateway timeout response has a 4xx status code
func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management refresh user session gateway timeout response has a 5xx status code
func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management refresh user session gateway timeout response a status code equal to that given
func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the identity access management refresh user session gateway timeout response
func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) Code() int {
	return 504
}

func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] identityAccessManagementRefreshUserSessionGatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementRefreshUserSessionGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementRefreshUserSessionDefault creates a IdentityAccessManagementRefreshUserSessionDefault with default headers values
func NewIdentityAccessManagementRefreshUserSessionDefault(code int) *IdentityAccessManagementRefreshUserSessionDefault {
	return &IdentityAccessManagementRefreshUserSessionDefault{
		_statusCode: code,
	}
}

/*
IdentityAccessManagementRefreshUserSessionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type IdentityAccessManagementRefreshUserSessionDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this identity access management refresh user session default response has a 2xx status code
func (o *IdentityAccessManagementRefreshUserSessionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this identity access management refresh user session default response has a 3xx status code
func (o *IdentityAccessManagementRefreshUserSessionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this identity access management refresh user session default response has a 4xx status code
func (o *IdentityAccessManagementRefreshUserSessionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this identity access management refresh user session default response has a 5xx status code
func (o *IdentityAccessManagementRefreshUserSessionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this identity access management refresh user session default response a status code equal to that given
func (o *IdentityAccessManagementRefreshUserSessionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the identity access management refresh user session default response
func (o *IdentityAccessManagementRefreshUserSessionDefault) Code() int {
	return o._statusCode
}

func (o *IdentityAccessManagementRefreshUserSessionDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] IdentityAccessManagement_RefreshUserSession default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionDefault) String() string {
	return fmt.Sprintf("[PUT /v1/sessions/refresh][%d] IdentityAccessManagement_RefreshUserSession default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementRefreshUserSessionDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *IdentityAccessManagementRefreshUserSessionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
