// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewIdentityAccessManagementQueryAuthProfilesParams creates a new IdentityAccessManagementQueryAuthProfilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewIdentityAccessManagementQueryAuthProfilesParams() *IdentityAccessManagementQueryAuthProfilesParams {
	return &IdentityAccessManagementQueryAuthProfilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewIdentityAccessManagementQueryAuthProfilesParamsWithTimeout creates a new IdentityAccessManagementQueryAuthProfilesParams object
// with the ability to set a timeout on a request.
func NewIdentityAccessManagementQueryAuthProfilesParamsWithTimeout(timeout time.Duration) *IdentityAccessManagementQueryAuthProfilesParams {
	return &IdentityAccessManagementQueryAuthProfilesParams{
		timeout: timeout,
	}
}

// NewIdentityAccessManagementQueryAuthProfilesParamsWithContext creates a new IdentityAccessManagementQueryAuthProfilesParams object
// with the ability to set a context for a request.
func NewIdentityAccessManagementQueryAuthProfilesParamsWithContext(ctx context.Context) *IdentityAccessManagementQueryAuthProfilesParams {
	return &IdentityAccessManagementQueryAuthProfilesParams{
		Context: ctx,
	}
}

// NewIdentityAccessManagementQueryAuthProfilesParamsWithHTTPClient creates a new IdentityAccessManagementQueryAuthProfilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewIdentityAccessManagementQueryAuthProfilesParamsWithHTTPClient(client *http.Client) *IdentityAccessManagementQueryAuthProfilesParams {
	return &IdentityAccessManagementQueryAuthProfilesParams{
		HTTPClient: client,
	}
}

/*
IdentityAccessManagementQueryAuthProfilesParams contains all the parameters to send to the API endpoint

	for the identity access management query auth profiles operation.

	Typically these are written to a http.Request.
*/
type IdentityAccessManagementQueryAuthProfilesParams struct {

	// Entpstate.
	Entpstate *string

	// HubspotID.
	HubspotID *string

	// SfdcID.
	SfdcID *string

	// Userstate.
	Userstate *string

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	// All.
	All *bool

	// NamePattern.
	NamePattern *string

	/* NextOrderBy.

	   OrderBy helps in sorting the list response
	*/
	NextOrderBy []string

	/* NextPageNum.

	   Page Number

	   Format: int64
	*/
	NextPageNum *int64

	/* NextPageSize.

	   Defines the page size

	   Format: int64
	*/
	NextPageSize *int64

	/* NextPageToken.

	   Page Token
	*/
	NextPageToken *string

	/* NextTotalPages.

	   Total number of pages to be fetched.

	   Format: int64
	*/
	NextTotalPages *int64

	// Project.
	Project *string

	// RoleName.
	RoleName *string

	// Size.
	Size *string

	// Summary.
	Summary *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the identity access management query auth profiles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithDefaults() *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the identity access management query auth profiles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithTimeout(timeout time.Duration) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithContext(ctx context.Context) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithHTTPClient(client *http.Client) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEntpstate adds the entpstate to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithEntpstate(entpstate *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetEntpstate(entpstate)
	return o
}

// SetEntpstate adds the entpstate to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetEntpstate(entpstate *string) {
	o.Entpstate = entpstate
}

// WithHubspotID adds the hubspotID to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithHubspotID(hubspotID *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetHubspotID(hubspotID)
	return o
}

// SetHubspotID adds the hubspotId to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetHubspotID(hubspotID *string) {
	o.HubspotID = hubspotID
}

// WithSfdcID adds the sfdcID to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithSfdcID(sfdcID *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetSfdcID(sfdcID)
	return o
}

// SetSfdcID adds the sfdcId to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetSfdcID(sfdcID *string) {
	o.SfdcID = sfdcID
}

// WithUserstate adds the userstate to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithUserstate(userstate *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetUserstate(userstate)
	return o
}

// SetUserstate adds the userstate to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetUserstate(userstate *string) {
	o.Userstate = userstate
}

// WithXRequestID adds the xRequestID to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithXRequestID(xRequestID *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithAll adds the all to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithAll(all *bool) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetAll(all)
	return o
}

// SetAll adds the all to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetAll(all *bool) {
	o.All = all
}

// WithNamePattern adds the namePattern to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithNamePattern(namePattern *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetNamePattern(namePattern)
	return o
}

// SetNamePattern adds the namePattern to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetNamePattern(namePattern *string) {
	o.NamePattern = namePattern
}

// WithNextOrderBy adds the nextOrderBy to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithNextOrderBy(nextOrderBy []string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetNextOrderBy(nextOrderBy)
	return o
}

// SetNextOrderBy adds the nextOrderBy to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetNextOrderBy(nextOrderBy []string) {
	o.NextOrderBy = nextOrderBy
}

// WithNextPageNum adds the nextPageNum to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithNextPageNum(nextPageNum *int64) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetNextPageNum(nextPageNum)
	return o
}

// SetNextPageNum adds the nextPageNum to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetNextPageNum(nextPageNum *int64) {
	o.NextPageNum = nextPageNum
}

// WithNextPageSize adds the nextPageSize to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithNextPageSize(nextPageSize *int64) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetNextPageSize(nextPageSize)
	return o
}

// SetNextPageSize adds the nextPageSize to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetNextPageSize(nextPageSize *int64) {
	o.NextPageSize = nextPageSize
}

// WithNextPageToken adds the nextPageToken to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithNextPageToken(nextPageToken *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetNextPageToken(nextPageToken)
	return o
}

// SetNextPageToken adds the nextPageToken to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetNextPageToken(nextPageToken *string) {
	o.NextPageToken = nextPageToken
}

// WithNextTotalPages adds the nextTotalPages to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithNextTotalPages(nextTotalPages *int64) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetNextTotalPages(nextTotalPages)
	return o
}

// SetNextTotalPages adds the nextTotalPages to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetNextTotalPages(nextTotalPages *int64) {
	o.NextTotalPages = nextTotalPages
}

// WithProject adds the project to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithProject(project *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetProject(project *string) {
	o.Project = project
}

// WithRoleName adds the roleName to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithRoleName(roleName *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetRoleName(roleName)
	return o
}

// SetRoleName adds the roleName to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetRoleName(roleName *string) {
	o.RoleName = roleName
}

// WithSize adds the size to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithSize(size *string) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetSize(size *string) {
	o.Size = size
}

// WithSummary adds the summary to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) WithSummary(summary *bool) *IdentityAccessManagementQueryAuthProfilesParams {
	o.SetSummary(summary)
	return o
}

// SetSummary adds the summary to the identity access management query auth profiles params
func (o *IdentityAccessManagementQueryAuthProfilesParams) SetSummary(summary *bool) {
	o.Summary = summary
}

// WriteToRequest writes these params to a swagger request
func (o *IdentityAccessManagementQueryAuthProfilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Entpstate != nil {

		// query param Entpstate
		var qrEntpstate string

		if o.Entpstate != nil {
			qrEntpstate = *o.Entpstate
		}
		qEntpstate := qrEntpstate
		if qEntpstate != "" {

			if err := r.SetQueryParam("Entpstate", qEntpstate); err != nil {
				return err
			}
		}
	}

	if o.HubspotID != nil {

		// query param HubspotId
		var qrHubspotID string

		if o.HubspotID != nil {
			qrHubspotID = *o.HubspotID
		}
		qHubspotID := qrHubspotID
		if qHubspotID != "" {

			if err := r.SetQueryParam("HubspotId", qHubspotID); err != nil {
				return err
			}
		}
	}

	if o.SfdcID != nil {

		// query param SfdcId
		var qrSfdcID string

		if o.SfdcID != nil {
			qrSfdcID = *o.SfdcID
		}
		qSfdcID := qrSfdcID
		if qSfdcID != "" {

			if err := r.SetQueryParam("SfdcId", qSfdcID); err != nil {
				return err
			}
		}
	}

	if o.Userstate != nil {

		// query param Userstate
		var qrUserstate string

		if o.Userstate != nil {
			qrUserstate = *o.Userstate
		}
		qUserstate := qrUserstate
		if qUserstate != "" {

			if err := r.SetQueryParam("Userstate", qUserstate); err != nil {
				return err
			}
		}
	}

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.All != nil {

		// query param all
		var qrAll bool

		if o.All != nil {
			qrAll = *o.All
		}
		qAll := swag.FormatBool(qrAll)
		if qAll != "" {

			if err := r.SetQueryParam("all", qAll); err != nil {
				return err
			}
		}
	}

	if o.NamePattern != nil {

		// query param namePattern
		var qrNamePattern string

		if o.NamePattern != nil {
			qrNamePattern = *o.NamePattern
		}
		qNamePattern := qrNamePattern
		if qNamePattern != "" {

			if err := r.SetQueryParam("namePattern", qNamePattern); err != nil {
				return err
			}
		}
	}

	if o.NextOrderBy != nil {

		// binding items for next.orderBy
		joinedNextOrderBy := o.bindParamNextOrderBy(reg)

		// query array param next.orderBy
		if err := r.SetQueryParam("next.orderBy", joinedNextOrderBy...); err != nil {
			return err
		}
	}

	if o.NextPageNum != nil {

		// query param next.pageNum
		var qrNextPageNum int64

		if o.NextPageNum != nil {
			qrNextPageNum = *o.NextPageNum
		}
		qNextPageNum := swag.FormatInt64(qrNextPageNum)
		if qNextPageNum != "" {

			if err := r.SetQueryParam("next.pageNum", qNextPageNum); err != nil {
				return err
			}
		}
	}

	if o.NextPageSize != nil {

		// query param next.pageSize
		var qrNextPageSize int64

		if o.NextPageSize != nil {
			qrNextPageSize = *o.NextPageSize
		}
		qNextPageSize := swag.FormatInt64(qrNextPageSize)
		if qNextPageSize != "" {

			if err := r.SetQueryParam("next.pageSize", qNextPageSize); err != nil {
				return err
			}
		}
	}

	if o.NextPageToken != nil {

		// query param next.pageToken
		var qrNextPageToken string

		if o.NextPageToken != nil {
			qrNextPageToken = *o.NextPageToken
		}
		qNextPageToken := qrNextPageToken
		if qNextPageToken != "" {

			if err := r.SetQueryParam("next.pageToken", qNextPageToken); err != nil {
				return err
			}
		}
	}

	if o.NextTotalPages != nil {

		// query param next.totalPages
		var qrNextTotalPages int64

		if o.NextTotalPages != nil {
			qrNextTotalPages = *o.NextTotalPages
		}
		qNextTotalPages := swag.FormatInt64(qrNextTotalPages)
		if qNextTotalPages != "" {

			if err := r.SetQueryParam("next.totalPages", qNextTotalPages); err != nil {
				return err
			}
		}
	}

	if o.Project != nil {

		// query param project
		var qrProject string

		if o.Project != nil {
			qrProject = *o.Project
		}
		qProject := qrProject
		if qProject != "" {

			if err := r.SetQueryParam("project", qProject); err != nil {
				return err
			}
		}
	}

	if o.RoleName != nil {

		// query param roleName
		var qrRoleName string

		if o.RoleName != nil {
			qrRoleName = *o.RoleName
		}
		qRoleName := qrRoleName
		if qRoleName != "" {

			if err := r.SetQueryParam("roleName", qRoleName); err != nil {
				return err
			}
		}
	}

	if o.Size != nil {

		// query param size
		var qrSize string

		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := qrSize
		if qSize != "" {

			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}
	}

	if o.Summary != nil {

		// query param summary
		var qrSummary bool

		if o.Summary != nil {
			qrSummary = *o.Summary
		}
		qSummary := swag.FormatBool(qrSummary)
		if qSummary != "" {

			if err := r.SetQueryParam("summary", qSummary); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamIdentityAccessManagementQueryAuthProfiles binds the parameter next.orderBy
func (o *IdentityAccessManagementQueryAuthProfilesParams) bindParamNextOrderBy(formats strfmt.Registry) []string {
	nextOrderByIR := o.NextOrderBy

	var nextOrderByIC []string
	for _, nextOrderByIIR := range nextOrderByIR { // explode []string

		nextOrderByIIV := nextOrderByIIR // string as string
		nextOrderByIC = append(nextOrderByIC, nextOrderByIIV)
	}

	// items.CollectionFormat: "multi"
	nextOrderByIS := swag.JoinByFormat(nextOrderByIC, "multi")

	return nextOrderByIS
}
