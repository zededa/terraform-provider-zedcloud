// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider/models"
)

// IdentityAccessManagementUpdateUserReader is a Reader for the IdentityAccessManagementUpdateUser structure.
type IdentityAccessManagementUpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IdentityAccessManagementUpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIdentityAccessManagementUpdateUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIdentityAccessManagementUpdateUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIdentityAccessManagementUpdateUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIdentityAccessManagementUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewIdentityAccessManagementUpdateUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIdentityAccessManagementUpdateUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewIdentityAccessManagementUpdateUserGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIdentityAccessManagementUpdateUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIdentityAccessManagementUpdateUserOK creates a IdentityAccessManagementUpdateUserOK with default headers values
func NewIdentityAccessManagementUpdateUserOK() *IdentityAccessManagementUpdateUserOK {
	return &IdentityAccessManagementUpdateUserOK{}
}

/*
IdentityAccessManagementUpdateUserOK describes a response with status code 200, with default header values.

A successful response.
*/
type IdentityAccessManagementUpdateUserOK struct {
	Payload *models.CrudResponse
}

// IsSuccess returns true when this identity access management update user o k response has a 2xx status code
func (o *IdentityAccessManagementUpdateUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this identity access management update user o k response has a 3xx status code
func (o *IdentityAccessManagementUpdateUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user o k response has a 4xx status code
func (o *IdentityAccessManagementUpdateUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update user o k response has a 5xx status code
func (o *IdentityAccessManagementUpdateUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user o k response a status code equal to that given
func (o *IdentityAccessManagementUpdateUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the identity access management update user o k response
func (o *IdentityAccessManagementUpdateUserOK) Code() int {
	return 200
}

func (o *IdentityAccessManagementUpdateUserOK) Error() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserOK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserOK) String() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserOK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserOK) GetPayload() *models.CrudResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CrudResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUserUnauthorized creates a IdentityAccessManagementUpdateUserUnauthorized with default headers values
func NewIdentityAccessManagementUpdateUserUnauthorized() *IdentityAccessManagementUpdateUserUnauthorized {
	return &IdentityAccessManagementUpdateUserUnauthorized{}
}

/*
IdentityAccessManagementUpdateUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type IdentityAccessManagementUpdateUserUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user unauthorized response has a 2xx status code
func (o *IdentityAccessManagementUpdateUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user unauthorized response has a 3xx status code
func (o *IdentityAccessManagementUpdateUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user unauthorized response has a 4xx status code
func (o *IdentityAccessManagementUpdateUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update user unauthorized response has a 5xx status code
func (o *IdentityAccessManagementUpdateUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user unauthorized response a status code equal to that given
func (o *IdentityAccessManagementUpdateUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the identity access management update user unauthorized response
func (o *IdentityAccessManagementUpdateUserUnauthorized) Code() int {
	return 401
}

func (o *IdentityAccessManagementUpdateUserUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserUnauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserUnauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUserForbidden creates a IdentityAccessManagementUpdateUserForbidden with default headers values
func NewIdentityAccessManagementUpdateUserForbidden() *IdentityAccessManagementUpdateUserForbidden {
	return &IdentityAccessManagementUpdateUserForbidden{}
}

/*
IdentityAccessManagementUpdateUserForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type IdentityAccessManagementUpdateUserForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user forbidden response has a 2xx status code
func (o *IdentityAccessManagementUpdateUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user forbidden response has a 3xx status code
func (o *IdentityAccessManagementUpdateUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user forbidden response has a 4xx status code
func (o *IdentityAccessManagementUpdateUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update user forbidden response has a 5xx status code
func (o *IdentityAccessManagementUpdateUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user forbidden response a status code equal to that given
func (o *IdentityAccessManagementUpdateUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the identity access management update user forbidden response
func (o *IdentityAccessManagementUpdateUserForbidden) Code() int {
	return 403
}

func (o *IdentityAccessManagementUpdateUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserForbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserForbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUserNotFound creates a IdentityAccessManagementUpdateUserNotFound with default headers values
func NewIdentityAccessManagementUpdateUserNotFound() *IdentityAccessManagementUpdateUserNotFound {
	return &IdentityAccessManagementUpdateUserNotFound{}
}

/*
IdentityAccessManagementUpdateUserNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type IdentityAccessManagementUpdateUserNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user not found response has a 2xx status code
func (o *IdentityAccessManagementUpdateUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user not found response has a 3xx status code
func (o *IdentityAccessManagementUpdateUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user not found response has a 4xx status code
func (o *IdentityAccessManagementUpdateUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update user not found response has a 5xx status code
func (o *IdentityAccessManagementUpdateUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user not found response a status code equal to that given
func (o *IdentityAccessManagementUpdateUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the identity access management update user not found response
func (o *IdentityAccessManagementUpdateUserNotFound) Code() int {
	return 404
}

func (o *IdentityAccessManagementUpdateUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserNotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserNotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUserConflict creates a IdentityAccessManagementUpdateUserConflict with default headers values
func NewIdentityAccessManagementUpdateUserConflict() *IdentityAccessManagementUpdateUserConflict {
	return &IdentityAccessManagementUpdateUserConflict{}
}

/*
IdentityAccessManagementUpdateUserConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing IAM user record.
*/
type IdentityAccessManagementUpdateUserConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user conflict response has a 2xx status code
func (o *IdentityAccessManagementUpdateUserConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user conflict response has a 3xx status code
func (o *IdentityAccessManagementUpdateUserConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user conflict response has a 4xx status code
func (o *IdentityAccessManagementUpdateUserConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update user conflict response has a 5xx status code
func (o *IdentityAccessManagementUpdateUserConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update user conflict response a status code equal to that given
func (o *IdentityAccessManagementUpdateUserConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the identity access management update user conflict response
func (o *IdentityAccessManagementUpdateUserConflict) Code() int {
	return 409
}

func (o *IdentityAccessManagementUpdateUserConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserConflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserConflict) String() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserConflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUserInternalServerError creates a IdentityAccessManagementUpdateUserInternalServerError with default headers values
func NewIdentityAccessManagementUpdateUserInternalServerError() *IdentityAccessManagementUpdateUserInternalServerError {
	return &IdentityAccessManagementUpdateUserInternalServerError{}
}

/*
IdentityAccessManagementUpdateUserInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type IdentityAccessManagementUpdateUserInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user internal server error response has a 2xx status code
func (o *IdentityAccessManagementUpdateUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user internal server error response has a 3xx status code
func (o *IdentityAccessManagementUpdateUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user internal server error response has a 4xx status code
func (o *IdentityAccessManagementUpdateUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update user internal server error response has a 5xx status code
func (o *IdentityAccessManagementUpdateUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update user internal server error response a status code equal to that given
func (o *IdentityAccessManagementUpdateUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the identity access management update user internal server error response
func (o *IdentityAccessManagementUpdateUserInternalServerError) Code() int {
	return 500
}

func (o *IdentityAccessManagementUpdateUserInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserInternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUserGatewayTimeout creates a IdentityAccessManagementUpdateUserGatewayTimeout with default headers values
func NewIdentityAccessManagementUpdateUserGatewayTimeout() *IdentityAccessManagementUpdateUserGatewayTimeout {
	return &IdentityAccessManagementUpdateUserGatewayTimeout{}
}

/*
IdentityAccessManagementUpdateUserGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type IdentityAccessManagementUpdateUserGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update user gateway timeout response has a 2xx status code
func (o *IdentityAccessManagementUpdateUserGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update user gateway timeout response has a 3xx status code
func (o *IdentityAccessManagementUpdateUserGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update user gateway timeout response has a 4xx status code
func (o *IdentityAccessManagementUpdateUserGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update user gateway timeout response has a 5xx status code
func (o *IdentityAccessManagementUpdateUserGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update user gateway timeout response a status code equal to that given
func (o *IdentityAccessManagementUpdateUserGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the identity access management update user gateway timeout response
func (o *IdentityAccessManagementUpdateUserGatewayTimeout) Code() int {
	return 504
}

func (o *IdentityAccessManagementUpdateUserGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] identityAccessManagementUpdateUserGatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUserGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateUserDefault creates a IdentityAccessManagementUpdateUserDefault with default headers values
func NewIdentityAccessManagementUpdateUserDefault(code int) *IdentityAccessManagementUpdateUserDefault {
	return &IdentityAccessManagementUpdateUserDefault{
		_statusCode: code,
	}
}

/*
IdentityAccessManagementUpdateUserDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type IdentityAccessManagementUpdateUserDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this identity access management update user default response has a 2xx status code
func (o *IdentityAccessManagementUpdateUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this identity access management update user default response has a 3xx status code
func (o *IdentityAccessManagementUpdateUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this identity access management update user default response has a 4xx status code
func (o *IdentityAccessManagementUpdateUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this identity access management update user default response has a 5xx status code
func (o *IdentityAccessManagementUpdateUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this identity access management update user default response a status code equal to that given
func (o *IdentityAccessManagementUpdateUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the identity access management update user default response
func (o *IdentityAccessManagementUpdateUserDefault) Code() int {
	return o._statusCode
}

func (o *IdentityAccessManagementUpdateUserDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] IdentityAccessManagement_UpdateUser default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserDefault) String() string {
	return fmt.Sprintf("[PUT /v1/users/self][%d] IdentityAccessManagement_UpdateUser default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateUserDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
