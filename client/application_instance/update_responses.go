package application_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceReader is a Reader for the EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstance structure.
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK creates a EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK with default headers values
func NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK() *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK {
	return &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK{}
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK describes a response with status code 200, with default header values.

A successful response.
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge application instance configuration update edge application instance o k response has a 2xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edge application instance configuration update edge application instance o k response has a 3xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge application instance configuration update edge application instance o k response has a 4xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge application instance configuration update edge application instance o k response has a 5xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this edge application instance configuration update edge application instance o k response a status code equal to that given
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the edge application instance configuration update edge application instance o k response
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) Code() int {
	return 200
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK  %+v", 200, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) String() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK  %+v", 200, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized creates a EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized with default headers values
func NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized() *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized {
	return &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized{}
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge application instance configuration update edge application instance unauthorized response has a 2xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge application instance configuration update edge application instance unauthorized response has a 3xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge application instance configuration update edge application instance unauthorized response has a 4xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge application instance configuration update edge application instance unauthorized response has a 5xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this edge application instance configuration update edge application instance unauthorized response a status code equal to that given
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the edge application instance configuration update edge application instance unauthorized response
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) Code() int {
	return 401
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized  %+v", 401, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized  %+v", 401, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden creates a EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden with default headers values
func NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden() *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden {
	return &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden{}
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have application level access permission for the operation or does not have access scope to the project.
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge application instance configuration update edge application instance forbidden response has a 2xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge application instance configuration update edge application instance forbidden response has a 3xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge application instance configuration update edge application instance forbidden response has a 4xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge application instance configuration update edge application instance forbidden response has a 5xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this edge application instance configuration update edge application instance forbidden response a status code equal to that given
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the edge application instance configuration update edge application instance forbidden response
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) Code() int {
	return 403
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden  %+v", 403, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden  %+v", 403, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound creates a EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound with default headers values
func NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound() *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound {
	return &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound{}
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge application instance configuration update edge application instance not found response has a 2xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge application instance configuration update edge application instance not found response has a 3xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge application instance configuration update edge application instance not found response has a 4xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge application instance configuration update edge application instance not found response has a 5xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this edge application instance configuration update edge application instance not found response a status code equal to that given
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the edge application instance configuration update edge application instance not found response
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) Code() int {
	return 404
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound  %+v", 404, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound  %+v", 404, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict creates a EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict with default headers values
func NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict() *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict {
	return &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict{}
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge network record.
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge application instance configuration update edge application instance conflict response has a 2xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge application instance configuration update edge application instance conflict response has a 3xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge application instance configuration update edge application instance conflict response has a 4xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge application instance configuration update edge application instance conflict response has a 5xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this edge application instance configuration update edge application instance conflict response a status code equal to that given
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the edge application instance configuration update edge application instance conflict response
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) Code() int {
	return 409
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict  %+v", 409, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) String() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict  %+v", 409, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError creates a EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError with default headers values
func NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError() *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError {
	return &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError{}
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge application instance configuration update edge application instance internal server error response has a 2xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge application instance configuration update edge application instance internal server error response has a 3xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge application instance configuration update edge application instance internal server error response has a 4xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge application instance configuration update edge application instance internal server error response has a 5xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this edge application instance configuration update edge application instance internal server error response a status code equal to that given
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the edge application instance configuration update edge application instance internal server error response
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) Code() int {
	return 500
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError  %+v", 500, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError  %+v", 500, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout creates a EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout with default headers values
func NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout() *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout {
	return &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout{}
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge application instance configuration update edge application instance gateway timeout response has a 2xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge application instance configuration update edge application instance gateway timeout response has a 3xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge application instance configuration update edge application instance gateway timeout response has a 4xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge application instance configuration update edge application instance gateway timeout response has a 5xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this edge application instance configuration update edge application instance gateway timeout response a status code equal to that given
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the edge application instance configuration update edge application instance gateway timeout response
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) Code() int {
	return 504
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] edgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault creates a EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault with default headers values
func NewEdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault(code int) *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault {
	return &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault{
		_statusCode: code,
	}
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this edge application instance configuration update edge application instance default response has a 2xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this edge application instance configuration update edge application instance default response has a 3xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this edge application instance configuration update edge application instance default response has a 4xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this edge application instance configuration update edge application instance default response has a 5xx status code
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this edge application instance configuration update edge application instance default response a status code equal to that given
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the edge application instance configuration update edge application instance default response
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) Code() int {
	return o._statusCode
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] EdgeApplicationInstanceConfiguration_UpdateEdgeApplicationInstance default  %+v", o._statusCode, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) String() string {
	return fmt.Sprintf("[PUT /v1/apps/instances/id/{id}][%d] EdgeApplicationInstanceConfiguration_UpdateEdgeApplicationInstance default  %+v", o._statusCode, o.Payload)
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody App Instance detail
//
// App Instance detail
swagger:model EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody
*/
type EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody struct {

	// app instance activation flag
	// Required: true
	Activate *string `json:"activate"`

	// User defined name of the edge app, unique across the enterprise. Once app name is created, name can’t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	AppID *string `json:"appId"`

	// app policy id
	AppPolicyID string `json:"appPolicyId,omitempty"`

	// type of bundle
	AppType *models.AppType `json:"appType,omitempty"`

	// version of bundle app is referring to
	Bundleversion string `json:"bundleversion,omitempty"`

	// System defined universally unique clusterInstance ID, unique across the enterprise.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ClusterID string `json:"clusterID,omitempty"`

	// holds the static Ip of the app instance
	CollectStatsIPAddr string `json:"collectStatsIPAddr,omitempty"`

	// Crypto Key for decrypting user secret information
	CryptoKey string `json:"cryptoKey,omitempty"`

	// Application initialization script template in cloud-config format and user specified values
	CustomConfig *models.CustomConfig `json:"customConfig,omitempty"`

	// type of deployment for the app, eg: azure, k3s, standalone
	DeploymentType *models.DeploymentType `json:"deploymentType,omitempty"`

	// Detailed description of the app instance
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// User defined name of the device name, unique across the enterprise. Once device name is defined, name can’t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	DeviceID *string `json:"deviceId"`

	// drive details
	// Required: true
	Drives []*models.Drive `json:"drives"`

	// user encrypted secrets map
	EncryptedSecrets map[string]string `json:"encryptedSecrets,omitempty"`

	// application interfaces
	// Required: true
	Interfaces []*models.AppInterface `json:"interfaces"`

	// This field tells whether user secrets has updated or not, especially the cusotom config
	IsSecretUpdated bool `json:"isSecretUpdated,omitempty"`

	// App Instance logs
	Logs *models.AppInstanceLogs `json:"logs,omitempty"`

	// app manifest Info
	ManifestInfo *models.ManifestInfo `json:"manifestInfo,omitempty"`

	// User defined name of the app instance, unique across the enterprise. Once app instance is created, name can’t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// project name which the given app instance belong to
	// Required: true
	ProjectID *string `json:"projectId"`

	// Purge counter: ZedCloudOpsCmd
	Purge *models.ZedCloudOpsCmd `json:"purge,omitempty"`

	// Refresh counter: ZedCloudOpsCmd
	Refresh *models.ZedCloudOpsCmd `json:"refresh,omitempty"`

	// Remote console flag
	RemoteConsole bool `json:"remoteConsole,omitempty"`

	// Restart counter: ZedCloudOpsCmd
	Restart *models.ZedCloudOpsCmd `json:"restart,omitempty"`

	// app instance object revision details
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// start delay is the time in seconds EVE should wait after boot before starting the application instance
	StartDelayInSeconds int64 `json:"startDelayInSeconds,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// User defined title of the app instance. Title can be changed at any time
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: ^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$
	Title *string `json:"title"`

	// Deprecated: Application initiazation script in cloud-config format to be used by cloud-init
	UserData string `json:"userData,omitempty"`

	// Instance version tells which edge app does this instance is running
	UserDefinedVersion string `json:"userDefinedVersion,omitempty"`

	// virtual machine info
	Vminfo *models.VM `json:"vminfo,omitempty"`
}

// Validate validates this edge application instance configuration update edge application instance body
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActivate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCustomConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDrives(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateManifestInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePurge(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRefresh(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRestart(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVminfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateActivate(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"activate", "body", o.Activate); err != nil {
		return err
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"appId", "body", o.AppID); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"appId", "body", *o.AppID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"appId", "body", *o.AppID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"appId", "body", *o.AppID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateAppType(formats strfmt.Registry) error {
	if swag.IsZero(o.AppType) { // not required
		return nil
	}

	if o.AppType != nil {
		if err := o.AppType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "appType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "appType")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(o.ClusterID) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"clusterID", "body", o.ClusterID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"clusterID", "body", o.ClusterID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"clusterID", "body", o.ClusterID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateCustomConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.CustomConfig) { // not required
		return nil
	}

	if o.CustomConfig != nil {
		if err := o.CustomConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "customConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "customConfig")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateDeploymentType(formats strfmt.Registry) error {
	if swag.IsZero(o.DeploymentType) { // not required
		return nil
	}

	if o.DeploymentType != nil {
		if err := o.DeploymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "deploymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "deploymentType")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"deviceId", "body", o.DeviceID); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"deviceId", "body", *o.DeviceID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"deviceId", "body", *o.DeviceID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"deviceId", "body", *o.DeviceID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateDrives(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"drives", "body", o.Drives); err != nil {
		return err
	}

	for i := 0; i < len(o.Drives); i++ {
		if swag.IsZero(o.Drives[i]) { // not required
			continue
		}

		if o.Drives[i] != nil {
			if err := o.Drives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "drives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "drives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateInterfaces(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"interfaces", "body", o.Interfaces); err != nil {
		return err
	}

	for i := 0; i < len(o.Interfaces); i++ {
		if swag.IsZero(o.Interfaces[i]) { // not required
			continue
		}

		if o.Interfaces[i] != nil {
			if err := o.Interfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(o.Logs) { // not required
		return nil
	}

	if o.Logs != nil {
		if err := o.Logs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "logs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "logs")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateManifestInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.ManifestInfo) { // not required
		return nil
	}

	if o.ManifestInfo != nil {
		if err := o.ManifestInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "manifestInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "manifestInfo")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"projectId", "body", o.ProjectID); err != nil {
		return err
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validatePurge(formats strfmt.Registry) error {
	if swag.IsZero(o.Purge) { // not required
		return nil
	}

	if o.Purge != nil {
		if err := o.Purge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "purge")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateRefresh(formats strfmt.Registry) error {
	if swag.IsZero(o.Refresh) { // not required
		return nil
	}

	if o.Refresh != nil {
		if err := o.Refresh.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "refresh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "refresh")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateRestart(formats strfmt.Registry) error {
	if swag.IsZero(o.Restart) { // not required
		return nil
	}

	if o.Restart != nil {
		if err := o.Restart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "restart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "restart")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$`); err != nil {
		return err
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) validateVminfo(formats strfmt.Registry) error {
	if swag.IsZero(o.Vminfo) { // not required
		return nil
	}

	if o.Vminfo != nil {
		if err := o.Vminfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "vminfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "vminfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this edge application instance configuration update edge application instance body based on the context it is used
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCustomConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDeploymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDrives(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateManifestInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePurge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRefresh(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRestart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVminfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateAppType(ctx context.Context, formats strfmt.Registry) error {

	if o.AppType != nil {
		if err := o.AppType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "appType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "appType")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateCustomConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.CustomConfig != nil {
		if err := o.CustomConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "customConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "customConfig")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateDeploymentType(ctx context.Context, formats strfmt.Registry) error {

	if o.DeploymentType != nil {
		if err := o.DeploymentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "deploymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "deploymentType")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateDrives(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Drives); i++ {

		if o.Drives[i] != nil {
			if err := o.Drives[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "drives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "drives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Interfaces); i++ {

		if o.Interfaces[i] != nil {
			if err := o.Interfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {

	if o.Logs != nil {
		if err := o.Logs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "logs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "logs")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateManifestInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.ManifestInfo != nil {
		if err := o.ManifestInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "manifestInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "manifestInfo")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidatePurge(ctx context.Context, formats strfmt.Registry) error {

	if o.Purge != nil {
		if err := o.Purge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "purge")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateRefresh(ctx context.Context, formats strfmt.Registry) error {

	if o.Refresh != nil {
		if err := o.Refresh.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "refresh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "refresh")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateRestart(ctx context.Context, formats strfmt.Registry) error {

	if o.Restart != nil {
		if err := o.Restart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "restart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "restart")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {
		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) contextValidateVminfo(ctx context.Context, formats strfmt.Registry) error {

	if o.Vminfo != nil {
		if err := o.Vminfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "vminfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "vminfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody) UnmarshalBinary(b []byte) error {
	var res EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
