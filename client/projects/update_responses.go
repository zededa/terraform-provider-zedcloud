package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// ProjectsUpdateReader is a Reader for the ProjectsUpdate structure.
type ProjectsUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewProjectsUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewProjectsUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewProjectsUpdateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewProjectsUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewProjectsUpdateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewProjectsUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProjectsUpdateOK creates a ProjectsUpdateOK with default headers values
func NewProjectsUpdateOK() *ProjectsUpdateOK {
	return &ProjectsUpdateOK{}
}

/*
ProjectsUpdateOK describes a response with status code 200, with default header values.

A successful response.
*/
type ProjectsUpdateOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this projects update o k response has a 2xx status code
func (o *ProjectsUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this projects update o k response has a 3xx status code
func (o *ProjectsUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects update o k response has a 4xx status code
func (o *ProjectsUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects update o k response has a 5xx status code
func (o *ProjectsUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this projects update o k response a status code equal to that given
func (o *ProjectsUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *ProjectsUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateOK  %+v", 200, o.Payload)
}

func (o *ProjectsUpdateOK) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateOK  %+v", 200, o.Payload)
}

func (o *ProjectsUpdateOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ProjectsUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateUnauthorized creates a ProjectsUpdateUnauthorized with default headers values
func NewProjectsUpdateUnauthorized() *ProjectsUpdateUnauthorized {
	return &ProjectsUpdateUnauthorized{}
}

/*
ProjectsUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type ProjectsUpdateUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this projects update unauthorized response has a 2xx status code
func (o *ProjectsUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects update unauthorized response has a 3xx status code
func (o *ProjectsUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects update unauthorized response has a 4xx status code
func (o *ProjectsUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects update unauthorized response has a 5xx status code
func (o *ProjectsUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this projects update unauthorized response a status code equal to that given
func (o *ProjectsUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ProjectsUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *ProjectsUpdateUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ProjectsUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateForbidden creates a ProjectsUpdateForbidden with default headers values
func NewProjectsUpdateForbidden() *ProjectsUpdateForbidden {
	return &ProjectsUpdateForbidden{}
}

/*
ProjectsUpdateForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the request or does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type ProjectsUpdateForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this projects update forbidden response has a 2xx status code
func (o *ProjectsUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects update forbidden response has a 3xx status code
func (o *ProjectsUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects update forbidden response has a 4xx status code
func (o *ProjectsUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects update forbidden response has a 5xx status code
func (o *ProjectsUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this projects update forbidden response a status code equal to that given
func (o *ProjectsUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ProjectsUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsUpdateForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ProjectsUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateNotFound creates a ProjectsUpdateNotFound with default headers values
func NewProjectsUpdateNotFound() *ProjectsUpdateNotFound {
	return &ProjectsUpdateNotFound{}
}

/*
ProjectsUpdateNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type ProjectsUpdateNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this projects update not found response has a 2xx status code
func (o *ProjectsUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects update not found response has a 3xx status code
func (o *ProjectsUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects update not found response has a 4xx status code
func (o *ProjectsUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects update not found response has a 5xx status code
func (o *ProjectsUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this projects update not found response a status code equal to that given
func (o *ProjectsUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ProjectsUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsUpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsUpdateNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ProjectsUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateConflict creates a ProjectsUpdateConflict with default headers values
func NewProjectsUpdateConflict() *ProjectsUpdateConflict {
	return &ProjectsUpdateConflict{}
}

/*
ProjectsUpdateConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge node record.
*/
type ProjectsUpdateConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this projects update conflict response has a 2xx status code
func (o *ProjectsUpdateConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects update conflict response has a 3xx status code
func (o *ProjectsUpdateConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects update conflict response has a 4xx status code
func (o *ProjectsUpdateConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this projects update conflict response has a 5xx status code
func (o *ProjectsUpdateConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this projects update conflict response a status code equal to that given
func (o *ProjectsUpdateConflict) IsCode(code int) bool {
	return code == 409
}

func (o *ProjectsUpdateConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateConflict  %+v", 409, o.Payload)
}

func (o *ProjectsUpdateConflict) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateConflict  %+v", 409, o.Payload)
}

func (o *ProjectsUpdateConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ProjectsUpdateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateInternalServerError creates a ProjectsUpdateInternalServerError with default headers values
func NewProjectsUpdateInternalServerError() *ProjectsUpdateInternalServerError {
	return &ProjectsUpdateInternalServerError{}
}

/*
ProjectsUpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type ProjectsUpdateInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this projects update internal server error response has a 2xx status code
func (o *ProjectsUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects update internal server error response has a 3xx status code
func (o *ProjectsUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects update internal server error response has a 4xx status code
func (o *ProjectsUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects update internal server error response has a 5xx status code
func (o *ProjectsUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this projects update internal server error response a status code equal to that given
func (o *ProjectsUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ProjectsUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *ProjectsUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *ProjectsUpdateInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ProjectsUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateGatewayTimeout creates a ProjectsUpdateGatewayTimeout with default headers values
func NewProjectsUpdateGatewayTimeout() *ProjectsUpdateGatewayTimeout {
	return &ProjectsUpdateGatewayTimeout{}
}

/*
ProjectsUpdateGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type ProjectsUpdateGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this projects update gateway timeout response has a 2xx status code
func (o *ProjectsUpdateGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this projects update gateway timeout response has a 3xx status code
func (o *ProjectsUpdateGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this projects update gateway timeout response has a 4xx status code
func (o *ProjectsUpdateGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this projects update gateway timeout response has a 5xx status code
func (o *ProjectsUpdateGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this projects update gateway timeout response a status code equal to that given
func (o *ProjectsUpdateGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *ProjectsUpdateGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *ProjectsUpdateGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] projectsUpdateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *ProjectsUpdateGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ProjectsUpdateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsUpdateDefault creates a ProjectsUpdateDefault with default headers values
func NewProjectsUpdateDefault(code int) *ProjectsUpdateDefault {
	return &ProjectsUpdateDefault{
		_statusCode: code,
	}
}

/*
ProjectsUpdateDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ProjectsUpdateDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// Code gets the status code for the projects update default response
func (o *ProjectsUpdateDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this projects update default response has a 2xx status code
func (o *ProjectsUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this projects update default response has a 3xx status code
func (o *ProjectsUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this projects update default response has a 4xx status code
func (o *ProjectsUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this projects update default response has a 5xx status code
func (o *ProjectsUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this projects update default response a status code equal to that given
func (o *ProjectsUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *ProjectsUpdateDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] Projects_Update default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectsUpdateDefault) String() string {
	return fmt.Sprintf("[PUT /v1/projects/id/{id}][%d] Projects_Update default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectsUpdateDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *ProjectsUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ProjectsUpdateBody Resource group detail
//
// Resource group for edge gateway Base OS or for eedge applications.
// Example: {"attr":{},"description":"My test resource group for Edge computing","id":"d1125b0f-633d-459c-99c6-f47e7467cebc","name":"my-test-project","numdevices":208,"revision":{"createdAt":{"seconds":1592068270},"createdBy":"admin@my-company.com","curr":"1","updatedAt":{"seconds":1592068271},"updatedBy":"admin@my-company.com"},"title":"My Test resource group","type":"TAG_TYPE_PROJECT"}
swagger:model ProjectsUpdateBody
*/
type ProjectsUpdateBody struct {

	// Resource group wide policy for edge applications to be deployed on all edge nodes on this resource group
	// Read Only: true
	AppPolicy *models.Policy `json:"appPolicy,omitempty"`

	// Attestation policy to enforce on all devices of this project
	AttestationPolicy *models.Policy `json:"attestationPolicy,omitempty"`

	// Resource group wide configuration for edge nodes
	// Read Only: true
	Attr map[string]string `json:"attr,omitempty"`

	// Resource group wide policy for Azure IoTEdge configuration to be applied to all edge applications
	// Read Only: true
	CloudPolicy *models.Policy `json:"cloudPolicy,omitempty"`

	// Deployment template containing different types of policies
	Deployment *models.Deployment `json:"deployment,omitempty"`

	// Detailed description of the resource group.
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// Edgeview policy on devices of this project
	EdgeviewPolicy *models.Policy `json:"edgeviewPolicy,omitempty"`

	// Local operator console policy on devices of this project
	LocalOperatorConsolePolicy *models.Policy `json:"localOperatorConsolePolicy,omitempty"`

	// Resource group wide policy for Azure module configuration to be applied to all edge applications
	// Read Only: true
	ModulePolicy []*models.Policy `json:"modulePolicy"`

	// User defined name of the resource group, unique across the enterprise. Once resource group is created, name can’t be changed.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// Network policy to enforce on all devices of this project
	NetworkPolicy *models.Policy `json:"networkPolicy,omitempty"`

	// Number of edge nodes in this resource group
	// Read Only: true
	Numdevices int64 `json:"numdevices,omitempty"`

	// system defined info
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// User defined title of the resource group. Title can be changed at any time.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title *string `json:"title"`

	// Resource group type
	// Required: true
	Type *models.TagType `json:"type"`
}

// Validate validates this projects update body
func (o *ProjectsUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAttestationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCloudPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeployment(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEdgeviewPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocalOperatorConsolePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateModulePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsUpdateBody) validateAppPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.AppPolicy) { // not required
		return nil
	}

	if o.AppPolicy != nil {
		if err := o.AppPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "appPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "appPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) validateAttestationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.AttestationPolicy) { // not required
		return nil
	}

	if o.AttestationPolicy != nil {
		if err := o.AttestationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attestationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "attestationPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) validateCloudPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.CloudPolicy) { // not required
		return nil
	}

	if o.CloudPolicy != nil {
		if err := o.CloudPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cloudPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cloudPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) validateDeployment(formats strfmt.Registry) error {
	if swag.IsZero(o.Deployment) { // not required
		return nil
	}

	if o.Deployment != nil {
		if err := o.Deployment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "deployment")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsUpdateBody) validateEdgeviewPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.EdgeviewPolicy) { // not required
		return nil
	}

	if o.EdgeviewPolicy != nil {
		if err := o.EdgeviewPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "edgeviewPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "edgeviewPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) validateLocalOperatorConsolePolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.LocalOperatorConsolePolicy) { // not required
		return nil
	}

	if o.LocalOperatorConsolePolicy != nil {
		if err := o.LocalOperatorConsolePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "localOperatorConsolePolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "localOperatorConsolePolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) validateModulePolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.ModulePolicy) { // not required
		return nil
	}

	for i := 0; i < len(o.ModulePolicy); i++ {
		if swag.IsZero(o.ModulePolicy[i]) { // not required
			continue
		}

		if o.ModulePolicy[i] != nil {
			if err := o.ModulePolicy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "modulePolicy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "modulePolicy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsUpdateBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsUpdateBody) validateNetworkPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.NetworkPolicy) { // not required
		return nil
	}

	if o.NetworkPolicy != nil {
		if err := o.NetworkPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "networkPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "networkPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsUpdateBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this projects update body based on the context it is used
func (o *ProjectsUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAttestationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAttr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCloudPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDeployment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEdgeviewPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateLocalOperatorConsolePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateModulePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNetworkPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNumdevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProjectsUpdateBody) contextValidateAppPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.AppPolicy != nil {
		if err := o.AppPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "appPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "appPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateAttestationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.AttestationPolicy != nil {
		if err := o.AttestationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "attestationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "attestationPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateAttr(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (o *ProjectsUpdateBody) contextValidateCloudPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.CloudPolicy != nil {
		if err := o.CloudPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cloudPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cloudPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateDeployment(ctx context.Context, formats strfmt.Registry) error {

	if o.Deployment != nil {
		if err := o.Deployment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "deployment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "deployment")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateEdgeviewPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.EdgeviewPolicy != nil {
		if err := o.EdgeviewPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "edgeviewPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "edgeviewPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateLocalOperatorConsolePolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.LocalOperatorConsolePolicy != nil {
		if err := o.LocalOperatorConsolePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "localOperatorConsolePolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "localOperatorConsolePolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateModulePolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"modulePolicy", "body", []*models.Policy(o.ModulePolicy)); err != nil {
		return err
	}

	for i := 0; i < len(o.ModulePolicy); i++ {

		if o.ModulePolicy[i] != nil {
			if err := o.ModulePolicy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "modulePolicy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "modulePolicy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateNetworkPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.NetworkPolicy != nil {
		if err := o.NetworkPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "networkPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "networkPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateNumdevices(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"numdevices", "body", int64(o.Numdevices)); err != nil {
		return err
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {
		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *ProjectsUpdateBody) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {
		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ProjectsUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProjectsUpdateBody) UnmarshalBinary(b []byte) error {
	var res ProjectsUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
