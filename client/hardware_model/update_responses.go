package hardware_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// HardwareModelUpdateHardwareModelReader is a Reader for the HardwareModelUpdateHardwareModel structure.
type HardwareModelUpdateHardwareModelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HardwareModelUpdateHardwareModelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHardwareModelUpdateHardwareModelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHardwareModelUpdateHardwareModelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHardwareModelUpdateHardwareModelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHardwareModelUpdateHardwareModelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewHardwareModelUpdateHardwareModelConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHardwareModelUpdateHardwareModelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewHardwareModelUpdateHardwareModelGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewHardwareModelUpdateHardwareModelDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewHardwareModelUpdateHardwareModelOK creates a HardwareModelUpdateHardwareModelOK with default headers values
func NewHardwareModelUpdateHardwareModelOK() *HardwareModelUpdateHardwareModelOK {
	return &HardwareModelUpdateHardwareModelOK{}
}

/*
HardwareModelUpdateHardwareModelOK describes a response with status code 200, with default header values.

A successful response.
*/
type HardwareModelUpdateHardwareModelOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this hardware model update hardware model o k response has a 2xx status code
func (o *HardwareModelUpdateHardwareModelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this hardware model update hardware model o k response has a 3xx status code
func (o *HardwareModelUpdateHardwareModelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hardware model update hardware model o k response has a 4xx status code
func (o *HardwareModelUpdateHardwareModelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this hardware model update hardware model o k response has a 5xx status code
func (o *HardwareModelUpdateHardwareModelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this hardware model update hardware model o k response a status code equal to that given
func (o *HardwareModelUpdateHardwareModelOK) IsCode(code int) bool {
	return code == 200
}

func (o *HardwareModelUpdateHardwareModelOK) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelOK  %+v", 200, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelOK) String() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelOK  %+v", 200, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *HardwareModelUpdateHardwareModelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHardwareModelUpdateHardwareModelUnauthorized creates a HardwareModelUpdateHardwareModelUnauthorized with default headers values
func NewHardwareModelUpdateHardwareModelUnauthorized() *HardwareModelUpdateHardwareModelUnauthorized {
	return &HardwareModelUpdateHardwareModelUnauthorized{}
}

/*
HardwareModelUpdateHardwareModelUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type HardwareModelUpdateHardwareModelUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this hardware model update hardware model unauthorized response has a 2xx status code
func (o *HardwareModelUpdateHardwareModelUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hardware model update hardware model unauthorized response has a 3xx status code
func (o *HardwareModelUpdateHardwareModelUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hardware model update hardware model unauthorized response has a 4xx status code
func (o *HardwareModelUpdateHardwareModelUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this hardware model update hardware model unauthorized response has a 5xx status code
func (o *HardwareModelUpdateHardwareModelUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this hardware model update hardware model unauthorized response a status code equal to that given
func (o *HardwareModelUpdateHardwareModelUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *HardwareModelUpdateHardwareModelUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelUnauthorized  %+v", 401, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelUnauthorized  %+v", 401, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *HardwareModelUpdateHardwareModelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHardwareModelUpdateHardwareModelForbidden creates a HardwareModelUpdateHardwareModelForbidden with default headers values
func NewHardwareModelUpdateHardwareModelForbidden() *HardwareModelUpdateHardwareModelForbidden {
	return &HardwareModelUpdateHardwareModelForbidden{}
}

/*
HardwareModelUpdateHardwareModelForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type HardwareModelUpdateHardwareModelForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this hardware model update hardware model forbidden response has a 2xx status code
func (o *HardwareModelUpdateHardwareModelForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hardware model update hardware model forbidden response has a 3xx status code
func (o *HardwareModelUpdateHardwareModelForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hardware model update hardware model forbidden response has a 4xx status code
func (o *HardwareModelUpdateHardwareModelForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this hardware model update hardware model forbidden response has a 5xx status code
func (o *HardwareModelUpdateHardwareModelForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this hardware model update hardware model forbidden response a status code equal to that given
func (o *HardwareModelUpdateHardwareModelForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *HardwareModelUpdateHardwareModelForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelForbidden  %+v", 403, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelForbidden  %+v", 403, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *HardwareModelUpdateHardwareModelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHardwareModelUpdateHardwareModelNotFound creates a HardwareModelUpdateHardwareModelNotFound with default headers values
func NewHardwareModelUpdateHardwareModelNotFound() *HardwareModelUpdateHardwareModelNotFound {
	return &HardwareModelUpdateHardwareModelNotFound{}
}

/*
HardwareModelUpdateHardwareModelNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type HardwareModelUpdateHardwareModelNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this hardware model update hardware model not found response has a 2xx status code
func (o *HardwareModelUpdateHardwareModelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hardware model update hardware model not found response has a 3xx status code
func (o *HardwareModelUpdateHardwareModelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hardware model update hardware model not found response has a 4xx status code
func (o *HardwareModelUpdateHardwareModelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this hardware model update hardware model not found response has a 5xx status code
func (o *HardwareModelUpdateHardwareModelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this hardware model update hardware model not found response a status code equal to that given
func (o *HardwareModelUpdateHardwareModelNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *HardwareModelUpdateHardwareModelNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelNotFound  %+v", 404, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelNotFound  %+v", 404, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *HardwareModelUpdateHardwareModelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHardwareModelUpdateHardwareModelConflict creates a HardwareModelUpdateHardwareModelConflict with default headers values
func NewHardwareModelUpdateHardwareModelConflict() *HardwareModelUpdateHardwareModelConflict {
	return &HardwareModelUpdateHardwareModelConflict{}
}

/*
HardwareModelUpdateHardwareModelConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing hardware model record.
*/
type HardwareModelUpdateHardwareModelConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this hardware model update hardware model conflict response has a 2xx status code
func (o *HardwareModelUpdateHardwareModelConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hardware model update hardware model conflict response has a 3xx status code
func (o *HardwareModelUpdateHardwareModelConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hardware model update hardware model conflict response has a 4xx status code
func (o *HardwareModelUpdateHardwareModelConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this hardware model update hardware model conflict response has a 5xx status code
func (o *HardwareModelUpdateHardwareModelConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this hardware model update hardware model conflict response a status code equal to that given
func (o *HardwareModelUpdateHardwareModelConflict) IsCode(code int) bool {
	return code == 409
}

func (o *HardwareModelUpdateHardwareModelConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelConflict  %+v", 409, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelConflict) String() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelConflict  %+v", 409, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *HardwareModelUpdateHardwareModelConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHardwareModelUpdateHardwareModelInternalServerError creates a HardwareModelUpdateHardwareModelInternalServerError with default headers values
func NewHardwareModelUpdateHardwareModelInternalServerError() *HardwareModelUpdateHardwareModelInternalServerError {
	return &HardwareModelUpdateHardwareModelInternalServerError{}
}

/*
HardwareModelUpdateHardwareModelInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type HardwareModelUpdateHardwareModelInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this hardware model update hardware model internal server error response has a 2xx status code
func (o *HardwareModelUpdateHardwareModelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hardware model update hardware model internal server error response has a 3xx status code
func (o *HardwareModelUpdateHardwareModelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hardware model update hardware model internal server error response has a 4xx status code
func (o *HardwareModelUpdateHardwareModelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this hardware model update hardware model internal server error response has a 5xx status code
func (o *HardwareModelUpdateHardwareModelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this hardware model update hardware model internal server error response a status code equal to that given
func (o *HardwareModelUpdateHardwareModelInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *HardwareModelUpdateHardwareModelInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelInternalServerError  %+v", 500, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelInternalServerError  %+v", 500, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *HardwareModelUpdateHardwareModelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHardwareModelUpdateHardwareModelGatewayTimeout creates a HardwareModelUpdateHardwareModelGatewayTimeout with default headers values
func NewHardwareModelUpdateHardwareModelGatewayTimeout() *HardwareModelUpdateHardwareModelGatewayTimeout {
	return &HardwareModelUpdateHardwareModelGatewayTimeout{}
}

/*
HardwareModelUpdateHardwareModelGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type HardwareModelUpdateHardwareModelGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this hardware model update hardware model gateway timeout response has a 2xx status code
func (o *HardwareModelUpdateHardwareModelGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this hardware model update hardware model gateway timeout response has a 3xx status code
func (o *HardwareModelUpdateHardwareModelGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this hardware model update hardware model gateway timeout response has a 4xx status code
func (o *HardwareModelUpdateHardwareModelGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this hardware model update hardware model gateway timeout response has a 5xx status code
func (o *HardwareModelUpdateHardwareModelGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this hardware model update hardware model gateway timeout response a status code equal to that given
func (o *HardwareModelUpdateHardwareModelGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

func (o *HardwareModelUpdateHardwareModelGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelGatewayTimeout  %+v", 504, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] hardwareModelUpdateHardwareModelGatewayTimeout  %+v", 504, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *HardwareModelUpdateHardwareModelGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHardwareModelUpdateHardwareModelDefault creates a HardwareModelUpdateHardwareModelDefault with default headers values
func NewHardwareModelUpdateHardwareModelDefault(code int) *HardwareModelUpdateHardwareModelDefault {
	return &HardwareModelUpdateHardwareModelDefault{
		_statusCode: code,
	}
}

/*
HardwareModelUpdateHardwareModelDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type HardwareModelUpdateHardwareModelDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// Code gets the status code for the hardware model update hardware model default response
func (o *HardwareModelUpdateHardwareModelDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this hardware model update hardware model default response has a 2xx status code
func (o *HardwareModelUpdateHardwareModelDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this hardware model update hardware model default response has a 3xx status code
func (o *HardwareModelUpdateHardwareModelDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this hardware model update hardware model default response has a 4xx status code
func (o *HardwareModelUpdateHardwareModelDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this hardware model update hardware model default response has a 5xx status code
func (o *HardwareModelUpdateHardwareModelDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this hardware model update hardware model default response a status code equal to that given
func (o *HardwareModelUpdateHardwareModelDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *HardwareModelUpdateHardwareModelDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] HardwareModel_UpdateHardwareModel default  %+v", o._statusCode, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelDefault) String() string {
	return fmt.Sprintf("[PUT /v1/sysmodels/id/{id}][%d] HardwareModel_UpdateHardwareModel default  %+v", o._statusCode, o.Payload)
}

func (o *HardwareModelUpdateHardwareModelDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *HardwareModelUpdateHardwareModelDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
HardwareModelUpdateHardwareModelBody SysModel  payload details
//
// SysModel consists of various model attributes like id, name, title, brandId etc
// Example: {"id":"d1125b0f-633d-459c-99c6-f47e7467cebc","name":"zed-model","title":"sample model"}
swagger:model HardwareModelUpdateHardwareModelBody
*/
type HardwareModelUpdateHardwareModelBody struct {

	// PCR templates keyed by EVE version
	PCRTemplates []*models.PCRTemplate `json:"PCRTemplates"`

	// Map of <string, string> which defines attr
	// Required: true
	Attr map[string]string `json:"attr"`

	// System defined universally unique Id of the brand.
	// Required: true
	// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12
	BrandID *string `json:"brandId"`

	// Detailed description of the model.
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// List of IoMembers
	IoMemberList []*models.IoMember `json:"ioMemberList"`

	// Flag to represent whether sysModel is imported
	IsImported bool `json:"isImported,omitempty"`

	// Map of <string, string> which holds the key:url for the logo artifact of the model
	Logo map[string]string `json:"logo,omitempty"`

	// user defined model name
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// origin of object
	// Required: true
	OriginType *models.Origin `json:"originType"`

	// origin and parent related details
	ParentDetail *models.ObjectParentDetail `json:"parentDetail,omitempty"`

	// Product status
	ProductStatus string `json:"productStatus,omitempty"`

	// Product URL
	ProductURL string `json:"productURL,omitempty"`

	// Object Revision  of the model
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// SysModel State which denotes the status of the model
	// Required: true
	State *models.SysModelState `json:"state"`

	// User defined title of the model. Title can be changed at any time.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title *string `json:"title"`

	// Defines the Architecture type of the model
	// Required: true
	Type *models.ModelArchType `json:"type"`
}

// Validate validates this hardware model update hardware model body
func (o *HardwareModelUpdateHardwareModelBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePCRTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAttr(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBrandID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIoMemberList(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParentDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validatePCRTemplates(formats strfmt.Registry) error {
	if swag.IsZero(o.PCRTemplates) { // not required
		return nil
	}

	for i := 0; i < len(o.PCRTemplates); i++ {
		if swag.IsZero(o.PCRTemplates[i]) { // not required
			continue
		}

		if o.PCRTemplates[i] != nil {
			if err := o.PCRTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "PCRTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "PCRTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateAttr(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"attr", "body", o.Attr); err != nil {
		return err
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateBrandID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"brandId", "body", o.BrandID); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"brandId", "body", *o.BrandID, `[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12`); err != nil {
		return err
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateIoMemberList(formats strfmt.Registry) error {
	if swag.IsZero(o.IoMemberList) { // not required
		return nil
	}

	for i := 0; i < len(o.IoMemberList); i++ {
		if swag.IsZero(o.IoMemberList[i]) { // not required
			continue
		}

		if o.IoMemberList[i] != nil {
			if err := o.IoMemberList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "ioMemberList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "ioMemberList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateOriginType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"originType", "body", o.OriginType); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"originType", "body", o.OriginType); err != nil {
		return err
	}

	if o.OriginType != nil {
		if err := o.OriginType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "originType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "originType")
			}
			return err
		}
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateParentDetail(formats strfmt.Registry) error {
	if swag.IsZero(o.ParentDetail) { // not required
		return nil
	}

	if o.ParentDetail != nil {
		if err := o.ParentDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "parentDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "parentDetail")
			}
			return err
		}
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"state", "body", o.State); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"state", "body", o.State); err != nil {
		return err
	}

	if o.State != nil {
		if err := o.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hardware model update hardware model body based on the context it is used
func (o *HardwareModelUpdateHardwareModelBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePCRTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIoMemberList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOriginType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateParentDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) contextValidatePCRTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.PCRTemplates); i++ {

		if o.PCRTemplates[i] != nil {
			if err := o.PCRTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "PCRTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "PCRTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) contextValidateIoMemberList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.IoMemberList); i++ {

		if o.IoMemberList[i] != nil {
			if err := o.IoMemberList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "ioMemberList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "ioMemberList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) contextValidateOriginType(ctx context.Context, formats strfmt.Registry) error {

	if o.OriginType != nil {
		if err := o.OriginType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "originType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "originType")
			}
			return err
		}
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) contextValidateParentDetail(ctx context.Context, formats strfmt.Registry) error {

	if o.ParentDetail != nil {
		if err := o.ParentDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "parentDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "parentDetail")
			}
			return err
		}
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {
		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if o.State != nil {
		if err := o.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *HardwareModelUpdateHardwareModelBody) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {
		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *HardwareModelUpdateHardwareModelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HardwareModelUpdateHardwareModelBody) UnmarshalBinary(b []byte) error {
	var res HardwareModelUpdateHardwareModelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
