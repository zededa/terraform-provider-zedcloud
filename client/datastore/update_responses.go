package datastore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// DatastoreConfigurationUpdateDatastoreReader is a Reader for the DatastoreConfigurationUpdateDatastore structure.
type DatastoreConfigurationUpdateDatastoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DatastoreConfigurationUpdateDatastoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDatastoreConfigurationUpdateDatastoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDatastoreConfigurationUpdateDatastoreUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDatastoreConfigurationUpdateDatastoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDatastoreConfigurationUpdateDatastoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDatastoreConfigurationUpdateDatastoreConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDatastoreConfigurationUpdateDatastoreInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDatastoreConfigurationUpdateDatastoreGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDatastoreConfigurationUpdateDatastoreDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDatastoreConfigurationUpdateDatastoreOK creates a DatastoreConfigurationUpdateDatastoreOK with default headers values
func NewDatastoreConfigurationUpdateDatastoreOK() *DatastoreConfigurationUpdateDatastoreOK {
	return &DatastoreConfigurationUpdateDatastoreOK{}
}

/*
DatastoreConfigurationUpdateDatastoreOK describes a response with status code 200, with default header values.

A successful response.
*/
type DatastoreConfigurationUpdateDatastoreOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration update datastore o k response has a 2xx status code
func (o *DatastoreConfigurationUpdateDatastoreOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this datastore configuration update datastore o k response has a 3xx status code
func (o *DatastoreConfigurationUpdateDatastoreOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration update datastore o k response has a 4xx status code
func (o *DatastoreConfigurationUpdateDatastoreOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this datastore configuration update datastore o k response has a 5xx status code
func (o *DatastoreConfigurationUpdateDatastoreOK) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration update datastore o k response a status code equal to that given
func (o *DatastoreConfigurationUpdateDatastoreOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the datastore configuration update datastore o k response
func (o *DatastoreConfigurationUpdateDatastoreOK) Code() int {
	return 200
}

func (o *DatastoreConfigurationUpdateDatastoreOK) Error() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreOK  %+v", 200, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreOK) String() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreOK  %+v", 200, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationUpdateDatastoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationUpdateDatastoreUnauthorized creates a DatastoreConfigurationUpdateDatastoreUnauthorized with default headers values
func NewDatastoreConfigurationUpdateDatastoreUnauthorized() *DatastoreConfigurationUpdateDatastoreUnauthorized {
	return &DatastoreConfigurationUpdateDatastoreUnauthorized{}
}

/*
DatastoreConfigurationUpdateDatastoreUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type DatastoreConfigurationUpdateDatastoreUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration update datastore unauthorized response has a 2xx status code
func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration update datastore unauthorized response has a 3xx status code
func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration update datastore unauthorized response has a 4xx status code
func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this datastore configuration update datastore unauthorized response has a 5xx status code
func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration update datastore unauthorized response a status code equal to that given
func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the datastore configuration update datastore unauthorized response
func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) Code() int {
	return 401
}

func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreUnauthorized  %+v", 401, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreUnauthorized  %+v", 401, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationUpdateDatastoreUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationUpdateDatastoreForbidden creates a DatastoreConfigurationUpdateDatastoreForbidden with default headers values
func NewDatastoreConfigurationUpdateDatastoreForbidden() *DatastoreConfigurationUpdateDatastoreForbidden {
	return &DatastoreConfigurationUpdateDatastoreForbidden{}
}

/*
DatastoreConfigurationUpdateDatastoreForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type DatastoreConfigurationUpdateDatastoreForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration update datastore forbidden response has a 2xx status code
func (o *DatastoreConfigurationUpdateDatastoreForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration update datastore forbidden response has a 3xx status code
func (o *DatastoreConfigurationUpdateDatastoreForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration update datastore forbidden response has a 4xx status code
func (o *DatastoreConfigurationUpdateDatastoreForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this datastore configuration update datastore forbidden response has a 5xx status code
func (o *DatastoreConfigurationUpdateDatastoreForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration update datastore forbidden response a status code equal to that given
func (o *DatastoreConfigurationUpdateDatastoreForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the datastore configuration update datastore forbidden response
func (o *DatastoreConfigurationUpdateDatastoreForbidden) Code() int {
	return 403
}

func (o *DatastoreConfigurationUpdateDatastoreForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreForbidden  %+v", 403, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreForbidden  %+v", 403, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationUpdateDatastoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationUpdateDatastoreNotFound creates a DatastoreConfigurationUpdateDatastoreNotFound with default headers values
func NewDatastoreConfigurationUpdateDatastoreNotFound() *DatastoreConfigurationUpdateDatastoreNotFound {
	return &DatastoreConfigurationUpdateDatastoreNotFound{}
}

/*
DatastoreConfigurationUpdateDatastoreNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type DatastoreConfigurationUpdateDatastoreNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration update datastore not found response has a 2xx status code
func (o *DatastoreConfigurationUpdateDatastoreNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration update datastore not found response has a 3xx status code
func (o *DatastoreConfigurationUpdateDatastoreNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration update datastore not found response has a 4xx status code
func (o *DatastoreConfigurationUpdateDatastoreNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this datastore configuration update datastore not found response has a 5xx status code
func (o *DatastoreConfigurationUpdateDatastoreNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration update datastore not found response a status code equal to that given
func (o *DatastoreConfigurationUpdateDatastoreNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the datastore configuration update datastore not found response
func (o *DatastoreConfigurationUpdateDatastoreNotFound) Code() int {
	return 404
}

func (o *DatastoreConfigurationUpdateDatastoreNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreNotFound  %+v", 404, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreNotFound  %+v", 404, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationUpdateDatastoreNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationUpdateDatastoreConflict creates a DatastoreConfigurationUpdateDatastoreConflict with default headers values
func NewDatastoreConfigurationUpdateDatastoreConflict() *DatastoreConfigurationUpdateDatastoreConflict {
	return &DatastoreConfigurationUpdateDatastoreConflict{}
}

/*
DatastoreConfigurationUpdateDatastoreConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing datastore record.
*/
type DatastoreConfigurationUpdateDatastoreConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration update datastore conflict response has a 2xx status code
func (o *DatastoreConfigurationUpdateDatastoreConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration update datastore conflict response has a 3xx status code
func (o *DatastoreConfigurationUpdateDatastoreConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration update datastore conflict response has a 4xx status code
func (o *DatastoreConfigurationUpdateDatastoreConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this datastore configuration update datastore conflict response has a 5xx status code
func (o *DatastoreConfigurationUpdateDatastoreConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration update datastore conflict response a status code equal to that given
func (o *DatastoreConfigurationUpdateDatastoreConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the datastore configuration update datastore conflict response
func (o *DatastoreConfigurationUpdateDatastoreConflict) Code() int {
	return 409
}

func (o *DatastoreConfigurationUpdateDatastoreConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreConflict  %+v", 409, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreConflict) String() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreConflict  %+v", 409, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationUpdateDatastoreConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationUpdateDatastoreInternalServerError creates a DatastoreConfigurationUpdateDatastoreInternalServerError with default headers values
func NewDatastoreConfigurationUpdateDatastoreInternalServerError() *DatastoreConfigurationUpdateDatastoreInternalServerError {
	return &DatastoreConfigurationUpdateDatastoreInternalServerError{}
}

/*
DatastoreConfigurationUpdateDatastoreInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type DatastoreConfigurationUpdateDatastoreInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration update datastore internal server error response has a 2xx status code
func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration update datastore internal server error response has a 3xx status code
func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration update datastore internal server error response has a 4xx status code
func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this datastore configuration update datastore internal server error response has a 5xx status code
func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this datastore configuration update datastore internal server error response a status code equal to that given
func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the datastore configuration update datastore internal server error response
func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) Code() int {
	return 500
}

func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreInternalServerError  %+v", 500, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreInternalServerError  %+v", 500, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationUpdateDatastoreInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationUpdateDatastoreGatewayTimeout creates a DatastoreConfigurationUpdateDatastoreGatewayTimeout with default headers values
func NewDatastoreConfigurationUpdateDatastoreGatewayTimeout() *DatastoreConfigurationUpdateDatastoreGatewayTimeout {
	return &DatastoreConfigurationUpdateDatastoreGatewayTimeout{}
}

/*
DatastoreConfigurationUpdateDatastoreGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type DatastoreConfigurationUpdateDatastoreGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration update datastore gateway timeout response has a 2xx status code
func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration update datastore gateway timeout response has a 3xx status code
func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration update datastore gateway timeout response has a 4xx status code
func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this datastore configuration update datastore gateway timeout response has a 5xx status code
func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this datastore configuration update datastore gateway timeout response a status code equal to that given
func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the datastore configuration update datastore gateway timeout response
func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) Code() int {
	return 504
}

func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] datastoreConfigurationUpdateDatastoreGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationUpdateDatastoreGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationUpdateDatastoreDefault creates a DatastoreConfigurationUpdateDatastoreDefault with default headers values
func NewDatastoreConfigurationUpdateDatastoreDefault(code int) *DatastoreConfigurationUpdateDatastoreDefault {
	return &DatastoreConfigurationUpdateDatastoreDefault{
		_statusCode: code,
	}
}

/*
DatastoreConfigurationUpdateDatastoreDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type DatastoreConfigurationUpdateDatastoreDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this datastore configuration update datastore default response has a 2xx status code
func (o *DatastoreConfigurationUpdateDatastoreDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this datastore configuration update datastore default response has a 3xx status code
func (o *DatastoreConfigurationUpdateDatastoreDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this datastore configuration update datastore default response has a 4xx status code
func (o *DatastoreConfigurationUpdateDatastoreDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this datastore configuration update datastore default response has a 5xx status code
func (o *DatastoreConfigurationUpdateDatastoreDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this datastore configuration update datastore default response a status code equal to that given
func (o *DatastoreConfigurationUpdateDatastoreDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the datastore configuration update datastore default response
func (o *DatastoreConfigurationUpdateDatastoreDefault) Code() int {
	return o._statusCode
}

func (o *DatastoreConfigurationUpdateDatastoreDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] DatastoreConfiguration_UpdateDatastore default  %+v", o._statusCode, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreDefault) String() string {
	return fmt.Sprintf("[PUT /v1/datastores/id/{id}][%d] DatastoreConfiguration_UpdateDatastore default  %+v", o._statusCode, o.Payload)
}

func (o *DatastoreConfigurationUpdateDatastoreDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *DatastoreConfigurationUpdateDatastoreDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DatastoreConfigurationUpdateDatastoreBody Datastore
//
// Datastore idetail
// Example: {"description":"My test datastore hosted on HTTP server for Edge computing images.","dsError":"Datastore validated successfully...","dsFQDN":"http://my-datastore.my-company.com","dsPath":"download/AMD64","dsStatus":"DATASTORE_STATUS_ACTIVE","dsType":"DATASTORE_TYPE_HTTP","id":"d1125b0f-633d-459c-99c6-f47e7467cebc","name":"my-test-datastore","originType":"ORIGIN_LOCAL","revision":{"createdAt":{"seconds":1592068270},"createdBy":"admin@my-company.com","curr":"1","updatedAt":{"seconds":1592068271},"updatedBy":"admin@my-company.com"},"secret":{"apiKey":"my-datastore-api-key","apiPasswd":"my-datastore-api-password"},"title":"My test datatsore for Edge computing images"}
swagger:model DatastoreConfigurationUpdateDatastoreBody
*/
type DatastoreConfigurationUpdateDatastoreBody struct {

	// api key
	APIKey string `json:"apiKey,omitempty"`

	// Certificate chain of the certificate
	CertificateChain *models.CertificateChain `json:"certificateChain,omitempty"`

	// Internal - Encryption Key context
	// Read Only: true
	CryptoKey string `json:"cryptoKey,omitempty"`

	// Detailed description of the datastore.
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// Datastore validation detailed error/status message
	// Read Only: true
	DsErr string `json:"dsErr,omitempty"`

	// Datastore Fully Qualified Domain Name
	// Required: true
	DsFQDN *string `json:"dsFQDN"`

	// Datastore relative path w.r.t. Datastore root
	// Required: true
	DsPath *string `json:"dsPath"`

	// Datastore status
	DsStatus *models.DatastoreStatus `json:"dsStatus,omitempty"`

	// Datastore type
	// Required: true
	DsType *models.DatastoreType `json:"dsType"`

	// Internal - Encrypted sensitive data
	// Read Only: true
	EncryptedSecrets map[string]string `json:"encryptedSecrets,omitempty"`

	// enterprise Id
	EnterpriseID string `json:"enterpriseId,omitempty"`

	// User defined name of the datastore, unique across the enterprise. Once datastore is created, name can’t be changed.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// knob for sending creds in clear text
	NeedClearText bool `json:"needClearText,omitempty"`

	// Origin type of datastore.
	// Read Only: true
	OriginType *models.Origin `json:"originType,omitempty"`

	// project access list of the datastore
	ProjectAccessList []string `json:"projectAccessList"`

	// Datastore region - valid for AWS S3 and Azure BlobStorage
	Region string `json:"region,omitempty"`

	// system defined info
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// Plain-text sensitive data
	Secret *models.DatastoreInfoSecrets `json:"secret,omitempty"`

	// User defined title of the datastore. Title can be changed at any time.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title *string `json:"title"`
}

// Validate validates this datastore configuration update datastore body
func (o *DatastoreConfigurationUpdateDatastoreBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCertificateChain(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDsFQDN(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDsPath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDsStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDsType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateCertificateChain(formats strfmt.Registry) error {
	if swag.IsZero(o.CertificateChain) { // not required
		return nil
	}

	if o.CertificateChain != nil {
		if err := o.CertificateChain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "certificateChain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "certificateChain")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateDsFQDN(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"dsFQDN", "body", o.DsFQDN); err != nil {
		return err
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateDsPath(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"dsPath", "body", o.DsPath); err != nil {
		return err
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateDsStatus(formats strfmt.Registry) error {
	if swag.IsZero(o.DsStatus) { // not required
		return nil
	}

	if o.DsStatus != nil {
		if err := o.DsStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "dsStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "dsStatus")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateDsType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"dsType", "body", o.DsType); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"dsType", "body", o.DsType); err != nil {
		return err
	}

	if o.DsType != nil {
		if err := o.DsType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "dsType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "dsType")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateOriginType(formats strfmt.Registry) error {
	if swag.IsZero(o.OriginType) { // not required
		return nil
	}

	if o.OriginType != nil {
		if err := o.OriginType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "originType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "originType")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateSecret(formats strfmt.Registry) error {
	if swag.IsZero(o.Secret) { // not required
		return nil
	}

	if o.Secret != nil {
		if err := o.Secret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "secret")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datastore configuration update datastore body based on the context it is used
func (o *DatastoreConfigurationUpdateDatastoreBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCertificateChain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCryptoKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDsErr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDsStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDsType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEncryptedSecrets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOriginType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateCertificateChain(ctx context.Context, formats strfmt.Registry) error {

	if o.CertificateChain != nil {
		if err := o.CertificateChain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "certificateChain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "certificateChain")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateCryptoKey(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"cryptoKey", "body", string(o.CryptoKey)); err != nil {
		return err
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateDsErr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"dsErr", "body", string(o.DsErr)); err != nil {
		return err
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateDsStatus(ctx context.Context, formats strfmt.Registry) error {

	if o.DsStatus != nil {
		if err := o.DsStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "dsStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "dsStatus")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateDsType(ctx context.Context, formats strfmt.Registry) error {

	if o.DsType != nil {
		if err := o.DsType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "dsType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "dsType")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateEncryptedSecrets(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateOriginType(ctx context.Context, formats strfmt.Registry) error {

	if o.OriginType != nil {
		if err := o.OriginType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "originType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "originType")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {
		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *DatastoreConfigurationUpdateDatastoreBody) contextValidateSecret(ctx context.Context, formats strfmt.Registry) error {

	if o.Secret != nil {
		if err := o.Secret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "secret")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DatastoreConfigurationUpdateDatastoreBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DatastoreConfigurationUpdateDatastoreBody) UnmarshalBinary(b []byte) error {
	var res DatastoreConfigurationUpdateDatastoreBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
