package datastore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// DatastoreConfigurationDeleteDatastoreReader is a Reader for the DatastoreConfigurationDeleteDatastore structure.
type DatastoreConfigurationDeleteDatastoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DatastoreConfigurationDeleteDatastoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDatastoreConfigurationDeleteDatastoreOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDatastoreConfigurationDeleteDatastoreUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDatastoreConfigurationDeleteDatastoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDatastoreConfigurationDeleteDatastoreNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDatastoreConfigurationDeleteDatastoreConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDatastoreConfigurationDeleteDatastoreInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewDatastoreConfigurationDeleteDatastoreGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDatastoreConfigurationDeleteDatastoreDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDatastoreConfigurationDeleteDatastoreOK creates a DatastoreConfigurationDeleteDatastoreOK with default headers values
func NewDatastoreConfigurationDeleteDatastoreOK() *DatastoreConfigurationDeleteDatastoreOK {
	return &DatastoreConfigurationDeleteDatastoreOK{}
}

/*
DatastoreConfigurationDeleteDatastoreOK describes a response with status code 200, with default header values.

A successful response.
*/
type DatastoreConfigurationDeleteDatastoreOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration delete datastore o k response has a 2xx status code
func (o *DatastoreConfigurationDeleteDatastoreOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this datastore configuration delete datastore o k response has a 3xx status code
func (o *DatastoreConfigurationDeleteDatastoreOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration delete datastore o k response has a 4xx status code
func (o *DatastoreConfigurationDeleteDatastoreOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this datastore configuration delete datastore o k response has a 5xx status code
func (o *DatastoreConfigurationDeleteDatastoreOK) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration delete datastore o k response a status code equal to that given
func (o *DatastoreConfigurationDeleteDatastoreOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the datastore configuration delete datastore o k response
func (o *DatastoreConfigurationDeleteDatastoreOK) Code() int {
	return 200
}

func (o *DatastoreConfigurationDeleteDatastoreOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreOK  %+v", 200, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreOK) String() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreOK  %+v", 200, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationDeleteDatastoreOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationDeleteDatastoreUnauthorized creates a DatastoreConfigurationDeleteDatastoreUnauthorized with default headers values
func NewDatastoreConfigurationDeleteDatastoreUnauthorized() *DatastoreConfigurationDeleteDatastoreUnauthorized {
	return &DatastoreConfigurationDeleteDatastoreUnauthorized{}
}

/*
DatastoreConfigurationDeleteDatastoreUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type DatastoreConfigurationDeleteDatastoreUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration delete datastore unauthorized response has a 2xx status code
func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration delete datastore unauthorized response has a 3xx status code
func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration delete datastore unauthorized response has a 4xx status code
func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this datastore configuration delete datastore unauthorized response has a 5xx status code
func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration delete datastore unauthorized response a status code equal to that given
func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the datastore configuration delete datastore unauthorized response
func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) Code() int {
	return 401
}

func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreUnauthorized  %+v", 401, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreUnauthorized  %+v", 401, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationDeleteDatastoreUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationDeleteDatastoreForbidden creates a DatastoreConfigurationDeleteDatastoreForbidden with default headers values
func NewDatastoreConfigurationDeleteDatastoreForbidden() *DatastoreConfigurationDeleteDatastoreForbidden {
	return &DatastoreConfigurationDeleteDatastoreForbidden{}
}

/*
DatastoreConfigurationDeleteDatastoreForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type DatastoreConfigurationDeleteDatastoreForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration delete datastore forbidden response has a 2xx status code
func (o *DatastoreConfigurationDeleteDatastoreForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration delete datastore forbidden response has a 3xx status code
func (o *DatastoreConfigurationDeleteDatastoreForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration delete datastore forbidden response has a 4xx status code
func (o *DatastoreConfigurationDeleteDatastoreForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this datastore configuration delete datastore forbidden response has a 5xx status code
func (o *DatastoreConfigurationDeleteDatastoreForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration delete datastore forbidden response a status code equal to that given
func (o *DatastoreConfigurationDeleteDatastoreForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the datastore configuration delete datastore forbidden response
func (o *DatastoreConfigurationDeleteDatastoreForbidden) Code() int {
	return 403
}

func (o *DatastoreConfigurationDeleteDatastoreForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreForbidden  %+v", 403, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreForbidden  %+v", 403, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationDeleteDatastoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationDeleteDatastoreNotFound creates a DatastoreConfigurationDeleteDatastoreNotFound with default headers values
func NewDatastoreConfigurationDeleteDatastoreNotFound() *NotFound {
	return &NotFound{}
}

/*
NotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type NotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration delete datastore not found response has a 2xx status code
func (o *NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration delete datastore not found response has a 3xx status code
func (o *NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration delete datastore not found response has a 4xx status code
func (o *NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this datastore configuration delete datastore not found response has a 5xx status code
func (o *NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration delete datastore not found response a status code equal to that given
func (o *NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the datastore configuration delete datastore not found response
func (o *NotFound) Code() int {
	return 404
}

func (o *NotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreNotFound  %+v", 404, o.Payload)
}

func (o *NotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreNotFound  %+v", 404, o.Payload)
}

func (o *NotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationDeleteDatastoreConflict creates a DatastoreConfigurationDeleteDatastoreConflict with default headers values
func NewDatastoreConfigurationDeleteDatastoreConflict() *DatastoreConfigurationDeleteDatastoreConflict {
	return &DatastoreConfigurationDeleteDatastoreConflict{}
}

/*
DatastoreConfigurationDeleteDatastoreConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because there are edge application images using this datastore
*/
type DatastoreConfigurationDeleteDatastoreConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration delete datastore conflict response has a 2xx status code
func (o *DatastoreConfigurationDeleteDatastoreConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration delete datastore conflict response has a 3xx status code
func (o *DatastoreConfigurationDeleteDatastoreConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration delete datastore conflict response has a 4xx status code
func (o *DatastoreConfigurationDeleteDatastoreConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this datastore configuration delete datastore conflict response has a 5xx status code
func (o *DatastoreConfigurationDeleteDatastoreConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this datastore configuration delete datastore conflict response a status code equal to that given
func (o *DatastoreConfigurationDeleteDatastoreConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the datastore configuration delete datastore conflict response
func (o *DatastoreConfigurationDeleteDatastoreConflict) Code() int {
	return 409
}

func (o *DatastoreConfigurationDeleteDatastoreConflict) Error() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreConflict  %+v", 409, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreConflict) String() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreConflict  %+v", 409, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationDeleteDatastoreConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationDeleteDatastoreInternalServerError creates a DatastoreConfigurationDeleteDatastoreInternalServerError with default headers values
func NewDatastoreConfigurationDeleteDatastoreInternalServerError() *DatastoreConfigurationDeleteDatastoreInternalServerError {
	return &DatastoreConfigurationDeleteDatastoreInternalServerError{}
}

/*
DatastoreConfigurationDeleteDatastoreInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type DatastoreConfigurationDeleteDatastoreInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration delete datastore internal server error response has a 2xx status code
func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration delete datastore internal server error response has a 3xx status code
func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration delete datastore internal server error response has a 4xx status code
func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this datastore configuration delete datastore internal server error response has a 5xx status code
func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this datastore configuration delete datastore internal server error response a status code equal to that given
func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the datastore configuration delete datastore internal server error response
func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) Code() int {
	return 500
}

func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreInternalServerError  %+v", 500, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreInternalServerError  %+v", 500, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationDeleteDatastoreInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationDeleteDatastoreGatewayTimeout creates a DatastoreConfigurationDeleteDatastoreGatewayTimeout with default headers values
func NewDatastoreConfigurationDeleteDatastoreGatewayTimeout() *DatastoreConfigurationDeleteDatastoreGatewayTimeout {
	return &DatastoreConfigurationDeleteDatastoreGatewayTimeout{}
}

/*
DatastoreConfigurationDeleteDatastoreGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type DatastoreConfigurationDeleteDatastoreGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this datastore configuration delete datastore gateway timeout response has a 2xx status code
func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this datastore configuration delete datastore gateway timeout response has a 3xx status code
func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this datastore configuration delete datastore gateway timeout response has a 4xx status code
func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this datastore configuration delete datastore gateway timeout response has a 5xx status code
func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this datastore configuration delete datastore gateway timeout response a status code equal to that given
func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the datastore configuration delete datastore gateway timeout response
func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) Code() int {
	return 504
}

func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) Error() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) String() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] datastoreConfigurationDeleteDatastoreGatewayTimeout  %+v", 504, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *DatastoreConfigurationDeleteDatastoreGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDatastoreConfigurationDeleteDatastoreDefault creates a DatastoreConfigurationDeleteDatastoreDefault with default headers values
func NewDatastoreConfigurationDeleteDatastoreDefault(code int) *DatastoreConfigurationDeleteDatastoreDefault {
	return &DatastoreConfigurationDeleteDatastoreDefault{
		_statusCode: code,
	}
}

/*
DatastoreConfigurationDeleteDatastoreDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type DatastoreConfigurationDeleteDatastoreDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this datastore configuration delete datastore default response has a 2xx status code
func (o *DatastoreConfigurationDeleteDatastoreDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this datastore configuration delete datastore default response has a 3xx status code
func (o *DatastoreConfigurationDeleteDatastoreDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this datastore configuration delete datastore default response has a 4xx status code
func (o *DatastoreConfigurationDeleteDatastoreDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this datastore configuration delete datastore default response has a 5xx status code
func (o *DatastoreConfigurationDeleteDatastoreDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this datastore configuration delete datastore default response a status code equal to that given
func (o *DatastoreConfigurationDeleteDatastoreDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the datastore configuration delete datastore default response
func (o *DatastoreConfigurationDeleteDatastoreDefault) Code() int {
	return o._statusCode
}

func (o *DatastoreConfigurationDeleteDatastoreDefault) Error() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] DatastoreConfiguration_DeleteDatastore default  %+v", o._statusCode, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreDefault) String() string {
	return fmt.Sprintf("[DELETE /v1/datastores/id/{id}][%d] DatastoreConfiguration_DeleteDatastore default  %+v", o._statusCode, o.Payload)
}

func (o *DatastoreConfigurationDeleteDatastoreDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *DatastoreConfigurationDeleteDatastoreDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
