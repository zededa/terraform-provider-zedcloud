package volume_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// VolumeInstanceConfigurationUpdateVolumeInstanceReader is a Reader for the VolumeInstanceConfigurationUpdateVolumeInstance structure.
type VolumeInstanceConfigurationUpdateVolumeInstanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVolumeInstanceConfigurationUpdateVolumeInstanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewVolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewVolumeInstanceConfigurationUpdateVolumeInstanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVolumeInstanceConfigurationUpdateVolumeInstanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewVolumeInstanceConfigurationUpdateVolumeInstanceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewVolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewVolumeInstanceConfigurationUpdateVolumeInstanceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVolumeInstanceConfigurationUpdateVolumeInstanceOK creates a VolumeInstanceConfigurationUpdateVolumeInstanceOK with default headers values
func NewVolumeInstanceConfigurationUpdateVolumeInstanceOK() *VolumeInstanceConfigurationUpdateVolumeInstanceOK {
	return &VolumeInstanceConfigurationUpdateVolumeInstanceOK{}
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceOK describes a response with status code 200, with default header values.

A successful response.
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this volume instance configuration update volume instance o k response has a 2xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this volume instance configuration update volume instance o k response has a 3xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume instance configuration update volume instance o k response has a 4xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume instance configuration update volume instance o k response has a 5xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this volume instance configuration update volume instance o k response a status code equal to that given
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the volume instance configuration update volume instance o k response
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) Code() int {
	return 200
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceOK  %+v", 200, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) String() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceOK  %+v", 200, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized creates a VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized with default headers values
func NewVolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized() *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized {
	return &VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized{}
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this volume instance configuration update volume instance unauthorized response has a 2xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume instance configuration update volume instance unauthorized response has a 3xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume instance configuration update volume instance unauthorized response has a 4xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this volume instance configuration update volume instance unauthorized response has a 5xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this volume instance configuration update volume instance unauthorized response a status code equal to that given
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the volume instance configuration update volume instance unauthorized response
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) Code() int {
	return 401
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceUnauthorized  %+v", 401, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceUnauthorized  %+v", 401, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeInstanceConfigurationUpdateVolumeInstanceForbidden creates a VolumeInstanceConfigurationUpdateVolumeInstanceForbidden with default headers values
func NewVolumeInstanceConfigurationUpdateVolumeInstanceForbidden() *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden {
	return &VolumeInstanceConfigurationUpdateVolumeInstanceForbidden{}
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this volume instance configuration update volume instance forbidden response has a 2xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume instance configuration update volume instance forbidden response has a 3xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume instance configuration update volume instance forbidden response has a 4xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this volume instance configuration update volume instance forbidden response has a 5xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this volume instance configuration update volume instance forbidden response a status code equal to that given
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the volume instance configuration update volume instance forbidden response
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) Code() int {
	return 403
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceForbidden  %+v", 403, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceForbidden  %+v", 403, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeInstanceConfigurationUpdateVolumeInstanceNotFound creates a VolumeInstanceConfigurationUpdateVolumeInstanceNotFound with default headers values
func NewVolumeInstanceConfigurationUpdateVolumeInstanceNotFound() *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound {
	return &VolumeInstanceConfigurationUpdateVolumeInstanceNotFound{}
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this volume instance configuration update volume instance not found response has a 2xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume instance configuration update volume instance not found response has a 3xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume instance configuration update volume instance not found response has a 4xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this volume instance configuration update volume instance not found response has a 5xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this volume instance configuration update volume instance not found response a status code equal to that given
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the volume instance configuration update volume instance not found response
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) Code() int {
	return 404
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceNotFound  %+v", 404, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceNotFound  %+v", 404, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeInstanceConfigurationUpdateVolumeInstanceConflict creates a VolumeInstanceConfigurationUpdateVolumeInstanceConflict with default headers values
func NewVolumeInstanceConfigurationUpdateVolumeInstanceConflict() *VolumeInstanceConfigurationUpdateVolumeInstanceConflict {
	return &VolumeInstanceConfigurationUpdateVolumeInstanceConflict{}
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing edge volume instance record.
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this volume instance configuration update volume instance conflict response has a 2xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume instance configuration update volume instance conflict response has a 3xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume instance configuration update volume instance conflict response has a 4xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this volume instance configuration update volume instance conflict response has a 5xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this volume instance configuration update volume instance conflict response a status code equal to that given
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the volume instance configuration update volume instance conflict response
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) Code() int {
	return 409
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceConflict  %+v", 409, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) String() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceConflict  %+v", 409, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError creates a VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError with default headers values
func NewVolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError() *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError {
	return &VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError{}
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this volume instance configuration update volume instance internal server error response has a 2xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume instance configuration update volume instance internal server error response has a 3xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume instance configuration update volume instance internal server error response has a 4xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume instance configuration update volume instance internal server error response has a 5xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this volume instance configuration update volume instance internal server error response a status code equal to that given
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the volume instance configuration update volume instance internal server error response
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) Code() int {
	return 500
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceInternalServerError  %+v", 500, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceInternalServerError  %+v", 500, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout creates a VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout with default headers values
func NewVolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout() *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout {
	return &VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout{}
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this volume instance configuration update volume instance gateway timeout response has a 2xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this volume instance configuration update volume instance gateway timeout response has a 3xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this volume instance configuration update volume instance gateway timeout response has a 4xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this volume instance configuration update volume instance gateway timeout response has a 5xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this volume instance configuration update volume instance gateway timeout response a status code equal to that given
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the volume instance configuration update volume instance gateway timeout response
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) Code() int {
	return 504
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] volumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout  %+v", 504, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVolumeInstanceConfigurationUpdateVolumeInstanceDefault creates a VolumeInstanceConfigurationUpdateVolumeInstanceDefault with default headers values
func NewVolumeInstanceConfigurationUpdateVolumeInstanceDefault(code int) *VolumeInstanceConfigurationUpdateVolumeInstanceDefault {
	return &VolumeInstanceConfigurationUpdateVolumeInstanceDefault{
		_statusCode: code,
	}
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this volume instance configuration update volume instance default response has a 2xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this volume instance configuration update volume instance default response has a 3xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this volume instance configuration update volume instance default response has a 4xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this volume instance configuration update volume instance default response has a 5xx status code
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this volume instance configuration update volume instance default response a status code equal to that given
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the volume instance configuration update volume instance default response
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) Code() int {
	return o._statusCode
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] VolumeInstanceConfiguration_UpdateVolumeInstance default  %+v", o._statusCode, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) String() string {
	return fmt.Sprintf("[PUT /v1/volumes/instances/id/{id}][%d] VolumeInstanceConfiguration_UpdateVolumeInstance default  %+v", o._statusCode, o.Payload)
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
VolumeInstanceConfigurationUpdateVolumeInstanceBody volume instance configuration update volume instance body
swagger:model VolumeInstanceConfigurationUpdateVolumeInstanceBody
*/
type VolumeInstanceConfigurationUpdateVolumeInstanceBody struct {

	// Access mode
	Accessmode *models.VolumeInstanceAccessMode `json:"accessmode,omitempty"`

	// flag to keep the contents of the volume unencrypted (in clear text)
	Cleartext bool `json:"cleartext,omitempty"`

	// content tree ID
	ContentTreeID string `json:"contentTreeId,omitempty"`

	// Detailed description of the volume instance.
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// id of the device on which volume instance is created
	DeviceID string `json:"deviceId,omitempty"`

	// name of the image
	Image string `json:"image,omitempty"`

	// flag to create implicit volumes
	Implicit string `json:"implicit,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// flag to enable the volume to be attached to multiple app instances
	Multiattach bool `json:"multiattach,omitempty"`

	// User defined name of the volume instance, unique across the enterprise. Once object is created, name can’t be changed.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name string `json:"name,omitempty"`

	// id of the project in which the volume instance is created
	ProjectID string `json:"projectId,omitempty"`

	// Purge Counter information
	Purge *models.ZedCloudOpsCmd `json:"purge,omitempty"`

	// system defined Revision info of the object
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// size of volume
	SizeBytes uint64 `json:"sizeBytes,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// User defined title of the volume instance. Title can be changed at any time.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title string `json:"title,omitempty"`

	// type of Volume Instance
	Type *models.VolumeInstanceType `json:"type,omitempty"`
}

// Validate validates this volume instance configuration update volume instance body
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessmode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePurge(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) validateAccessmode(formats strfmt.Registry) error {
	if swag.IsZero(o.Accessmode) { // not required
		return nil
	}

	if o.Accessmode != nil {
		if err := o.Accessmode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "accessmode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "accessmode")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) validateName(formats strfmt.Registry) error {
	if swag.IsZero(o.Name) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"name", "body", o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) validatePurge(formats strfmt.Registry) error {
	if swag.IsZero(o.Purge) { // not required
		return nil
	}

	if o.Purge != nil {
		if err := o.Purge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "purge")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(o.Title) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"title", "body", o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume instance configuration update volume instance body based on the context it is used
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAccessmode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePurge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) contextValidateAccessmode(ctx context.Context, formats strfmt.Registry) error {

	if o.Accessmode != nil {
		if err := o.Accessmode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "accessmode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "accessmode")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) contextValidatePurge(ctx context.Context, formats strfmt.Registry) error {

	if o.Purge != nil {
		if err := o.Purge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "purge")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {
		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {
		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *VolumeInstanceConfigurationUpdateVolumeInstanceBody) UnmarshalBinary(b []byte) error {
	var res VolumeInstanceConfigurationUpdateVolumeInstanceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
