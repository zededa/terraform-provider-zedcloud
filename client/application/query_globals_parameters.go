package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams creates a new EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams() *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	return &EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParamsWithTimeout creates a new EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams object
// with the ability to set a timeout on a request.
func NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParamsWithTimeout(timeout time.Duration) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	return &EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams{
		timeout: timeout,
	}
}

// NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParamsWithContext creates a new EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams object
// with the ability to set a context for a request.
func NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParamsWithContext(ctx context.Context) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	return &EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams{
		Context: ctx,
	}
}

// NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParamsWithHTTPClient creates a new EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams object
// with the ability to set a custom HTTPClient for a request.
func NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParamsWithHTTPClient(client *http.Client) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	return &EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams{
		HTTPClient: client,
	}
}

/*
EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams contains all the parameters to send to the API endpoint

	for the edge application configuration query global edge application bundles operation.

	Typically these are written to a http.Request.
*/
type EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams struct {

	/* XRequestID.

	   User-Agent specified id to track a request
	*/
	XRequestID *string

	/* FilterAppCategory.

	    category type of the bundle

	- APP_CATEGORY_UNSPECIFIED: Invalid Edge Application Category
	- APP_CATEGORY_OPERATING_SYSTEM: Edge operating systems
	- APP_CATEGORY_INDUSTRIAL: Connectity solution for industrial protocols
	- APP_CATEGORY_EDGE_APPLICATION: Edge application framework featuring composite functions for data ingestion, buffering, analytics and export
	- APP_CATEGORY_NETWORKING: Edge networking services (e.g. SD-WAN, NFV)
	- APP_CATEGORY_SECURITY: Edge security services (e.g. protocol inspection, firewall)
	- APP_CATEGORY_DATA_ANALYTICS: Edge analytics (e.g. AI/ML) and data management (e.g. database, connectors) services
	- APP_CATEGORY_CLOUD_APPLICATION: Edge application runtimes, cloud connectivity and general application enablement
	- APP_CATEGORY_DEVOPS: Tools for Edge Application CI/CD and performance optimization
	- APP_CATEGORY_OTHERS: Miscellaneous functionality

	    Default: "APP_CATEGORY_UNSPECIFIED"
	*/
	FilterAppCategory *string

	/* FilterAppType.

	   app type, eg: vm, container, module

	   Default: "APP_TYPE_UNSPECIFIED"
	*/
	FilterAppType *string

	/* FilterCategories.

	    category types of the bundle

	- APP_CATEGORY_UNSPECIFIED: Invalid Edge Application Category
	- APP_CATEGORY_OPERATING_SYSTEM: Edge operating systems
	- APP_CATEGORY_INDUSTRIAL: Connectity solution for industrial protocols
	- APP_CATEGORY_EDGE_APPLICATION: Edge application framework featuring composite functions for data ingestion, buffering, analytics and export
	- APP_CATEGORY_NETWORKING: Edge networking services (e.g. SD-WAN, NFV)
	- APP_CATEGORY_SECURITY: Edge security services (e.g. protocol inspection, firewall)
	- APP_CATEGORY_DATA_ANALYTICS: Edge analytics (e.g. AI/ML) and data management (e.g. database, connectors) services
	- APP_CATEGORY_CLOUD_APPLICATION: Edge application runtimes, cloud connectivity and general application enablement
	- APP_CATEGORY_DEVOPS: Tools for Edge Application CI/CD and performance optimization
	- APP_CATEGORY_OTHERS: Miscellaneous functionality
	*/
	FilterCategories []string

	/* FilterCategory.

	   category type of the bundle
	*/
	FilterCategory *string

	/* FilterDeploymentType.

	   type of deployment for the app, eg: azure, k3s, standalone

	   Default: "DEPLOYMENT_TYPE_UNSPECIFIED"
	*/
	FilterDeploymentType *string

	/* FilterNamePattern.

	   query param : "name-pattern" . Search * namePattern * in name field to filter records
	*/
	FilterNamePattern *string

	/* FilterOriginType.

	     origin of bundle

	 - ORIGIN_UNSPECIFIED: default options, which says no Operation/Invalid Operation
	 - ORIGIN_IMPORTED: Object imported from global enterprise.
	 - ORIGIN_LOCAL: Objectl created locally.
	 - ORIGIN_GLOBAL: Object created in global store,
	to use this type user should have root previlage.

	     Default: "ORIGIN_UNSPECIFIED"
	*/
	FilterOriginType *string

	/* NextOrderBy.

	   OrderBy helps in sorting the list response
	*/
	NextOrderBy []string

	/* NextPageNum.

	   Page Number

	   Format: int64
	*/
	NextPageNum *int64

	/* NextPageSize.

	   Defines the page size

	   Format: int64
	*/
	NextPageSize *int64

	/* NextPageToken.

	   Page Token
	*/
	NextPageToken *string

	/* NextTotalPages.

	   Total number of pages to be fetched.

	   Format: int64
	*/
	NextTotalPages *int64

	/* Summary.

	   Only summary of the records required
	*/
	Summary *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the edge application configuration query global edge application bundles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithDefaults() *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the edge application configuration query global edge application bundles params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetDefaults() {
	var (
		filterAppCategoryDefault = string("APP_CATEGORY_UNSPECIFIED")

		filterAppTypeDefault = string("APP_TYPE_UNSPECIFIED")

		filterDeploymentTypeDefault = string("DEPLOYMENT_TYPE_UNSPECIFIED")

		filterOriginTypeDefault = string("ORIGIN_UNSPECIFIED")
	)

	val := EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams{
		FilterAppCategory:    &filterAppCategoryDefault,
		FilterAppType:        &filterAppTypeDefault,
		FilterDeploymentType: &filterDeploymentTypeDefault,
		FilterOriginType:     &filterOriginTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithTimeout(timeout time.Duration) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithContext(ctx context.Context) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithHTTPClient(client *http.Client) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRequestID adds the xRequestID to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithXRequestID(xRequestID *string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithFilterAppCategory adds the filterAppCategory to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithFilterAppCategory(filterAppCategory *string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetFilterAppCategory(filterAppCategory)
	return o
}

// SetFilterAppCategory adds the filterAppCategory to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetFilterAppCategory(filterAppCategory *string) {
	o.FilterAppCategory = filterAppCategory
}

// WithFilterAppType adds the filterAppType to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithFilterAppType(filterAppType *string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetFilterAppType(filterAppType)
	return o
}

// SetFilterAppType adds the filterAppType to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetFilterAppType(filterAppType *string) {
	o.FilterAppType = filterAppType
}

// WithFilterCategories adds the filterCategories to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithFilterCategories(filterCategories []string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetFilterCategories(filterCategories)
	return o
}

// SetFilterCategories adds the filterCategories to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetFilterCategories(filterCategories []string) {
	o.FilterCategories = filterCategories
}

// WithFilterCategory adds the filterCategory to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithFilterCategory(filterCategory *string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetFilterCategory(filterCategory)
	return o
}

// SetFilterCategory adds the filterCategory to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetFilterCategory(filterCategory *string) {
	o.FilterCategory = filterCategory
}

// WithFilterDeploymentType adds the filterDeploymentType to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithFilterDeploymentType(filterDeploymentType *string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetFilterDeploymentType(filterDeploymentType)
	return o
}

// SetFilterDeploymentType adds the filterDeploymentType to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetFilterDeploymentType(filterDeploymentType *string) {
	o.FilterDeploymentType = filterDeploymentType
}

// WithFilterNamePattern adds the filterNamePattern to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithFilterNamePattern(filterNamePattern *string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetFilterNamePattern(filterNamePattern)
	return o
}

// SetFilterNamePattern adds the filterNamePattern to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetFilterNamePattern(filterNamePattern *string) {
	o.FilterNamePattern = filterNamePattern
}

// WithFilterOriginType adds the filterOriginType to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithFilterOriginType(filterOriginType *string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetFilterOriginType(filterOriginType)
	return o
}

// SetFilterOriginType adds the filterOriginType to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetFilterOriginType(filterOriginType *string) {
	o.FilterOriginType = filterOriginType
}

// WithNextOrderBy adds the nextOrderBy to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithNextOrderBy(nextOrderBy []string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetNextOrderBy(nextOrderBy)
	return o
}

// SetNextOrderBy adds the nextOrderBy to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetNextOrderBy(nextOrderBy []string) {
	o.NextOrderBy = nextOrderBy
}

// WithNextPageNum adds the nextPageNum to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithNextPageNum(nextPageNum *int64) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetNextPageNum(nextPageNum)
	return o
}

// SetNextPageNum adds the nextPageNum to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetNextPageNum(nextPageNum *int64) {
	o.NextPageNum = nextPageNum
}

// WithNextPageSize adds the nextPageSize to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithNextPageSize(nextPageSize *int64) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetNextPageSize(nextPageSize)
	return o
}

// SetNextPageSize adds the nextPageSize to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetNextPageSize(nextPageSize *int64) {
	o.NextPageSize = nextPageSize
}

// WithNextPageToken adds the nextPageToken to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithNextPageToken(nextPageToken *string) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetNextPageToken(nextPageToken)
	return o
}

// SetNextPageToken adds the nextPageToken to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetNextPageToken(nextPageToken *string) {
	o.NextPageToken = nextPageToken
}

// WithNextTotalPages adds the nextTotalPages to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithNextTotalPages(nextTotalPages *int64) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetNextTotalPages(nextTotalPages)
	return o
}

// SetNextTotalPages adds the nextTotalPages to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetNextTotalPages(nextTotalPages *int64) {
	o.NextTotalPages = nextTotalPages
}

// WithSummary adds the summary to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WithSummary(summary *bool) *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams {
	o.SetSummary(summary)
	return o
}

// SetSummary adds the summary to the edge application configuration query global edge application bundles params
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) SetSummary(summary *bool) {
	o.Summary = summary
}

// WriteToRequest writes these params to a swagger request
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}
	}

	if o.FilterAppCategory != nil {

		// query param filter.appCategory
		var qrFilterAppCategory string

		if o.FilterAppCategory != nil {
			qrFilterAppCategory = *o.FilterAppCategory
		}
		qFilterAppCategory := qrFilterAppCategory
		if qFilterAppCategory != "" {

			if err := r.SetQueryParam("filter.appCategory", qFilterAppCategory); err != nil {
				return err
			}
		}
	}

	if o.FilterAppType != nil {

		// query param filter.appType
		var qrFilterAppType string

		if o.FilterAppType != nil {
			qrFilterAppType = *o.FilterAppType
		}
		qFilterAppType := qrFilterAppType
		if qFilterAppType != "" {

			if err := r.SetQueryParam("filter.appType", qFilterAppType); err != nil {
				return err
			}
		}
	}

	if o.FilterCategories != nil {

		// binding items for filter.categories
		joinedFilterCategories := o.bindParamFilterCategories(reg)

		// query array param filter.categories
		if err := r.SetQueryParam("filter.categories", joinedFilterCategories...); err != nil {
			return err
		}
	}

	if o.FilterCategory != nil {

		// query param filter.category
		var qrFilterCategory string

		if o.FilterCategory != nil {
			qrFilterCategory = *o.FilterCategory
		}
		qFilterCategory := qrFilterCategory
		if qFilterCategory != "" {

			if err := r.SetQueryParam("filter.category", qFilterCategory); err != nil {
				return err
			}
		}
	}

	if o.FilterDeploymentType != nil {

		// query param filter.deploymentType
		var qrFilterDeploymentType string

		if o.FilterDeploymentType != nil {
			qrFilterDeploymentType = *o.FilterDeploymentType
		}
		qFilterDeploymentType := qrFilterDeploymentType
		if qFilterDeploymentType != "" {

			if err := r.SetQueryParam("filter.deploymentType", qFilterDeploymentType); err != nil {
				return err
			}
		}
	}

	if o.FilterNamePattern != nil {

		// query param filter.namePattern
		var qrFilterNamePattern string

		if o.FilterNamePattern != nil {
			qrFilterNamePattern = *o.FilterNamePattern
		}
		qFilterNamePattern := qrFilterNamePattern
		if qFilterNamePattern != "" {

			if err := r.SetQueryParam("filter.namePattern", qFilterNamePattern); err != nil {
				return err
			}
		}
	}

	if o.FilterOriginType != nil {

		// query param filter.originType
		var qrFilterOriginType string

		if o.FilterOriginType != nil {
			qrFilterOriginType = *o.FilterOriginType
		}
		qFilterOriginType := qrFilterOriginType
		if qFilterOriginType != "" {

			if err := r.SetQueryParam("filter.originType", qFilterOriginType); err != nil {
				return err
			}
		}
	}

	if o.NextOrderBy != nil {

		// binding items for next.orderBy
		joinedNextOrderBy := o.bindParamNextOrderBy(reg)

		// query array param next.orderBy
		if err := r.SetQueryParam("next.orderBy", joinedNextOrderBy...); err != nil {
			return err
		}
	}

	if o.NextPageNum != nil {

		// query param next.pageNum
		var qrNextPageNum int64

		if o.NextPageNum != nil {
			qrNextPageNum = *o.NextPageNum
		}
		qNextPageNum := swag.FormatInt64(qrNextPageNum)
		if qNextPageNum != "" {

			if err := r.SetQueryParam("next.pageNum", qNextPageNum); err != nil {
				return err
			}
		}
	}

	if o.NextPageSize != nil {

		// query param next.pageSize
		var qrNextPageSize int64

		if o.NextPageSize != nil {
			qrNextPageSize = *o.NextPageSize
		}
		qNextPageSize := swag.FormatInt64(qrNextPageSize)
		if qNextPageSize != "" {

			if err := r.SetQueryParam("next.pageSize", qNextPageSize); err != nil {
				return err
			}
		}
	}

	if o.NextPageToken != nil {

		// query param next.pageToken
		var qrNextPageToken string

		if o.NextPageToken != nil {
			qrNextPageToken = *o.NextPageToken
		}
		qNextPageToken := qrNextPageToken
		if qNextPageToken != "" {

			if err := r.SetQueryParam("next.pageToken", qNextPageToken); err != nil {
				return err
			}
		}
	}

	if o.NextTotalPages != nil {

		// query param next.totalPages
		var qrNextTotalPages int64

		if o.NextTotalPages != nil {
			qrNextTotalPages = *o.NextTotalPages
		}
		qNextTotalPages := swag.FormatInt64(qrNextTotalPages)
		if qNextTotalPages != "" {

			if err := r.SetQueryParam("next.totalPages", qNextTotalPages); err != nil {
				return err
			}
		}
	}

	if o.Summary != nil {

		// query param summary
		var qrSummary bool

		if o.Summary != nil {
			qrSummary = *o.Summary
		}
		qSummary := swag.FormatBool(qrSummary)
		if qSummary != "" {

			if err := r.SetQueryParam("summary", qSummary); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundles binds the parameter filter.categories
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) bindParamFilterCategories(formats strfmt.Registry) []string {
	filterCategoriesIR := o.FilterCategories

	var filterCategoriesIC []string
	for _, filterCategoriesIIR := range filterCategoriesIR { // explode []string

		filterCategoriesIIV := filterCategoriesIIR // string as string
		filterCategoriesIC = append(filterCategoriesIC, filterCategoriesIIV)
	}

	// items.CollectionFormat: "multi"
	filterCategoriesIS := swag.JoinByFormat(filterCategoriesIC, "multi")

	return filterCategoriesIS
}

// bindParamEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundles binds the parameter next.orderBy
func (o *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams) bindParamNextOrderBy(formats strfmt.Registry) []string {
	nextOrderByIR := o.NextOrderBy

	var nextOrderByIC []string
	for _, nextOrderByIIR := range nextOrderByIR { // explode []string

		nextOrderByIIV := nextOrderByIIR // string as string
		nextOrderByIC = append(nextOrderByIC, nextOrderByIIV)
	}

	// items.CollectionFormat: "multi"
	nextOrderByIS := swag.JoinByFormat(nextOrderByIC, "multi")

	return nextOrderByIS
}
