// Code generated by go-swagger; DO NOT EDIT.

package patch_envelope

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider-zedcloud/models"
)

// PatchEnvelopeConfigurationGetPatchEnvelopeStatusReader is a Reader for the PatchEnvelopeConfigurationGetPatchEnvelopeStatus structure.
type PatchEnvelopeConfigurationGetPatchEnvelopeStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusOK creates a PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK with default headers values
func NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusOK() *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK {
	return &PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK{}
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK describes a response with status code 200, with default header values.

A successful response.
*/
type PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK struct {
	Payload *models.PatchStatusListMsg
}

// IsSuccess returns true when this patch envelope configuration get patch envelope status o k response has a 2xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch envelope configuration get patch envelope status o k response has a 3xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch envelope configuration get patch envelope status o k response has a 4xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch envelope configuration get patch envelope status o k response has a 5xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch envelope configuration get patch envelope status o k response a status code equal to that given
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch envelope configuration get patch envelope status o k response
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) Code() int {
	return 200
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) Error() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusOK  %+v", 200, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) String() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusOK  %+v", 200, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) GetPayload() *models.PatchStatusListMsg {
	return o.Payload
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PatchStatusListMsg)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized creates a PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized with default headers values
func NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized() *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized {
	return &PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized{}
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this patch envelope configuration get patch envelope status unauthorized response has a 2xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch envelope configuration get patch envelope status unauthorized response has a 3xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch envelope configuration get patch envelope status unauthorized response has a 4xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch envelope configuration get patch envelope status unauthorized response has a 5xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch envelope configuration get patch envelope status unauthorized response a status code equal to that given
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch envelope configuration get patch envelope status unauthorized response
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) Code() int {
	return 401
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden creates a PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden with default headers values
func NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden() *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden {
	return &PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden{}
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have application level access permission for the operation or does not have access scope to the project.
*/
type PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this patch envelope configuration get patch envelope status forbidden response has a 2xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch envelope configuration get patch envelope status forbidden response has a 3xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch envelope configuration get patch envelope status forbidden response has a 4xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch envelope configuration get patch envelope status forbidden response has a 5xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch envelope configuration get patch envelope status forbidden response a status code equal to that given
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch envelope configuration get patch envelope status forbidden response
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) Code() int {
	return 403
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden  %+v", 403, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) String() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden  %+v", 403, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError creates a PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError with default headers values
func NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError() *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError {
	return &PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError{}
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this patch envelope configuration get patch envelope status internal server error response has a 2xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch envelope configuration get patch envelope status internal server error response has a 3xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch envelope configuration get patch envelope status internal server error response has a 4xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch envelope configuration get patch envelope status internal server error response has a 5xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch envelope configuration get patch envelope status internal server error response a status code equal to that given
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch envelope configuration get patch envelope status internal server error response
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) Code() int {
	return 500
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout creates a PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout with default headers values
func NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout() *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout {
	return &PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout{}
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this patch envelope configuration get patch envelope status gateway timeout response has a 2xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch envelope configuration get patch envelope status gateway timeout response has a 3xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch envelope configuration get patch envelope status gateway timeout response has a 4xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch envelope configuration get patch envelope status gateway timeout response has a 5xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this patch envelope configuration get patch envelope status gateway timeout response a status code equal to that given
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the patch envelope configuration get patch envelope status gateway timeout response
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) Code() int {
	return 504
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) String() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] patchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout  %+v", 504, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault creates a PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault with default headers values
func NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault(code int) *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault {
	return &PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault{
		_statusCode: code,
	}
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this patch envelope configuration get patch envelope status default response has a 2xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch envelope configuration get patch envelope status default response has a 3xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch envelope configuration get patch envelope status default response has a 4xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch envelope configuration get patch envelope status default response has a 5xx status code
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch envelope configuration get patch envelope status default response a status code equal to that given
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the patch envelope configuration get patch envelope status default response
func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) Code() int {
	return o._statusCode
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) Error() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] PatchEnvelopeConfiguration_GetPatchEnvelopeStatus default  %+v", o._statusCode, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) String() string {
	return fmt.Sprintf("[GET /v1/patch-envelope/status][%d] PatchEnvelopeConfiguration_GetPatchEnvelopeStatus default  %+v", o._statusCode, o.Payload)
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
