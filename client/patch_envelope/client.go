// Code generated by go-swagger; DO NOT EDIT.

package patch_envelope

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new patch envelope configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new patch envelope configuration API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new patch envelope configuration API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for patch envelope configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PatchEnvelopeConfigurationCreatePatchEnvelope(params *PatchEnvelopeConfigurationCreatePatchEnvelopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationCreatePatchEnvelopeOK, error)

	PatchEnvelopeConfigurationDeletePatchEnvelope(params *PatchEnvelopeConfigurationDeletePatchEnvelopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationDeletePatchEnvelopeOK, error)

	PatchEnvelopeConfigurationGetPatchEnvelope(params *PatchEnvelopeConfigurationGetPatchEnvelopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationGetPatchEnvelopeOK, error)

	PatchEnvelopeConfigurationGetPatchEnvelopeByID(params *PatchEnvelopeConfigurationGetPatchEnvelopeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationGetPatchEnvelopeByIDOK, error)

	PatchEnvelopeConfigurationGetPatchEnvelopeByName(params *PatchEnvelopeConfigurationGetPatchEnvelopeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationGetPatchEnvelopeByNameOK, error)

	PatchEnvelopeConfigurationGetPatchEnvelopeStatus(params *PatchEnvelopeConfigurationGetPatchEnvelopeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK, error)

	PatchEnvelopeConfigurationUpdatePatchEnvelope(params *PatchEnvelopeConfigurationUpdatePatchEnvelopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationUpdatePatchEnvelopeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PatchEnvelopeConfigurationCreatePatchEnvelope creates patch envelope

Create a patch envelope record.
*/
func (a *Client) PatchEnvelopeConfigurationCreatePatchEnvelope(params *PatchEnvelopeConfigurationCreatePatchEnvelopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationCreatePatchEnvelopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEnvelopeConfigurationCreatePatchEnvelopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchEnvelopeConfiguration_CreatePatchEnvelope",
		Method:             "POST",
		PathPattern:        "/v1/patch-envelope",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEnvelopeConfigurationCreatePatchEnvelopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEnvelopeConfigurationCreatePatchEnvelopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEnvelopeConfigurationCreatePatchEnvelopeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEnvelopeConfigurationDeletePatchEnvelope deletes patch envelope

Deletes patch envelope with specified id
*/
func (a *Client) PatchEnvelopeConfigurationDeletePatchEnvelope(params *PatchEnvelopeConfigurationDeletePatchEnvelopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationDeletePatchEnvelopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEnvelopeConfigurationDeletePatchEnvelopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchEnvelopeConfiguration_DeletePatchEnvelope",
		Method:             "DELETE",
		PathPattern:        "/v1/patch-envelope/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEnvelopeConfigurationDeletePatchEnvelopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEnvelopeConfigurationDeletePatchEnvelopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEnvelopeConfigurationDeletePatchEnvelopeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEnvelopeConfigurationGetPatchEnvelope gets all the patch envelopes

Get the list of patch envelope details.
*/
func (a *Client) PatchEnvelopeConfigurationGetPatchEnvelope(params *PatchEnvelopeConfigurationGetPatchEnvelopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationGetPatchEnvelopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEnvelopeConfigurationGetPatchEnvelopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchEnvelopeConfiguration_GetPatchEnvelope",
		Method:             "GET",
		PathPattern:        "/v1/patch-envelope",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEnvelopeConfigurationGetPatchEnvelopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEnvelopeConfigurationGetPatchEnvelopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEnvelopeConfigurationGetPatchEnvelopeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeByID gets patch envelope by id

Get patch envelope detail by patch envelope id.
*/
func (a *Client) PatchEnvelopeConfigurationGetPatchEnvelopeByID(params *PatchEnvelopeConfigurationGetPatchEnvelopeByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationGetPatchEnvelopeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEnvelopeConfigurationGetPatchEnvelopeByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchEnvelopeConfiguration_GetPatchEnvelopeById",
		Method:             "GET",
		PathPattern:        "/v1/patch-envelope/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEnvelopeConfigurationGetPatchEnvelopeByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEnvelopeConfigurationGetPatchEnvelopeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEnvelopeConfigurationGetPatchEnvelopeByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeByName gets patch envelope by name

Get patch envelope detail by patch envelope name.
*/
func (a *Client) PatchEnvelopeConfigurationGetPatchEnvelopeByName(params *PatchEnvelopeConfigurationGetPatchEnvelopeByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationGetPatchEnvelopeByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEnvelopeConfigurationGetPatchEnvelopeByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchEnvelopeConfiguration_GetPatchEnvelopeByName",
		Method:             "GET",
		PathPattern:        "/v1/patch-envelope/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEnvelopeConfigurationGetPatchEnvelopeByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEnvelopeConfigurationGetPatchEnvelopeByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEnvelopeConfigurationGetPatchEnvelopeByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEnvelopeConfigurationGetPatchEnvelopeStatus gets patch envelope status

Get patch envelope status information.
*/
func (a *Client) PatchEnvelopeConfigurationGetPatchEnvelopeStatus(params *PatchEnvelopeConfigurationGetPatchEnvelopeStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEnvelopeConfigurationGetPatchEnvelopeStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchEnvelopeConfiguration_GetPatchEnvelopeStatus",
		Method:             "GET",
		PathPattern:        "/v1/patch-envelope/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEnvelopeConfigurationGetPatchEnvelopeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEnvelopeConfigurationGetPatchEnvelopeStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEnvelopeConfigurationGetPatchEnvelopeStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PatchEnvelopeConfigurationUpdatePatchEnvelope updates patch envelope

Update apatch envelope record. The usual pattern to update a patch envelope bundle record is to retrieve the record and update with the modified values in a new body.
*/
func (a *Client) PatchEnvelopeConfigurationUpdatePatchEnvelope(params *PatchEnvelopeConfigurationUpdatePatchEnvelopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchEnvelopeConfigurationUpdatePatchEnvelopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEnvelopeConfigurationUpdatePatchEnvelopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchEnvelopeConfiguration_UpdatePatchEnvelope",
		Method:             "PUT",
		PathPattern:        "/v1/patch-envelope/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEnvelopeConfigurationUpdatePatchEnvelopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchEnvelopeConfigurationUpdatePatchEnvelopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchEnvelopeConfigurationUpdatePatchEnvelopeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
