// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppInstStatusMsg App instance status message
//
// # AppInstanceStatusMsg encapsulates the status of an app instance
//
// swagger:model AppInstStatusMsg
type AppInstStatusMsg struct {

	// SPU details
	CPU *CPUSummary `json:"Cpu,omitempty"`

	// Io bundle status list
	IoStatusList []*IoBundleStatus `json:"IoStatusList"`

	// memory summary
	Memory *MemorySummary `json:"Memory,omitempty"`

	// storage summary
	Storage *StorageSummary `json:"Storage,omitempty"`

	// App instance status
	AdminState *AdminState `json:"adminState,omitempty"`

	// User defined name of the edge app, unique across the enterprise. Once edge app is created, name can’t be changed
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	AppID string `json:"appId,omitempty"`

	// app status from third party controller
	AppStatusFromTPController *AppStatusFromTPController `json:"appStatusFromTPController,omitempty"`

	// type of app
	AppType *AppType `json:"appType,omitempty"`

	// device boot time
	// Format: date-time
	BootTime strfmt.DateTime `json:"bootTime,omitempty"`

	// System defined universally unique clusterInstance ID, unique across the enterprise.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ClusterID string `json:"clusterId,omitempty"`

	// type of deployment for the app, eg: azure, k3s, standalone
	DeploymentType *DeploymentType `json:"deploymentType,omitempty"`

	// User defined name of the device, unique across the enterprise. Once device is created, name can’t be changed
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	DeviceID string `json:"deviceId,omitempty"`

	// Device error details
	ErrInfo []*DeviceError `json:"errInfo"`

	// app instance id
	ID string `json:"id,omitempty"`

	// device last update time
	// Format: date-time
	LastUpdate strfmt.DateTime `json:"lastUpdate,omitempty"`

	// memory summary
	MemorySummary *AppInstMemorySummary `json:"memorySummary,omitempty"`

	// User defined name of the app instance, unique across the enterprise. Once app instance is created, name can’t be changed
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name string `json:"name,omitempty"`

	// network counter list
	NetCounterList []*NetworkCounters `json:"netCounterList"`

	// network status list
	NetStatusList []*NetworkStatus `json:"netStatusList"`

	// User defined name of the project, unique across the enterprise. Once project is created, name can’t be changed
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ProjectID string `json:"projectId,omitempty"`

	// app instance state
	RunState *RunState `json:"runState,omitempty"`

	// Software details
	SwInfo []*SWInfo `json:"swInfo"`

	// software state
	SwState *SWState `json:"swState,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// app instance status title
	Title string `json:"title,omitempty"`

	// device up time
	// Format: date-time
	UpTime strfmt.DateTime `json:"upTime,omitempty"`

	// list of volume ids attached
	VolumeRefs []string `json:"volumeRefs"`

	// Last received counters for zvol metrics
	ZpoolMetrics *StorageDeviceMetrics `json:"zpoolMetrics,omitempty"`
}

// Validate validates this app inst status msg
func (m *AppInstStatusMsg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIoStatusList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppStatusFromTPController(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBootTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemorySummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetCounterList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetStatusList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZpoolMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstStatusMsg) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Cpu")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateIoStatusList(formats strfmt.Registry) error {
	if swag.IsZero(m.IoStatusList) { // not required
		return nil
	}

	for i := 0; i < len(m.IoStatusList); i++ {
		if swag.IsZero(m.IoStatusList[i]) { // not required
			continue
		}

		if m.IoStatusList[i] != nil {
			if err := m.IoStatusList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("IoStatusList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("IoStatusList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Memory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Memory")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateStorage(formats strfmt.Registry) error {
	if swag.IsZero(m.Storage) { // not required
		return nil
	}

	if m.Storage != nil {
		if err := m.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Storage")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateAdminState(formats strfmt.Registry) error {
	if swag.IsZero(m.AdminState) { // not required
		return nil
	}

	if m.AdminState != nil {
		if err := m.AdminState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminState")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateAppID(formats strfmt.Registry) error {
	if swag.IsZero(m.AppID) { // not required
		return nil
	}

	if err := validate.MinLength("appId", "body", m.AppID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("appId", "body", m.AppID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("appId", "body", m.AppID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstStatusMsg) validateAppStatusFromTPController(formats strfmt.Registry) error {
	if swag.IsZero(m.AppStatusFromTPController) { // not required
		return nil
	}

	if m.AppStatusFromTPController != nil {
		if err := m.AppStatusFromTPController.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appStatusFromTPController")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appStatusFromTPController")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateAppType(formats strfmt.Registry) error {
	if swag.IsZero(m.AppType) { // not required
		return nil
	}

	if m.AppType != nil {
		if err := m.AppType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateBootTime(formats strfmt.Registry) error {
	if swag.IsZero(m.BootTime) { // not required
		return nil
	}

	if err := validate.FormatOf("bootTime", "body", "date-time", m.BootTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppInstStatusMsg) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.MinLength("clusterId", "body", m.ClusterID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterId", "body", m.ClusterID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("clusterId", "body", m.ClusterID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstStatusMsg) validateDeploymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	if m.DeploymentType != nil {
		if err := m.DeploymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateDeviceID(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceID) { // not required
		return nil
	}

	if err := validate.MinLength("deviceId", "body", m.DeviceID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("deviceId", "body", m.DeviceID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("deviceId", "body", m.DeviceID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstStatusMsg) validateErrInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrInfo); i++ {
		if swag.IsZero(m.ErrInfo[i]) { // not required
			continue
		}

		if m.ErrInfo[i] != nil {
			if err := m.ErrInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) validateLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppInstStatusMsg) validateMemorySummary(formats strfmt.Registry) error {
	if swag.IsZero(m.MemorySummary) { // not required
		return nil
	}

	if m.MemorySummary != nil {
		if err := m.MemorySummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memorySummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memorySummary")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", m.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstStatusMsg) validateNetCounterList(formats strfmt.Registry) error {
	if swag.IsZero(m.NetCounterList) { // not required
		return nil
	}

	for i := 0; i < len(m.NetCounterList); i++ {
		if swag.IsZero(m.NetCounterList[i]) { // not required
			continue
		}

		if m.NetCounterList[i] != nil {
			if err := m.NetCounterList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netCounterList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("netCounterList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) validateNetStatusList(formats strfmt.Registry) error {
	if swag.IsZero(m.NetStatusList) { // not required
		return nil
	}

	for i := 0; i < len(m.NetStatusList); i++ {
		if swag.IsZero(m.NetStatusList[i]) { // not required
			continue
		}

		if m.NetStatusList[i] != nil {
			if err := m.NetStatusList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netStatusList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("netStatusList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) validateProjectID(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectID) { // not required
		return nil
	}

	if err := validate.MinLength("projectId", "body", m.ProjectID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("projectId", "body", m.ProjectID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("projectId", "body", m.ProjectID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstStatusMsg) validateRunState(formats strfmt.Registry) error {
	if swag.IsZero(m.RunState) { // not required
		return nil
	}

	if m.RunState != nil {
		if err := m.RunState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runState")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateSwInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SwInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.SwInfo); i++ {
		if swag.IsZero(m.SwInfo[i]) { // not required
			continue
		}

		if m.SwInfo[i] != nil {
			if err := m.SwInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("swInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("swInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) validateSwState(formats strfmt.Registry) error {
	if swag.IsZero(m.SwState) { // not required
		return nil
	}

	if m.SwState != nil {
		if err := m.SwState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("swState")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) validateUpTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpTime) { // not required
		return nil
	}

	if err := validate.FormatOf("upTime", "body", "date-time", m.UpTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AppInstStatusMsg) validateZpoolMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.ZpoolMetrics) { // not required
		return nil
	}

	if m.ZpoolMetrics != nil {
		if err := m.ZpoolMetrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zpoolMetrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zpoolMetrics")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app inst status msg based on the context it is used
func (m *AppInstStatusMsg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIoStatusList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdminState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppStatusFromTPController(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeploymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemorySummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetCounterList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetStatusList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSwInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSwState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateZpoolMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstStatusMsg) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.CPU != nil {
		if err := m.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Cpu")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateIoStatusList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IoStatusList); i++ {

		if m.IoStatusList[i] != nil {
			if err := m.IoStatusList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("IoStatusList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("IoStatusList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.Memory != nil {
		if err := m.Memory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Memory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Memory")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.Storage != nil {
		if err := m.Storage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Storage")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateAdminState(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminState != nil {
		if err := m.AdminState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminState")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateAppStatusFromTPController(ctx context.Context, formats strfmt.Registry) error {

	if m.AppStatusFromTPController != nil {
		if err := m.AppStatusFromTPController.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appStatusFromTPController")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appStatusFromTPController")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateAppType(ctx context.Context, formats strfmt.Registry) error {

	if m.AppType != nil {
		if err := m.AppType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateDeploymentType(ctx context.Context, formats strfmt.Registry) error {

	if m.DeploymentType != nil {
		if err := m.DeploymentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateErrInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ErrInfo); i++ {

		if m.ErrInfo[i] != nil {
			if err := m.ErrInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateMemorySummary(ctx context.Context, formats strfmt.Registry) error {

	if m.MemorySummary != nil {
		if err := m.MemorySummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memorySummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memorySummary")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateNetCounterList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetCounterList); i++ {

		if m.NetCounterList[i] != nil {
			if err := m.NetCounterList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netCounterList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("netCounterList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateNetStatusList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetStatusList); i++ {

		if m.NetStatusList[i] != nil {
			if err := m.NetStatusList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netStatusList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("netStatusList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateRunState(ctx context.Context, formats strfmt.Registry) error {

	if m.RunState != nil {
		if err := m.RunState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runState")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateSwInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SwInfo); i++ {

		if m.SwInfo[i] != nil {
			if err := m.SwInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("swInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("swInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateSwState(ctx context.Context, formats strfmt.Registry) error {

	if m.SwState != nil {
		if err := m.SwState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("swState")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstStatusMsg) contextValidateZpoolMetrics(ctx context.Context, formats strfmt.Registry) error {

	if m.ZpoolMetrics != nil {
		if err := m.ZpoolMetrics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("zpoolMetrics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("zpoolMetrics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstStatusMsg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstStatusMsg) UnmarshalBinary(b []byte) error {
	var res AppInstStatusMsg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
