// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ZcOpsStatus ZedCloud internal operation status
//
// - OPS_STATUS_PENDING: In rare cases, system may not start operation when it was requested. Client will be notified that operation is PENDING
//   - OPS_STATUS_ONGOING: system will start the operation, but at the time response was generated, operation is still ONGOING.
//   - OPS_STATUS_COMPLETE: Even if the result of the operations may result in failure, but the OpsStatus will marked COMPLETE for almost all cases.
//
// swagger:model ZcOpsStatus
type ZcOpsStatus string

func NewZcOpsStatus(value ZcOpsStatus) *ZcOpsStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ZcOpsStatus.
func (m ZcOpsStatus) Pointer() *ZcOpsStatus {
	return &m
}

const (

	// ZcOpsStatusOPSSTATUSUNSPECIFIED captures enum value "OPS_STATUS_UNSPECIFIED"
	ZcOpsStatusOPSSTATUSUNSPECIFIED ZcOpsStatus = "OPS_STATUS_UNSPECIFIED"

	// ZcOpsStatusOPSSTATUSPENDING captures enum value "OPS_STATUS_PENDING"
	ZcOpsStatusOPSSTATUSPENDING ZcOpsStatus = "OPS_STATUS_PENDING"

	// ZcOpsStatusOPSSTATUSONGOING captures enum value "OPS_STATUS_ONGOING"
	ZcOpsStatusOPSSTATUSONGOING ZcOpsStatus = "OPS_STATUS_ONGOING"

	// ZcOpsStatusOPSSTATUSCOMPLETE captures enum value "OPS_STATUS_COMPLETE"
	ZcOpsStatusOPSSTATUSCOMPLETE ZcOpsStatus = "OPS_STATUS_COMPLETE"
)

// for schema
var zcOpsStatusEnum []interface{}

func init() {
	var res []ZcOpsStatus
	if err := json.Unmarshal([]byte(`["OPS_STATUS_UNSPECIFIED","OPS_STATUS_PENDING","OPS_STATUS_ONGOING","OPS_STATUS_COMPLETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zcOpsStatusEnum = append(zcOpsStatusEnum, v)
	}
}

func (m ZcOpsStatus) validateZcOpsStatusEnum(path, location string, value ZcOpsStatus) error {
	if err := validate.EnumCase(path, location, value, zcOpsStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this zc ops status
func (m ZcOpsStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateZcOpsStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this zc ops status based on context it is used
func (m ZcOpsStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
