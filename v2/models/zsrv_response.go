// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZsrvResponse zsrv response
//
// swagger:model ZsrvResponse
type ZsrvResponse struct {

	// end time
	EndTime string `json:"endTime,omitempty"`

	// one or more errors will be set if the operation failed
	// i.e. httpStatusCode != 2xx
	Error []*ZsrvError `json:"error"`

	// http response
	HTTPStatusCode int32 `json:"httpStatusCode,omitempty"`

	// summary of the error in text format
	HTTPStatusMsg string `json:"httpStatusMsg,omitempty"`

	// for tracking asynchronous tasks
	JobID string `json:"jobId,omitempty"`

	// Unique value identifies the object that was operated on
	ObjectID string `json:"objectId,omitempty"`

	// zedcloud object kind on which the operation was performed
	ObjectKind string `json:"objectKind,omitempty"`

	// name of the object
	ObjectName string `json:"objectName,omitempty"`

	// object revision post the operation, note Read operation
	// doesn't change the revision
	ObjectRevision string `json:"objectRevision,omitempty"`

	// object type
	ObjectType *ObjectType `json:"objectType,omitempty"`

	// if this is log running job
	OperationStatus *ZcOpsStatus `json:"operationStatus,omitempty"`

	// time of operation
	OperationTime string `json:"operationTime,omitempty"`

	// Describes one of the operations type : possible values
	//                         Read/Delete/Create/Update/List
	OperationType *ZcOpsType `json:"operationType,omitempty"`

	// total time taken by operations
	StartTime string `json:"startTime,omitempty"`

	// the operation is performed on behalf of this user
	User string `json:"user,omitempty"`
}

// Validate validates this zsrv response
func (m *ZsrvResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZsrvResponse) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	for i := 0; i < len(m.Error); i++ {
		if swag.IsZero(m.Error[i]) { // not required
			continue
		}

		if m.Error[i] != nil {
			if err := m.Error[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("error" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("error" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZsrvResponse) validateObjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	if m.ObjectType != nil {
		if err := m.ObjectType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectType")
			}
			return err
		}
	}

	return nil
}

func (m *ZsrvResponse) validateOperationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.OperationStatus) { // not required
		return nil
	}

	if m.OperationStatus != nil {
		if err := m.OperationStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ZsrvResponse) validateOperationType(formats strfmt.Registry) error {
	if swag.IsZero(m.OperationType) { // not required
		return nil
	}

	if m.OperationType != nil {
		if err := m.OperationType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zsrv response based on the context it is used
func (m *ZsrvResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZsrvResponse) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Error); i++ {

		if m.Error[i] != nil {
			if err := m.Error[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("error" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("error" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ZsrvResponse) contextValidateObjectType(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectType != nil {
		if err := m.ObjectType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectType")
			}
			return err
		}
	}

	return nil
}

func (m *ZsrvResponse) contextValidateOperationStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationStatus != nil {
		if err := m.OperationStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ZsrvResponse) contextValidateOperationType(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationType != nil {
		if err := m.OperationType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZsrvResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZsrvResponse) UnmarshalBinary(b []byte) error {
	var res ZsrvResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
