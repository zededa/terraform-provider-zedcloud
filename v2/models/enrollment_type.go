// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EnrollmentType enrollment types.
//
// swagger:model EnrollmentType
type EnrollmentType string

func NewEnrollmentType(value EnrollmentType) *EnrollmentType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EnrollmentType.
func (m EnrollmentType) Pointer() *EnrollmentType {
	return &m
}

const (

	// EnrollmentTypeENROLLMENTTYPEUNSPECIFIED captures enum value "ENROLLMENT_TYPE_UNSPECIFIED"
	EnrollmentTypeENROLLMENTTYPEUNSPECIFIED EnrollmentType = "ENROLLMENT_TYPE_UNSPECIFIED"

	// EnrollmentTypeENROLLMENTTYPEINDIVIDUAL captures enum value "ENROLLMENT_TYPE_INDIVIDUAL"
	EnrollmentTypeENROLLMENTTYPEINDIVIDUAL EnrollmentType = "ENROLLMENT_TYPE_INDIVIDUAL"

	// EnrollmentTypeENROLLMENTTYPEGROUP captures enum value "ENROLLMENT_TYPE_GROUP"
	EnrollmentTypeENROLLMENTTYPEGROUP EnrollmentType = "ENROLLMENT_TYPE_GROUP"
)

// for schema
var enrollmentTypeEnum []interface{}

func init() {
	var res []EnrollmentType
	if err := json.Unmarshal([]byte(`["ENROLLMENT_TYPE_UNSPECIFIED","ENROLLMENT_TYPE_INDIVIDUAL","ENROLLMENT_TYPE_GROUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enrollmentTypeEnum = append(enrollmentTypeEnum, v)
	}
}

func (m EnrollmentType) validateEnrollmentTypeEnum(path, location string, value EnrollmentType) error {
	if err := validate.EnumCase(path, location, value, enrollmentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this enrollment type
func (m EnrollmentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEnrollmentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this enrollment type based on context it is used
func (m EnrollmentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
