// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RoleState Values for this needs to match the const defined in libs/database/datamodel.go for
// backward compatibility.
//
// swagger:model RoleState
type RoleState string

func NewRoleState(value RoleState) *RoleState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RoleState.
func (m RoleState) Pointer() *RoleState {
	return &m
}

const (

	// RoleStateROLESTATEUNSPECIFIED captures enum value "ROLE_STATE_UNSPECIFIED"
	RoleStateROLESTATEUNSPECIFIED RoleState = "ROLE_STATE_UNSPECIFIED"

	// RoleStateROLESTATECREATED captures enum value "ROLE_STATE_CREATED"
	RoleStateROLESTATECREATED RoleState = "ROLE_STATE_CREATED"

	// RoleStateROLESTATEACTIVE captures enum value "ROLE_STATE_ACTIVE"
	RoleStateROLESTATEACTIVE RoleState = "ROLE_STATE_ACTIVE"

	// RoleStateROLESTATEINACTIVE captures enum value "ROLE_STATE_INACTIVE"
	RoleStateROLESTATEINACTIVE RoleState = "ROLE_STATE_INACTIVE"

	// RoleStateROLESTATEARCHIVED captures enum value "ROLE_STATE_ARCHIVED"
	RoleStateROLESTATEARCHIVED RoleState = "ROLE_STATE_ARCHIVED"
)

// for schema
var roleStateEnum []interface{}

func init() {
	var res []RoleState
	if err := json.Unmarshal([]byte(`["ROLE_STATE_UNSPECIFIED","ROLE_STATE_CREATED","ROLE_STATE_ACTIVE","ROLE_STATE_INACTIVE","ROLE_STATE_ARCHIVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleStateEnum = append(roleStateEnum, v)
	}
}

func (m RoleState) validateRoleStateEnum(path, location string, value RoleState) error {
	if err := validate.EnumCase(path, location, value, roleStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this role state
func (m RoleState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRoleStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this role state based on context it is used
func (m RoleState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
