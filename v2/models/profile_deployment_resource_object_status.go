// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileDeploymentResourceObjectStatus profile deployment resource object status
//
// swagger:model ProfileDeploymentResourceObjectStatus
type ProfileDeploymentResourceObjectStatus struct {

	// Unique ID of the object.
	// Read Only: true
	// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
	ID string `json:"id,omitempty"`

	// object run state
	ObjectRunState *RunState `json:"objectRunState,omitempty"`

	// object type
	ObjectType *ObjectType `json:"objectType,omitempty"`
}

// Validate validates this profile deployment resource object status
func (m *ProfileDeploymentResourceObjectStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectRunState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileDeploymentResourceObjectStatus) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}`); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeploymentResourceObjectStatus) validateObjectRunState(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectRunState) { // not required
		return nil
	}

	if m.ObjectRunState != nil {
		if err := m.ObjectRunState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectRunState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectRunState")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileDeploymentResourceObjectStatus) validateObjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	if m.ObjectType != nil {
		if err := m.ObjectType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this profile deployment resource object status based on the context it is used
func (m *ProfileDeploymentResourceObjectStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectRunState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileDeploymentResourceObjectStatus) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeploymentResourceObjectStatus) contextValidateObjectRunState(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectRunState != nil {

		if swag.IsZero(m.ObjectRunState) { // not required
			return nil
		}

		if err := m.ObjectRunState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectRunState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectRunState")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileDeploymentResourceObjectStatus) contextValidateObjectType(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectType != nil {

		if swag.IsZero(m.ObjectType) { // not required
			return nil
		}

		if err := m.ObjectType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileDeploymentResourceObjectStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileDeploymentResourceObjectStatus) UnmarshalBinary(b []byte) error {
	var res ProfileDeploymentResourceObjectStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
