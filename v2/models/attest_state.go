// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AttestState attest state
//
// swagger:model AttestState
type AttestState string

func NewAttestState(value AttestState) *AttestState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AttestState.
func (m AttestState) Pointer() *AttestState {
	return &m
}

const (

	// AttestStateATTESTSTATEUNSPECIFIED captures enum value "ATTEST_STATE_UNSPECIFIED"
	AttestStateATTESTSTATEUNSPECIFIED AttestState = "ATTEST_STATE_UNSPECIFIED"

	// AttestStateATTESTSTATENONE captures enum value "ATTEST_STATE_NONE"
	AttestStateATTESTSTATENONE AttestState = "ATTEST_STATE_NONE"

	// AttestStateATTESTSTATEFAIL captures enum value "ATTEST_STATE_FAIL"
	AttestStateATTESTSTATEFAIL AttestState = "ATTEST_STATE_FAIL"

	// AttestStateATTESTSTATEPASS captures enum value "ATTEST_STATE_PASS"
	AttestStateATTESTSTATEPASS AttestState = "ATTEST_STATE_PASS"

	// AttestStateATTESTSTATEPASSNOPCR captures enum value "ATTEST_STATE_PASS_NO_PCR"
	AttestStateATTESTSTATEPASSNOPCR AttestState = "ATTEST_STATE_PASS_NO_PCR"

	// AttestStateATTESTSTATEFAILNOPCR captures enum value "ATTEST_STATE_FAIL_NO_PCR"
	AttestStateATTESTSTATEFAILNOPCR AttestState = "ATTEST_STATE_FAIL_NO_PCR"
)

// for schema
var attestStateEnum []interface{}

func init() {
	var res []AttestState
	if err := json.Unmarshal([]byte(`["ATTEST_STATE_UNSPECIFIED","ATTEST_STATE_NONE","ATTEST_STATE_FAIL","ATTEST_STATE_PASS","ATTEST_STATE_PASS_NO_PCR","ATTEST_STATE_FAIL_NO_PCR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		attestStateEnum = append(attestStateEnum, v)
	}
}

func (m AttestState) validateAttestStateEnum(path, location string, value AttestState) error {
	if err := validate.EnumCase(path, location, value, attestStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this attest state
func (m AttestState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAttestStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this attest state based on context it is used
func (m AttestState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
