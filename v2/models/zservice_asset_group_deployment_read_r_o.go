// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZserviceAssetGroupDeploymentReadRO DeploymentReadRO - refers to the object for reading a deployment
//
// swagger:model zservice_asset_groupDeploymentReadRO
type ZserviceAssetGroupDeploymentReadRO struct {

	// chart
	Chart *ZserviceAssetGroupChart `json:"chart,omitempty"`

	// deployment Id
	DeploymentID string `json:"deploymentId,omitempty"`

	// deployment name
	DeploymentName string `json:"deploymentName,omitempty"`

	// latest revision
	LatestRevision int64 `json:"latestRevision,omitempty"`

	// override asset values
	OverrideAssetValues *ZserviceAssetGroupAssetValues `json:"overrideAssetValues,omitempty"`

	// target asset
	TargetAsset *ZserviceAssetGroupAsset `json:"targetAsset,omitempty"`
}

// Validate validates this zservice asset group deployment read r o
func (m *ZserviceAssetGroupDeploymentReadRO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideAssetValues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAsset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZserviceAssetGroupDeploymentReadRO) validateChart(formats strfmt.Registry) error {
	if swag.IsZero(m.Chart) { // not required
		return nil
	}

	if m.Chart != nil {
		if err := m.Chart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chart")
			}
			return err
		}
	}

	return nil
}

func (m *ZserviceAssetGroupDeploymentReadRO) validateOverrideAssetValues(formats strfmt.Registry) error {
	if swag.IsZero(m.OverrideAssetValues) { // not required
		return nil
	}

	if m.OverrideAssetValues != nil {
		if err := m.OverrideAssetValues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrideAssetValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overrideAssetValues")
			}
			return err
		}
	}

	return nil
}

func (m *ZserviceAssetGroupDeploymentReadRO) validateTargetAsset(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetAsset) { // not required
		return nil
	}

	if m.TargetAsset != nil {
		if err := m.TargetAsset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetAsset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetAsset")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zservice asset group deployment read r o based on the context it is used
func (m *ZserviceAssetGroupDeploymentReadRO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverrideAssetValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetAsset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZserviceAssetGroupDeploymentReadRO) contextValidateChart(ctx context.Context, formats strfmt.Registry) error {

	if m.Chart != nil {

		if swag.IsZero(m.Chart) { // not required
			return nil
		}

		if err := m.Chart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chart")
			}
			return err
		}
	}

	return nil
}

func (m *ZserviceAssetGroupDeploymentReadRO) contextValidateOverrideAssetValues(ctx context.Context, formats strfmt.Registry) error {

	if m.OverrideAssetValues != nil {

		if swag.IsZero(m.OverrideAssetValues) { // not required
			return nil
		}

		if err := m.OverrideAssetValues.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrideAssetValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overrideAssetValues")
			}
			return err
		}
	}

	return nil
}

func (m *ZserviceAssetGroupDeploymentReadRO) contextValidateTargetAsset(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetAsset != nil {

		if swag.IsZero(m.TargetAsset) { // not required
			return nil
		}

		if err := m.TargetAsset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetAsset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetAsset")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZserviceAssetGroupDeploymentReadRO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZserviceAssetGroupDeploymentReadRO) UnmarshalBinary(b []byte) error {
	var res ZserviceAssetGroupDeploymentReadRO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
