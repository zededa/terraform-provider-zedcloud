// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeviceCmdsSubType  - DeviceNoOp: Device Operation: No Operation
//   - DeviceStart: Device Operation: Start
//   - DeviceStop: Device Operation: Stop
//   - DeviceReboot: Device Operation: Reboot: Power cycle the device
//   - DeviceShutdown: Device Operation: Shutdown- Power off the device
//   - DeviceUpdateOS: Device Operation: Update OS- deprecated
//   - DeviceApplyOS: Device Operation: Apply OS- Change Boot order of installed images
//   - DeviceReset: Device Operation: Reset- Config reset to factory default
//   - DeviceAddOS: Device Operation: Add OS- Install new image but don't change boot order
//   - DeviceDropOS: Device Operation: Drop OS- Remove uninstalled image but don't change boot order
//   - DeviceOffboard: Device Operation Type: offboard the device
//   - DeviceActivate: Device Activate
//   - DeviceDeActivate: Device Deactivate
//   - DeviceBaseosRetry: Device Operation: Retry OS
//   - DeviceStartDebugMode: Device Operation: Run device in debug mode.
//   - DeviceStopDebugMode: Device Operation: Stop device in debug mode.
//   - PreparePowerOff: Device Operation: Gracefully shutdown all apps and prepare for power down.
//   - DeviceStartEdgeviewMode: Device Operation: Run device in edgeview mode.
//   - DeviceStopEdgeviewMode: Device Operation: Stop device in edgeview mode.
//   - DeviceEdgeviewClientScript: Device Operation: get Edgeview client script if activated.
//
// swagger:model DeviceCmdsSubType
type DeviceCmdsSubType string

func NewDeviceCmdsSubType(value DeviceCmdsSubType) *DeviceCmdsSubType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeviceCmdsSubType.
func (m DeviceCmdsSubType) Pointer() *DeviceCmdsSubType {
	return &m
}

const (

	// DeviceCmdsSubTypeDeviceNoOp captures enum value "DeviceNoOp"
	DeviceCmdsSubTypeDeviceNoOp DeviceCmdsSubType = "DeviceNoOp"

	// DeviceCmdsSubTypeDeviceStart captures enum value "DeviceStart"
	DeviceCmdsSubTypeDeviceStart DeviceCmdsSubType = "DeviceStart"

	// DeviceCmdsSubTypeDeviceStop captures enum value "DeviceStop"
	DeviceCmdsSubTypeDeviceStop DeviceCmdsSubType = "DeviceStop"

	// DeviceCmdsSubTypeDeviceReboot captures enum value "DeviceReboot"
	DeviceCmdsSubTypeDeviceReboot DeviceCmdsSubType = "DeviceReboot"

	// DeviceCmdsSubTypeDeviceShutdown captures enum value "DeviceShutdown"
	DeviceCmdsSubTypeDeviceShutdown DeviceCmdsSubType = "DeviceShutdown"

	// DeviceCmdsSubTypeDeviceUpdateOS captures enum value "DeviceUpdateOS"
	DeviceCmdsSubTypeDeviceUpdateOS DeviceCmdsSubType = "DeviceUpdateOS"

	// DeviceCmdsSubTypeDeviceApplyOS captures enum value "DeviceApplyOS"
	DeviceCmdsSubTypeDeviceApplyOS DeviceCmdsSubType = "DeviceApplyOS"

	// DeviceCmdsSubTypeDeviceReset captures enum value "DeviceReset"
	DeviceCmdsSubTypeDeviceReset DeviceCmdsSubType = "DeviceReset"

	// DeviceCmdsSubTypeDeviceAddOS captures enum value "DeviceAddOS"
	DeviceCmdsSubTypeDeviceAddOS DeviceCmdsSubType = "DeviceAddOS"

	// DeviceCmdsSubTypeDeviceDropOS captures enum value "DeviceDropOS"
	DeviceCmdsSubTypeDeviceDropOS DeviceCmdsSubType = "DeviceDropOS"

	// DeviceCmdsSubTypeDeviceOffboard captures enum value "DeviceOffboard"
	DeviceCmdsSubTypeDeviceOffboard DeviceCmdsSubType = "DeviceOffboard"

	// DeviceCmdsSubTypeDeviceActivate captures enum value "DeviceActivate"
	DeviceCmdsSubTypeDeviceActivate DeviceCmdsSubType = "DeviceActivate"

	// DeviceCmdsSubTypeDeviceDeActivate captures enum value "DeviceDeActivate"
	DeviceCmdsSubTypeDeviceDeActivate DeviceCmdsSubType = "DeviceDeActivate"

	// DeviceCmdsSubTypeDeviceBaseosRetry captures enum value "DeviceBaseosRetry"
	DeviceCmdsSubTypeDeviceBaseosRetry DeviceCmdsSubType = "DeviceBaseosRetry"

	// DeviceCmdsSubTypeDeviceStartDebugMode captures enum value "DeviceStartDebugMode"
	DeviceCmdsSubTypeDeviceStartDebugMode DeviceCmdsSubType = "DeviceStartDebugMode"

	// DeviceCmdsSubTypeDeviceStopDebugMode captures enum value "DeviceStopDebugMode"
	DeviceCmdsSubTypeDeviceStopDebugMode DeviceCmdsSubType = "DeviceStopDebugMode"

	// DeviceCmdsSubTypePreparePowerOff captures enum value "PreparePowerOff"
	DeviceCmdsSubTypePreparePowerOff DeviceCmdsSubType = "PreparePowerOff"

	// DeviceCmdsSubTypeDeviceStartEdgeviewMode captures enum value "DeviceStartEdgeviewMode"
	DeviceCmdsSubTypeDeviceStartEdgeviewMode DeviceCmdsSubType = "DeviceStartEdgeviewMode"

	// DeviceCmdsSubTypeDeviceStopEdgeviewMode captures enum value "DeviceStopEdgeviewMode"
	DeviceCmdsSubTypeDeviceStopEdgeviewMode DeviceCmdsSubType = "DeviceStopEdgeviewMode"

	// DeviceCmdsSubTypeDeviceEdgeviewClientScript captures enum value "DeviceEdgeviewClientScript"
	DeviceCmdsSubTypeDeviceEdgeviewClientScript DeviceCmdsSubType = "DeviceEdgeviewClientScript"
)

// for schema
var deviceCmdsSubTypeEnum []interface{}

func init() {
	var res []DeviceCmdsSubType
	if err := json.Unmarshal([]byte(`["DeviceNoOp","DeviceStart","DeviceStop","DeviceReboot","DeviceShutdown","DeviceUpdateOS","DeviceApplyOS","DeviceReset","DeviceAddOS","DeviceDropOS","DeviceOffboard","DeviceActivate","DeviceDeActivate","DeviceBaseosRetry","DeviceStartDebugMode","DeviceStopDebugMode","PreparePowerOff","DeviceStartEdgeviewMode","DeviceStopEdgeviewMode","DeviceEdgeviewClientScript"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceCmdsSubTypeEnum = append(deviceCmdsSubTypeEnum, v)
	}
}

func (m DeviceCmdsSubType) validateDeviceCmdsSubTypeEnum(path, location string, value DeviceCmdsSubType) error {
	if err := validate.EnumCase(path, location, value, deviceCmdsSubTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this device cmds sub type
func (m DeviceCmdsSubType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeviceCmdsSubTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this device cmds sub type based on context it is used
func (m DeviceCmdsSubType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
