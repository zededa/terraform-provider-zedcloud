// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppNamingSchemeV2 type of name aliasing.
//
// swagger:model AppNamingSchemeV2
type AppNamingSchemeV2 string

func NewAppNamingSchemeV2(value AppNamingSchemeV2) *AppNamingSchemeV2 {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppNamingSchemeV2.
func (m AppNamingSchemeV2) Pointer() *AppNamingSchemeV2 {
	return &m
}

const (

	// AppNamingSchemeV2APPNAMINGSCHEMEV2UNSPECIFIED captures enum value "APP_NAMING_SCHEMEV2_UNSPECIFIED"
	AppNamingSchemeV2APPNAMINGSCHEMEV2UNSPECIFIED AppNamingSchemeV2 = "APP_NAMING_SCHEMEV2_UNSPECIFIED"

	// AppNamingSchemeV2APPNAMINGSCHEMEV2DEVICE captures enum value "APP_NAMING_SCHEMEV2_DEVICE"
	AppNamingSchemeV2APPNAMINGSCHEMEV2DEVICE AppNamingSchemeV2 = "APP_NAMING_SCHEMEV2_DEVICE"

	// AppNamingSchemeV2APPNAMINGSCHEMEV2APPDEVICE captures enum value "APP_NAMING_SCHEMEV2_APP_DEVICE"
	AppNamingSchemeV2APPNAMINGSCHEMEV2APPDEVICE AppNamingSchemeV2 = "APP_NAMING_SCHEMEV2_APP_DEVICE"

	// AppNamingSchemeV2APPNAMINGSCHEMEV2PROJECTDEVICE captures enum value "APP_NAMING_SCHEMEV2_PROJECT_DEVICE"
	AppNamingSchemeV2APPNAMINGSCHEMEV2PROJECTDEVICE AppNamingSchemeV2 = "APP_NAMING_SCHEMEV2_PROJECT_DEVICE"

	// AppNamingSchemeV2APPNAMINGSCHEMEV2PROJECTAPPDEVICE captures enum value "APP_NAMING_SCHEMEV2_PROJECT_APP_DEVICE"
	AppNamingSchemeV2APPNAMINGSCHEMEV2PROJECTAPPDEVICE AppNamingSchemeV2 = "APP_NAMING_SCHEMEV2_PROJECT_APP_DEVICE"
)

// for schema
var appNamingSchemeV2Enum []interface{}

func init() {
	var res []AppNamingSchemeV2
	if err := json.Unmarshal([]byte(`["APP_NAMING_SCHEMEV2_UNSPECIFIED","APP_NAMING_SCHEMEV2_DEVICE","APP_NAMING_SCHEMEV2_APP_DEVICE","APP_NAMING_SCHEMEV2_PROJECT_DEVICE","APP_NAMING_SCHEMEV2_PROJECT_APP_DEVICE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appNamingSchemeV2Enum = append(appNamingSchemeV2Enum, v)
	}
}

func (m AppNamingSchemeV2) validateAppNamingSchemeV2Enum(path, location string, value AppNamingSchemeV2) error {
	if err := validate.EnumCase(path, location, value, appNamingSchemeV2Enum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app naming scheme v2
func (m AppNamingSchemeV2) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppNamingSchemeV2Enum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app naming scheme v2 based on context it is used
func (m AppNamingSchemeV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
