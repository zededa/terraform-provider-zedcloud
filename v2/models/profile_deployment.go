// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileDeployment Deployments for Application profile
//
// Profile Deployment is a proto that should be used by user-agents to create/update deployments
//
// swagger:model ProfileDeployment
type ProfileDeployment struct {

	// app profile id
	// Required: true
	AppProfileInfo *AppProfileInfo `json:"appProfileInfo"`

	// Detailed description of the deployment.
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// unique Id of the deployment.
	// Read Only: true
	// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
	ID string `json:"id,omitempty"`

	// User defined name of the deployment, unique across the enterprise. Once deployment is created, name canâ€™t be changed.
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// project id
	// Required: true
	ProjectID *string `json:"projectId"`

	// status
	Status string `json:"status,omitempty"`

	// asset group info
	// Required: true
	TargetAssetGroup *TargetAssetGroup `json:"targetAssetGroup"`

	// User defined title of the deployment. Title can be changed at any time.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title string `json:"title,omitempty"`
}

// Validate validates this profile deployment
func (m *ProfileDeployment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppProfileInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAssetGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileDeployment) validateAppProfileInfo(formats strfmt.Registry) error {

	if err := validate.Required("appProfileInfo", "body", m.AppProfileInfo); err != nil {
		return err
	}

	if m.AppProfileInfo != nil {
		if err := m.AppProfileInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appProfileInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appProfileInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileDeployment) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 256); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeployment) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}`); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeployment) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeployment) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeployment) validateTargetAssetGroup(formats strfmt.Registry) error {

	if err := validate.Required("targetAssetGroup", "body", m.TargetAssetGroup); err != nil {
		return err
	}

	if m.TargetAssetGroup != nil {
		if err := m.TargetAssetGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetAssetGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetAssetGroup")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileDeployment) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", m.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", m.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("title", "body", m.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this profile deployment based on the context it is used
func (m *ProfileDeployment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppProfileInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetAssetGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileDeployment) contextValidateAppProfileInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AppProfileInfo != nil {

		if err := m.AppProfileInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appProfileInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appProfileInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileDeployment) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeployment) contextValidateTargetAssetGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetAssetGroup != nil {

		if err := m.TargetAssetGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetAssetGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetAssetGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileDeployment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileDeployment) UnmarshalBinary(b []byte) error {
	var res ProfileDeployment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
