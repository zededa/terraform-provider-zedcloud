// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterPolicy Cluster policy body detail
//
// cluster policy to bring up cluster on devices in this project
//
// swagger:model ClusterPolicy
type ClusterPolicy struct {

	// UUID of the app policy linked to this cluster policy
	// Required: true
	// Pattern: [0-9-a-z-]+
	AppPolicyID *string `json:"appPolicyID"`

	// Cluster Policy Parameters
	ClusterConfig *ClusterConfig `json:"clusterConfig,omitempty"`

	// UUID of the network policy linked to this cluster policy
	// Required: true
	// Pattern: [0-9-a-z-]+
	NetworkPolicyID *string `json:"networkPolicyID"`

	// Type of cluster
	// Required: true
	Type *ClusterType `json:"type"`
}

// Validate validates this cluster policy
func (m *ClusterPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppPolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkPolicyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterPolicy) validateAppPolicyID(formats strfmt.Registry) error {

	if err := validate.Required("appPolicyID", "body", m.AppPolicyID); err != nil {
		return err
	}

	if err := validate.Pattern("appPolicyID", "body", *m.AppPolicyID, `[0-9-a-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterPolicy) validateClusterConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterConfig) { // not required
		return nil
	}

	if m.ClusterConfig != nil {
		if err := m.ClusterConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterPolicy) validateNetworkPolicyID(formats strfmt.Registry) error {

	if err := validate.Required("networkPolicyID", "body", m.NetworkPolicyID); err != nil {
		return err
	}

	if err := validate.Pattern("networkPolicyID", "body", *m.NetworkPolicyID, `[0-9-a-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterPolicy) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster policy based on the context it is used
func (m *ClusterPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterPolicy) contextValidateClusterConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterConfig != nil {
		if err := m.ClusterConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterPolicy) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterPolicy) UnmarshalBinary(b []byte) error {
	var res ClusterPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
