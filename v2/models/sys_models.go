// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SysModels SysModels  payload details
//
// SysModels used when listing the available models, if  consists of various model attributes like terse, model list and next filter.
//
// swagger:model SysModels
type SysModels struct {

	// List of filtered Sys Models
	List []*SysModel `json:"list"`

	// Responded page details of filtered records
	Next *Cursor `json:"next,omitempty"`

	// Summary by brand distribution
	SummaryByBrandDistribution *Summary `json:"summaryByBrandDistribution,omitempty"`

	// Summary by device distribution
	SummaryByDeviceDistribution *Summary `json:"summaryByDeviceDistribution,omitempty"`

	// Summary of filtered model records
	Terse *Summary `json:"terse,omitempty"`
}

// Validate validates this sys models
func (m *SysModels) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummaryByBrandDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummaryByDeviceDistribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SysModels) validateList(formats strfmt.Registry) error {
	if swag.IsZero(m.List) { // not required
		return nil
	}

	for i := 0; i < len(m.List); i++ {
		if swag.IsZero(m.List[i]) { // not required
			continue
		}

		if m.List[i] != nil {
			if err := m.List[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SysModels) validateNext(formats strfmt.Registry) error {
	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {
		if err := m.Next.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next")
			}
			return err
		}
	}

	return nil
}

func (m *SysModels) validateSummaryByBrandDistribution(formats strfmt.Registry) error {
	if swag.IsZero(m.SummaryByBrandDistribution) { // not required
		return nil
	}

	if m.SummaryByBrandDistribution != nil {
		if err := m.SummaryByBrandDistribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryByBrandDistribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryByBrandDistribution")
			}
			return err
		}
	}

	return nil
}

func (m *SysModels) validateSummaryByDeviceDistribution(formats strfmt.Registry) error {
	if swag.IsZero(m.SummaryByDeviceDistribution) { // not required
		return nil
	}

	if m.SummaryByDeviceDistribution != nil {
		if err := m.SummaryByDeviceDistribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryByDeviceDistribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryByDeviceDistribution")
			}
			return err
		}
	}

	return nil
}

func (m *SysModels) validateTerse(formats strfmt.Registry) error {
	if swag.IsZero(m.Terse) { // not required
		return nil
	}

	if m.Terse != nil {
		if err := m.Terse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terse")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sys models based on the context it is used
func (m *SysModels) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNext(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummaryByBrandDistribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummaryByDeviceDistribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTerse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SysModels) contextValidateList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.List); i++ {

		if m.List[i] != nil {
			if err := m.List[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SysModels) contextValidateNext(ctx context.Context, formats strfmt.Registry) error {

	if m.Next != nil {
		if err := m.Next.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("next")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("next")
			}
			return err
		}
	}

	return nil
}

func (m *SysModels) contextValidateSummaryByBrandDistribution(ctx context.Context, formats strfmt.Registry) error {

	if m.SummaryByBrandDistribution != nil {
		if err := m.SummaryByBrandDistribution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryByBrandDistribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryByBrandDistribution")
			}
			return err
		}
	}

	return nil
}

func (m *SysModels) contextValidateSummaryByDeviceDistribution(ctx context.Context, formats strfmt.Registry) error {

	if m.SummaryByDeviceDistribution != nil {
		if err := m.SummaryByDeviceDistribution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summaryByDeviceDistribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summaryByDeviceDistribution")
			}
			return err
		}
	}

	return nil
}

func (m *SysModels) contextValidateTerse(ctx context.Context, formats strfmt.Registry) error {

	if m.Terse != nil {
		if err := m.Terse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terse")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terse")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SysModels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SysModels) UnmarshalBinary(b []byte) error {
	var res SysModels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
