// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ControllerType third party controller types.
//
// swagger:model ControllerType
type ControllerType string

func NewControllerType(value ControllerType) *ControllerType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ControllerType.
func (m ControllerType) Pointer() *ControllerType {
	return &m
}

const (

	// ControllerTypeCONTROLLERTYPEUNSPECIFIED captures enum value "CONTROLLER_TYPE_UNSPECIFIED"
	ControllerTypeCONTROLLERTYPEUNSPECIFIED ControllerType = "CONTROLLER_TYPE_UNSPECIFIED"

	// ControllerTypeCONTROLLERTYPEAZURE captures enum value "CONTROLLER_TYPE_AZURE"
	ControllerTypeCONTROLLERTYPEAZURE ControllerType = "CONTROLLER_TYPE_AZURE"

	// ControllerTypeCONTROLLERTYPEAWS captures enum value "CONTROLLER_TYPE_AWS"
	ControllerTypeCONTROLLERTYPEAWS ControllerType = "CONTROLLER_TYPE_AWS"

	// ControllerTypeCONTROLLERTYPEGCP captures enum value "CONTROLLER_TYPE_GCP"
	ControllerTypeCONTROLLERTYPEGCP ControllerType = "CONTROLLER_TYPE_GCP"

	// ControllerTypeCONTROLLERTYPEVCO captures enum value "CONTROLLER_TYPE_VCO"
	ControllerTypeCONTROLLERTYPEVCO ControllerType = "CONTROLLER_TYPE_VCO"
)

// for schema
var controllerTypeEnum []interface{}

func init() {
	var res []ControllerType
	if err := json.Unmarshal([]byte(`["CONTROLLER_TYPE_UNSPECIFIED","CONTROLLER_TYPE_AZURE","CONTROLLER_TYPE_AWS","CONTROLLER_TYPE_GCP","CONTROLLER_TYPE_VCO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		controllerTypeEnum = append(controllerTypeEnum, v)
	}
}

func (m ControllerType) validateControllerTypeEnum(path, location string, value ControllerType) error {
	if err := validate.EnumCase(path, location, value, controllerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this controller type
func (m ControllerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateControllerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this controller type based on context it is used
func (m ControllerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
