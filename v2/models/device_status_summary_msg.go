// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceStatusSummaryMsg device status summary msg
//
// swagger:model DeviceStatusSummaryMsg
type DeviceStatusSummaryMsg struct {

	// Cpu
	CPU *CPUSummary `json:"Cpu,omitempty"`

	// Memory - OBSOLETE. Use memorySummary instead.
	Memory *MemorySummary `json:"Memory,omitempty"`

	// storage
	Storage *StorageSummary `json:"Storage,omitempty"`

	// admin state
	AdminState *AdminState `json:"adminState,omitempty"`

	// App instance count that is actively running on the device
	AppInstCount int64 `json:"appInstCount,omitempty"`

	// System defined universally unique clusterInstance ID, unique across the enterprise.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ClusterID string `json:"clusterID,omitempty"`

	// debug knob expiry time
	DebugKnob bool `json:"debugKnob,omitempty"`

	// debug knob expiry time
	// Format: date-time
	DebugKnobExpiryTime strfmt.DateTime `json:"debugKnobExpiryTime,omitempty"`

	// dev error
	DevError []*DeviceError `json:"devError"`

	// dinfo
	Dinfo *DeviceInfo `json:"dinfo,omitempty"`

	// Device edgeview session active
	EdgeviewActive bool `json:"edgeviewActive,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// Device location
	Location string `json:"location,omitempty"`

	// Device memory Info
	MemorySummary *DeviceMemorySummary `json:"memorySummary,omitempty"`

	// minfo
	Minfo *ZManufacturerInfo `json:"minfo,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// net status list
	NetStatusList []*NetworkStatus `json:"netStatusList"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// Project name to which device is associated with
	ProjectName string `json:"projectName,omitempty"`

	// run state
	RunState *RunState `json:"runState,omitempty"`

	// sw info
	SwInfo []*DeviceSWInfo `json:"swInfo"`

	// deprecated = 5;
	//
	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this device status summary msg
func (m *DeviceStatusSummaryMsg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdminState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebugKnobExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDinfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemorySummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetStatusList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceStatusSummaryMsg) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Cpu")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if m.Memory != nil {
		if err := m.Memory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Memory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Memory")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateStorage(formats strfmt.Registry) error {
	if swag.IsZero(m.Storage) { // not required
		return nil
	}

	if m.Storage != nil {
		if err := m.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Storage")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateAdminState(formats strfmt.Registry) error {
	if swag.IsZero(m.AdminState) { // not required
		return nil
	}

	if m.AdminState != nil {
		if err := m.AdminState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminState")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.MinLength("clusterID", "body", m.ClusterID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterID", "body", m.ClusterID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("clusterID", "body", m.ClusterID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateDebugKnobExpiryTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DebugKnobExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("debugKnobExpiryTime", "body", "date-time", m.DebugKnobExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateDevError(formats strfmt.Registry) error {
	if swag.IsZero(m.DevError) { // not required
		return nil
	}

	for i := 0; i < len(m.DevError); i++ {
		if swag.IsZero(m.DevError[i]) { // not required
			continue
		}

		if m.DevError[i] != nil {
			if err := m.DevError[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devError" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devError" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateDinfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Dinfo) { // not required
		return nil
	}

	if m.Dinfo != nil {
		if err := m.Dinfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dinfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dinfo")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateMemorySummary(formats strfmt.Registry) error {
	if swag.IsZero(m.MemorySummary) { // not required
		return nil
	}

	if m.MemorySummary != nil {
		if err := m.MemorySummary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memorySummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memorySummary")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateMinfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Minfo) { // not required
		return nil
	}

	if m.Minfo != nil {
		if err := m.Minfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minfo")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateNetStatusList(formats strfmt.Registry) error {
	if swag.IsZero(m.NetStatusList) { // not required
		return nil
	}

	for i := 0; i < len(m.NetStatusList); i++ {
		if swag.IsZero(m.NetStatusList[i]) { // not required
			continue
		}

		if m.NetStatusList[i] != nil {
			if err := m.NetStatusList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netStatusList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("netStatusList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateRunState(formats strfmt.Registry) error {
	if swag.IsZero(m.RunState) { // not required
		return nil
	}

	if m.RunState != nil {
		if err := m.RunState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runState")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) validateSwInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SwInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.SwInfo); i++ {
		if swag.IsZero(m.SwInfo[i]) { // not required
			continue
		}

		if m.SwInfo[i] != nil {
			if err := m.SwInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("swInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("swInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this device status summary msg based on the context it is used
func (m *DeviceStatusSummaryMsg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPU(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdminState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDinfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemorySummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMinfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetStatusList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSwInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateCPU(ctx context.Context, formats strfmt.Registry) error {

	if m.CPU != nil {
		if err := m.CPU.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cpu")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Cpu")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateMemory(ctx context.Context, formats strfmt.Registry) error {

	if m.Memory != nil {
		if err := m.Memory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Memory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Memory")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.Storage != nil {
		if err := m.Storage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Storage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Storage")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateAdminState(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminState != nil {
		if err := m.AdminState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminState")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateDevError(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DevError); i++ {

		if m.DevError[i] != nil {
			if err := m.DevError[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devError" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devError" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateDinfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Dinfo != nil {
		if err := m.Dinfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dinfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dinfo")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateMemorySummary(ctx context.Context, formats strfmt.Registry) error {

	if m.MemorySummary != nil {
		if err := m.MemorySummary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memorySummary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memorySummary")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateMinfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Minfo != nil {
		if err := m.Minfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minfo")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateNetStatusList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetStatusList); i++ {

		if m.NetStatusList[i] != nil {
			if err := m.NetStatusList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netStatusList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("netStatusList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateRunState(ctx context.Context, formats strfmt.Registry) error {

	if m.RunState != nil {
		if err := m.RunState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runState")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusSummaryMsg) contextValidateSwInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SwInfo); i++ {

		if m.SwInfo[i] != nil {
			if err := m.SwInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("swInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("swInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceStatusSummaryMsg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceStatusSummaryMsg) UnmarshalBinary(b []byte) error {
	var res DeviceStatusSummaryMsg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
