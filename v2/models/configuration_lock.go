// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigurationLock configuration lock
//
// swagger:model ConfigurationLock
type ConfigurationLock string

func NewConfigurationLock(value ConfigurationLock) *ConfigurationLock {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigurationLock.
func (m ConfigurationLock) Pointer() *ConfigurationLock {
	return &m
}

const (

	// ConfigurationLockCONFIGURATIONLOCKUNSPECIFIED captures enum value "CONFIGURATION_LOCK_UNSPECIFIED"
	ConfigurationLockCONFIGURATIONLOCKUNSPECIFIED ConfigurationLock = "CONFIGURATION_LOCK_UNSPECIFIED"

	// ConfigurationLockCONFIGURATIONLOCKENABLED captures enum value "CONFIGURATION_LOCK_ENABLED"
	ConfigurationLockCONFIGURATIONLOCKENABLED ConfigurationLock = "CONFIGURATION_LOCK_ENABLED"

	// ConfigurationLockCONFIGURATIONLOCKDISABLED captures enum value "CONFIGURATION_LOCK_DISABLED"
	ConfigurationLockCONFIGURATIONLOCKDISABLED ConfigurationLock = "CONFIGURATION_LOCK_DISABLED"
)

// for schema
var configurationLockEnum []interface{}

func init() {
	var res []ConfigurationLock
	if err := json.Unmarshal([]byte(`["CONFIGURATION_LOCK_UNSPECIFIED","CONFIGURATION_LOCK_ENABLED","CONFIGURATION_LOCK_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configurationLockEnum = append(configurationLockEnum, v)
	}
}

func (m ConfigurationLock) validateConfigurationLockEnum(path, location string, value ConfigurationLock) error {
	if err := validate.EnumCase(path, location, value, configurationLockEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configuration lock
func (m ConfigurationLock) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigurationLockEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configuration lock based on context it is used
func (m ConfigurationLock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
