// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TagConfigStatus tag config status
//
// swagger:model tagConfigStatus
type TagConfigStatus struct {

	// app policy Id
	AppPolicyID string `json:"appPolicyId,omitempty"`

	// app policy name
	AppPolicyName string `json:"appPolicyName,omitempty"`

	// type of attestation policy
	AttestPolicyType *AttestPolicyType `json:"attestPolicyType,omitempty"`

	// type of cloud policy
	CloudPolicyType *PolicyType `json:"cloudPolicyType,omitempty"`

	// edgeview is allowed or not for devices in project
	EdgeviewAllow bool `json:"edgeviewAllow,omitempty"`

	// total count of devices enabled with edgeview session
	EdgeviewSessionCount int64 `json:"edgeviewSessionCount,omitempty"`

	// System defined universally unique Id of the resource group.
	// Read Only: true
	// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
	ID string `json:"id,omitempty"`

	// User defined name of the resource group, unique across the enterprise. Once resource group is created, name canâ€™t be changed.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name string `json:"name,omitempty"`

	// flag to indicate if this is the default network instance for the device
	NetworkDeviceDefault string `json:"networkDeviceDefault,omitempty"`

	// network policy Id
	NetworkPolicyID string `json:"networkPolicyId,omitempty"`

	// Resource group status
	// Read Only: true
	Status *TagStatus `json:"status,omitempty"`
}

// Validate validates this tag config status
func (m *TagConfigStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestPolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudPolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagConfigStatus) validateAttestPolicyType(formats strfmt.Registry) error {
	if swag.IsZero(m.AttestPolicyType) { // not required
		return nil
	}

	if m.AttestPolicyType != nil {
		if err := m.AttestPolicyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attestPolicyType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attestPolicyType")
			}
			return err
		}
	}

	return nil
}

func (m *TagConfigStatus) validateCloudPolicyType(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudPolicyType) { // not required
		return nil
	}

	if m.CloudPolicyType != nil {
		if err := m.CloudPolicyType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudPolicyType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudPolicyType")
			}
			return err
		}
	}

	return nil
}

func (m *TagConfigStatus) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}`); err != nil {
		return err
	}

	return nil
}

func (m *TagConfigStatus) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", m.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *TagConfigStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tag config status based on the context it is used
func (m *TagConfigStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttestPolicyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudPolicyType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagConfigStatus) contextValidateAttestPolicyType(ctx context.Context, formats strfmt.Registry) error {

	if m.AttestPolicyType != nil {
		if err := m.AttestPolicyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attestPolicyType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attestPolicyType")
			}
			return err
		}
	}

	return nil
}

func (m *TagConfigStatus) contextValidateCloudPolicyType(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudPolicyType != nil {
		if err := m.CloudPolicyType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudPolicyType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudPolicyType")
			}
			return err
		}
	}

	return nil
}

func (m *TagConfigStatus) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *TagConfigStatus) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TagConfigStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagConfigStatus) UnmarshalBinary(b []byte) error {
	var res TagConfigStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
