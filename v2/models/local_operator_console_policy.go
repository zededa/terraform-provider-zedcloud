// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocalOperatorConsolePolicy Local operator console policy body detail
//
// # Local operator console policy to enforce on all devices of the project
//
// swagger:model LocalOperatorConsolePolicy
type LocalOperatorConsolePolicy struct {

	// unique policy id
	// Read Only: true
	// Pattern: [0-9-a-z-]+
	ID string `json:"id,omitempty"`

	// Local operator console URL
	// Required: true
	LocURL *string `json:"locURL"`
}

// Validate validates this local operator console policy
func (m *LocalOperatorConsolePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalOperatorConsolePolicy) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[0-9-a-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *LocalOperatorConsolePolicy) validateLocURL(formats strfmt.Registry) error {

	if err := validate.Required("locURL", "body", m.LocURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this local operator console policy based on the context it is used
func (m *LocalOperatorConsolePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalOperatorConsolePolicy) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocalOperatorConsolePolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocalOperatorConsolePolicy) UnmarshalBinary(b []byte) error {
	var res LocalOperatorConsolePolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
