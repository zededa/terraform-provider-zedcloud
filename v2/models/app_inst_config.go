// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppInstConfig Edge application detailed configuration
//
// Edge application gets installed/uninstalled to/from edge node(s) and perform specific edge computing tasks. Lifecycle of Edge application (upgrade/restart) on Edge node can be managed and monitored by ZEDEDA Cloud controller through this detailed configuration.
// Example: {"name":"sample-app","originType":"ORIGIN_LOCAL","title":"Sample Edge Applications"}
//
// swagger:model AppInstConfig
type AppInstConfig struct {

	// User defined name of the edge app, unique across the enterprise. Once app name is created, name canâ€™t be changed
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	BundleID string `json:"bundleId,omitempty"`

	// current bundle version
	BundleVersion int64 `json:"bundleVersion,omitempty"`

	// user defined cpus for bundle
	Cpus int64 `json:"cpus,omitempty"`

	// user defined drives
	// Read Only: true
	Drives int64 `json:"drives,omitempty"`

	// application interfaces
	Interfaces []*AppInterface `json:"interfaces"`

	// App Instance logs
	Logs *AppInstanceLogs `json:"logs,omitempty"`

	// user defined manifest in JSON format
	ManifestJSON *VMManifest `json:"manifestJSON,omitempty"`

	// user defined memory for bundle
	Memory int64 `json:"memory,omitempty"`

	// User provided name part  for the auto deployed app
	NameAppPart string `json:"nameAppPart,omitempty"`

	// User provided name part  for the auto deployed app
	NameProjectPart string `json:"nameProjectPart,omitempty"`

	// app naming scheme
	NamingScheme *AppNamingSchemeV2 `json:"namingScheme,omitempty"`

	// user defined network options
	Networks int64 `json:"networks,omitempty"`

	// this flag denotes whether there is latest bundle available in the marketplace or not
	NewBundleVersionAvailable bool `json:"newBundleVersionAvailable,omitempty"`

	// origin of object
	OriginType *Origin `json:"originType,omitempty"`

	// origin and parent related details
	ParentDetail *ObjectParentDetail `json:"parentDetail,omitempty"`

	// Remote console flag
	RemoteConsole bool `json:"remoteConsole,omitempty"`

	// start delay is the time in seconds EVE should wait after boot before starting the application instance
	StartDelayInSeconds int64 `json:"startDelayInSeconds,omitempty"`

	// user defined storage for bundle
	Storage int64 `json:"storage,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// virtual machine info
	Vminfo *VM `json:"vminfo,omitempty"`
}

// Validate validates this app inst config
func (m *AppInstConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManifestJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamingScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVminfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstConfig) validateBundleID(formats strfmt.Registry) error {
	if swag.IsZero(m.BundleID) { // not required
		return nil
	}

	if err := validate.MinLength("bundleId", "body", m.BundleID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("bundleId", "body", m.BundleID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("bundleId", "body", m.BundleID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstConfig) validateInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Interfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Interfaces); i++ {
		if swag.IsZero(m.Interfaces[i]) { // not required
			continue
		}

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstConfig) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.Logs) { // not required
		return nil
	}

	if m.Logs != nil {
		if err := m.Logs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logs")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) validateManifestJSON(formats strfmt.Registry) error {
	if swag.IsZero(m.ManifestJSON) { // not required
		return nil
	}

	if m.ManifestJSON != nil {
		if err := m.ManifestJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manifestJSON")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manifestJSON")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) validateNamingScheme(formats strfmt.Registry) error {
	if swag.IsZero(m.NamingScheme) { // not required
		return nil
	}

	if m.NamingScheme != nil {
		if err := m.NamingScheme.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namingScheme")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namingScheme")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) validateOriginType(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginType) { // not required
		return nil
	}

	if m.OriginType != nil {
		if err := m.OriginType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) validateParentDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentDetail) { // not required
		return nil
	}

	if m.ParentDetail != nil {
		if err := m.ParentDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentDetail")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) validateVminfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Vminfo) { // not required
		return nil
	}

	if m.Vminfo != nil {
		if err := m.Vminfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vminfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vminfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app inst config based on the context it is used
func (m *AppInstConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDrives(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManifestJSON(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamingScheme(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVminfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstConfig) contextValidateDrives(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "drives", "body", int64(m.Drives)); err != nil {
		return err
	}

	return nil
}

func (m *AppInstConfig) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Interfaces); i++ {

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstConfig) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {

	if m.Logs != nil {
		if err := m.Logs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logs")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) contextValidateManifestJSON(ctx context.Context, formats strfmt.Registry) error {

	if m.ManifestJSON != nil {
		if err := m.ManifestJSON.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manifestJSON")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manifestJSON")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) contextValidateNamingScheme(ctx context.Context, formats strfmt.Registry) error {

	if m.NamingScheme != nil {
		if err := m.NamingScheme.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("namingScheme")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("namingScheme")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) contextValidateOriginType(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginType != nil {
		if err := m.OriginType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) contextValidateParentDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentDetail != nil {
		if err := m.ParentDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentDetail")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstConfig) contextValidateVminfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Vminfo != nil {
		if err := m.Vminfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vminfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vminfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstConfig) UnmarshalBinary(b []byte) error {
	var res AppInstConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
