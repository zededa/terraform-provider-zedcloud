// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureResourceAndServices Azure resource payload detail for cloud policy
//
// # Azure resource request paylod for cloud policy
//
// swagger:model AzureResourceAndServices
type AzureResourceAndServices struct {

	// dps service attached to cloud policy
	// Required: true
	DpsService *DPSServiceDetail `json:"dpsService"`

	// list of iothubs attached to cloud policy
	// Required: true
	IotHubService []*IotHubServiceDetail `json:"iotHubService"`

	// list of resource groups attached to cloud policy
	// Required: true
	ResourceGroup []*ResourceGroupDetail `json:"resourceGroup"`
}

// Validate validates this azure resource and services
func (m *AzureResourceAndServices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDpsService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIotHubService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureResourceAndServices) validateDpsService(formats strfmt.Registry) error {

	if err := validate.Required("dpsService", "body", m.DpsService); err != nil {
		return err
	}

	if m.DpsService != nil {
		if err := m.DpsService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dpsService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dpsService")
			}
			return err
		}
	}

	return nil
}

func (m *AzureResourceAndServices) validateIotHubService(formats strfmt.Registry) error {

	if err := validate.Required("iotHubService", "body", m.IotHubService); err != nil {
		return err
	}

	for i := 0; i < len(m.IotHubService); i++ {
		if swag.IsZero(m.IotHubService[i]) { // not required
			continue
		}

		if m.IotHubService[i] != nil {
			if err := m.IotHubService[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iotHubService" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iotHubService" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureResourceAndServices) validateResourceGroup(formats strfmt.Registry) error {

	if err := validate.Required("resourceGroup", "body", m.ResourceGroup); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceGroup); i++ {
		if swag.IsZero(m.ResourceGroup[i]) { // not required
			continue
		}

		if m.ResourceGroup[i] != nil {
			if err := m.ResourceGroup[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceGroup" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceGroup" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this azure resource and services based on the context it is used
func (m *AzureResourceAndServices) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDpsService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIotHubService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureResourceAndServices) contextValidateDpsService(ctx context.Context, formats strfmt.Registry) error {

	if m.DpsService != nil {
		if err := m.DpsService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dpsService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dpsService")
			}
			return err
		}
	}

	return nil
}

func (m *AzureResourceAndServices) contextValidateIotHubService(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IotHubService); i++ {

		if m.IotHubService[i] != nil {
			if err := m.IotHubService[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("iotHubService" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("iotHubService" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureResourceAndServices) contextValidateResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceGroup); i++ {

		if m.ResourceGroup[i] != nil {
			if err := m.ResourceGroup[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceGroup" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resourceGroup" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureResourceAndServices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureResourceAndServices) UnmarshalBinary(b []byte) error {
	var res AzureResourceAndServices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
