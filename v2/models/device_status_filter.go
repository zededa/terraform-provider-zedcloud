// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceStatusFilter device status filter
//
// swagger:model DeviceStatusFilter
type DeviceStatusFilter struct {

	// device name
	DeviceName string `json:"deviceName,omitempty"`

	// load
	Load *DeviceLoad `json:"load,omitempty"`

	// name pattern
	NamePattern string `json:"namePattern,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// project name pattern
	ProjectNamePattern string `json:"projectNamePattern,omitempty"`

	// run state
	RunState *RunState `json:"runState,omitempty"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`
}

// Validate validates this device status filter
func (m *DeviceStatusFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoad(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceStatusFilter) validateLoad(formats strfmt.Registry) error {
	if swag.IsZero(m.Load) { // not required
		return nil
	}

	if m.Load != nil {
		if err := m.Load.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("load")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("load")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusFilter) validateRunState(formats strfmt.Registry) error {
	if swag.IsZero(m.RunState) { // not required
		return nil
	}

	if m.RunState != nil {
		if err := m.RunState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runState")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device status filter based on the context it is used
func (m *DeviceStatusFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoad(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceStatusFilter) contextValidateLoad(ctx context.Context, formats strfmt.Registry) error {

	if m.Load != nil {
		if err := m.Load.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("load")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("load")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceStatusFilter) contextValidateRunState(ctx context.Context, formats strfmt.Registry) error {

	if m.RunState != nil {
		if err := m.RunState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runState")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceStatusFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceStatusFilter) UnmarshalBinary(b []byte) error {
	var res DeviceStatusFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
