// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceObjectUsageInfo DeviceObjectUsageInfo carries metadata of object usage on the device.
//
// # DeviceObjectUsageInfo provides the metadata of object usage on the device
//
// swagger:model DeviceObjectUsageInfo
type DeviceObjectUsageInfo struct {

	// Timestamp at which object was created
	// Required: true
	CreateTime interface{} `json:"createTime"`

	// Timestamp at which object refcount was last changed
	// Required: true
	LastRefCountChangeTime interface{} `json:"lastRefCountChangeTime"`

	// Object refcount
	// Required: true
	RefCount *int64 `json:"refCount"`
}

// Validate validates this device object usage info
func (m *DeviceObjectUsageInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRefCountChangeTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceObjectUsageInfo) validateCreateTime(formats strfmt.Registry) error {

	if m.CreateTime == nil {
		return errors.Required("createTime", "body", nil)
	}

	return nil
}

func (m *DeviceObjectUsageInfo) validateLastRefCountChangeTime(formats strfmt.Registry) error {

	if m.LastRefCountChangeTime == nil {
		return errors.Required("lastRefCountChangeTime", "body", nil)
	}

	return nil
}

func (m *DeviceObjectUsageInfo) validateRefCount(formats strfmt.Registry) error {

	if err := validate.Required("refCount", "body", m.RefCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this device object usage info based on context it is used
func (m *DeviceObjectUsageInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceObjectUsageInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceObjectUsageInfo) UnmarshalBinary(b []byte) error {
	var res DeviceObjectUsageInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
