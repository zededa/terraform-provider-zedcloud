// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FlowlogAction flowlog action
//
// swagger:model FlowlogAction
type FlowlogAction string

func NewFlowlogAction(value FlowlogAction) *FlowlogAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FlowlogAction.
func (m FlowlogAction) Pointer() *FlowlogAction {
	return &m
}

const (

	// FlowlogActionFLOWLOGACTIONUNSPECIFIED captures enum value "FLOW_LOG_ACTION_UNSPECIFIED"
	FlowlogActionFLOWLOGACTIONUNSPECIFIED FlowlogAction = "FLOW_LOG_ACTION_UNSPECIFIED"

	// FlowlogActionFLOWLOGACTIONDROP captures enum value "FLOW_LOG_ACTION_DROP"
	FlowlogActionFLOWLOGACTIONDROP FlowlogAction = "FLOW_LOG_ACTION_DROP"

	// FlowlogActionFLOWLOGACTIONACCEPT captures enum value "FLOW_LOG_ACTION_ACCEPT"
	FlowlogActionFLOWLOGACTIONACCEPT FlowlogAction = "FLOW_LOG_ACTION_ACCEPT"
)

// for schema
var flowlogActionEnum []interface{}

func init() {
	var res []FlowlogAction
	if err := json.Unmarshal([]byte(`["FLOW_LOG_ACTION_UNSPECIFIED","FLOW_LOG_ACTION_DROP","FLOW_LOG_ACTION_ACCEPT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flowlogActionEnum = append(flowlogActionEnum, v)
	}
}

func (m FlowlogAction) validateFlowlogActionEnum(path, location string, value FlowlogAction) error {
	if err := validate.EnumCase(path, location, value, flowlogActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this flowlog action
func (m FlowlogAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFlowlogActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this flowlog action based on context it is used
func (m FlowlogAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
