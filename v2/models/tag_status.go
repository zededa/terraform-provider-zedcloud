// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TagStatus Resource group status
//
// - TAG_STATUS_UNSPECIFIED: Tag Status : UNSPECIFIED
//   - TAG_STATUS_ARCHIVE: Tag Status : ARCHIVE
//   - TAG_STATUS_ACTIVE: Tag Status : ACTIVE
//   - TAG_STATUS_INACTIVE: Tag Status : INACTIVE
//
// swagger:model TagStatus
type TagStatus string

func NewTagStatus(value TagStatus) *TagStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TagStatus.
func (m TagStatus) Pointer() *TagStatus {
	return &m
}

const (

	// TagStatusTAGSTATUSUNSPECIFIED captures enum value "TAG_STATUS_UNSPECIFIED"
	TagStatusTAGSTATUSUNSPECIFIED TagStatus = "TAG_STATUS_UNSPECIFIED"

	// TagStatusTAGSTATUSARCHIVE captures enum value "TAG_STATUS_ARCHIVE"
	TagStatusTAGSTATUSARCHIVE TagStatus = "TAG_STATUS_ARCHIVE"

	// TagStatusTAGSTATUSACTIVE captures enum value "TAG_STATUS_ACTIVE"
	TagStatusTAGSTATUSACTIVE TagStatus = "TAG_STATUS_ACTIVE"

	// TagStatusTAGSTATUSINACTIVE captures enum value "TAG_STATUS_INACTIVE"
	TagStatusTAGSTATUSINACTIVE TagStatus = "TAG_STATUS_INACTIVE"

	// TagStatusTAGSTATUSINITIALIZED captures enum value "TAG_STATUS_INITIALIZED"
	TagStatusTAGSTATUSINITIALIZED TagStatus = "TAG_STATUS_INITIALIZED"

	// TagStatusTAGSTATUSFAILED captures enum value "TAG_STATUS_FAILED"
	TagStatusTAGSTATUSFAILED TagStatus = "TAG_STATUS_FAILED"
)

// for schema
var tagStatusEnum []interface{}

func init() {
	var res []TagStatus
	if err := json.Unmarshal([]byte(`["TAG_STATUS_UNSPECIFIED","TAG_STATUS_ARCHIVE","TAG_STATUS_ACTIVE","TAG_STATUS_INACTIVE","TAG_STATUS_INITIALIZED","TAG_STATUS_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tagStatusEnum = append(tagStatusEnum, v)
	}
}

func (m TagStatus) validateTagStatusEnum(path, location string, value TagStatus) error {
	if err := validate.EnumCase(path, location, value, tagStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tag status
func (m TagStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTagStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tag status based on context it is used
func (m TagStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
