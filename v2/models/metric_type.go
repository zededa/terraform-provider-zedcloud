// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MetricType metric type
//
// swagger:model MetricType
type MetricType string

func NewMetricType(value MetricType) *MetricType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated MetricType.
func (m MetricType) Pointer() *MetricType {
	return &m
}

const (

	// MetricTypeMETRICTYPEUNSPECIFIED captures enum value "METRIC_TYPE_UNSPECIFIED"
	MetricTypeMETRICTYPEUNSPECIFIED MetricType = "METRIC_TYPE_UNSPECIFIED"

	// MetricTypeMETRICTYPECPUTOTAL captures enum value "METRIC_TYPE_CPU_TOTAL"
	MetricTypeMETRICTYPECPUTOTAL MetricType = "METRIC_TYPE_CPU_TOTAL"

	// MetricTypeMETRICTYPECPUUSAGE captures enum value "METRIC_TYPE_CPU_USAGE"
	MetricTypeMETRICTYPECPUUSAGE MetricType = "METRIC_TYPE_CPU_USAGE"

	// MetricTypeMETRICTYPEMEMORYTOTAL captures enum value "METRIC_TYPE_MEMORY_TOTAL"
	MetricTypeMETRICTYPEMEMORYTOTAL MetricType = "METRIC_TYPE_MEMORY_TOTAL"

	// MetricTypeMETRICTYPEMEMORYUTILIZATION captures enum value "METRIC_TYPE_MEMORY_UTILIZATION"
	MetricTypeMETRICTYPEMEMORYUTILIZATION MetricType = "METRIC_TYPE_MEMORY_UTILIZATION"

	// MetricTypeMETRICTYPENETWORKTOTAL captures enum value "METRIC_TYPE_NETWORK_TOTAL"
	MetricTypeMETRICTYPENETWORKTOTAL MetricType = "METRIC_TYPE_NETWORK_TOTAL"

	// MetricTypeMETRICTYPENETWORKRATES captures enum value "METRIC_TYPE_NETWORK_RATES"
	MetricTypeMETRICTYPENETWORKRATES MetricType = "METRIC_TYPE_NETWORK_RATES"

	// MetricTypeMETRICTYPEEVENTSCOUNT captures enum value "METRIC_TYPE_EVENTS_COUNT"
	MetricTypeMETRICTYPEEVENTSCOUNT MetricType = "METRIC_TYPE_EVENTS_COUNT"

	// MetricTypeMETRICTYPESTORAGEUTILIZATION captures enum value "METRIC_TYPE_STORAGE_UTILIZATION"
	MetricTypeMETRICTYPESTORAGEUTILIZATION MetricType = "METRIC_TYPE_STORAGE_UTILIZATION"

	// MetricTypeMETRICTYPESTORAGEIOZPOOL captures enum value "METRIC_TYPE_STORAGE_IO_ZPOOL"
	MetricTypeMETRICTYPESTORAGEIOZPOOL MetricType = "METRIC_TYPE_STORAGE_IO_ZPOOL"

	// MetricTypeMETRICTYPESTORAGEIOZVOL captures enum value "METRIC_TYPE_STORAGE_IO_ZVOL"
	MetricTypeMETRICTYPESTORAGEIOZVOL MetricType = "METRIC_TYPE_STORAGE_IO_ZVOL"
)

// for schema
var metricTypeEnum []interface{}

func init() {
	var res []MetricType
	if err := json.Unmarshal([]byte(`["METRIC_TYPE_UNSPECIFIED","METRIC_TYPE_CPU_TOTAL","METRIC_TYPE_CPU_USAGE","METRIC_TYPE_MEMORY_TOTAL","METRIC_TYPE_MEMORY_UTILIZATION","METRIC_TYPE_NETWORK_TOTAL","METRIC_TYPE_NETWORK_RATES","METRIC_TYPE_EVENTS_COUNT","METRIC_TYPE_STORAGE_UTILIZATION","METRIC_TYPE_STORAGE_IO_ZPOOL","METRIC_TYPE_STORAGE_IO_ZVOL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricTypeEnum = append(metricTypeEnum, v)
	}
}

func (m MetricType) validateMetricTypeEnum(path, location string, value MetricType) error {
	if err := validate.EnumCase(path, location, value, metricTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this metric type
func (m MetricType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMetricTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this metric type based on context it is used
func (m MetricType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
