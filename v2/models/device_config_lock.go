// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeviceConfigLock device config lock
//
// swagger:model DeviceConfigLock
type DeviceConfigLock string

func NewDeviceConfigLock(value DeviceConfigLock) *DeviceConfigLock {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeviceConfigLock.
func (m DeviceConfigLock) Pointer() *DeviceConfigLock {
	return &m
}

const (

	// DeviceConfigLockDEVICECONFIGLOCKUNSPECIFIED captures enum value "DEVICE_CONFIG_LOCK_UNSPECIFIED"
	DeviceConfigLockDEVICECONFIGLOCKUNSPECIFIED DeviceConfigLock = "DEVICE_CONFIG_LOCK_UNSPECIFIED"

	// DeviceConfigLockDEVICECONFIGLOCKENABLED captures enum value "DEVICE_CONFIG_LOCK_ENABLED"
	DeviceConfigLockDEVICECONFIGLOCKENABLED DeviceConfigLock = "DEVICE_CONFIG_LOCK_ENABLED"

	// DeviceConfigLockDEVICECONFIGLOCKDISABLED captures enum value "DEVICE_CONFIG_LOCK_DISABLED"
	DeviceConfigLockDEVICECONFIGLOCKDISABLED DeviceConfigLock = "DEVICE_CONFIG_LOCK_DISABLED"
)

// for schema
var deviceConfigLockEnum []interface{}

func init() {
	var res []DeviceConfigLock
	if err := json.Unmarshal([]byte(`["DEVICE_CONFIG_LOCK_UNSPECIFIED","DEVICE_CONFIG_LOCK_ENABLED","DEVICE_CONFIG_LOCK_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceConfigLockEnum = append(deviceConfigLockEnum, v)
	}
}

func (m DeviceConfigLock) validateDeviceConfigLockEnum(path, location string, value DeviceConfigLock) error {
	if err := validate.EnumCase(path, location, value, deviceConfigLockEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this device config lock
func (m DeviceConfigLock) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeviceConfigLockEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this device config lock based on context it is used
func (m DeviceConfigLock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
