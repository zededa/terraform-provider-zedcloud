// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileDeploymentResourceDetailedStatus profile deployment resource detailed status
//
// swagger:model ProfileDeploymentResourceDetailedStatus
type ProfileDeploymentResourceDetailedStatus struct {

	// app profile id
	AppProfileInfo *AppProfileInfo `json:"appProfileInfo,omitempty"`

	// Detailed description of the deployment.
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// unique Id of the deployment.
	// Read Only: true
	// Pattern: [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
	ID string `json:"id,omitempty"`

	// User defined name of the deployment, unique across the enterprise. Once deployment is created, name canâ€™t be changed.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name string `json:"name,omitempty"`

	// list of status of objects created by deployment
	ObjectStatus []*ProfileDeploymentResourceObjectStatus `json:"objectStatus"`

	// project id
	ProjectID string `json:"projectId,omitempty"`

	// asset group info
	TargetAssetGroup *TargetAssetGroup `json:"targetAssetGroup,omitempty"`

	// User defined title of the deployment. Title can be changed at any time.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title string `json:"title,omitempty"`
}

// Validate validates this profile deployment resource detailed status
func (m *ProfileDeploymentResourceDetailedStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppProfileInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAssetGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) validateAppProfileInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AppProfileInfo) { // not required
		return nil
	}

	if m.AppProfileInfo != nil {
		if err := m.AppProfileInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appProfileInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appProfileInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 256); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}`); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", m.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) validateObjectStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectStatus); i++ {
		if swag.IsZero(m.ObjectStatus[i]) { // not required
			continue
		}

		if m.ObjectStatus[i] != nil {
			if err := m.ObjectStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) validateTargetAssetGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetAssetGroup) { // not required
		return nil
	}

	if m.TargetAssetGroup != nil {
		if err := m.TargetAssetGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetAssetGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetAssetGroup")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", m.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", m.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("title", "body", m.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this profile deployment resource detailed status based on the context it is used
func (m *ProfileDeploymentResourceDetailedStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppProfileInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetAssetGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) contextValidateAppProfileInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AppProfileInfo != nil {

		if swag.IsZero(m.AppProfileInfo) { // not required
			return nil
		}

		if err := m.AppProfileInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appProfileInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appProfileInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) contextValidateObjectStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ObjectStatus); i++ {

		if m.ObjectStatus[i] != nil {

			if swag.IsZero(m.ObjectStatus[i]) { // not required
				return nil
			}

			if err := m.ObjectStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("objectStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("objectStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProfileDeploymentResourceDetailedStatus) contextValidateTargetAssetGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetAssetGroup != nil {

		if swag.IsZero(m.TargetAssetGroup) { // not required
			return nil
		}

		if err := m.TargetAssetGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetAssetGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetAssetGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileDeploymentResourceDetailedStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileDeploymentResourceDetailedStatus) UnmarshalBinary(b []byte) error {
	var res ProfileDeploymentResourceDetailedStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
