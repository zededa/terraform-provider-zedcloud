// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyType type of policy.
//
// swagger:model PolicyType
type PolicyType string

func NewPolicyType(value PolicyType) *PolicyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PolicyType.
func (m PolicyType) Pointer() *PolicyType {
	return &m
}

const (

	// PolicyTypePOLICYTYPEUNSPECIFIED captures enum value "POLICY_TYPE_UNSPECIFIED"
	PolicyTypePOLICYTYPEUNSPECIFIED PolicyType = "POLICY_TYPE_UNSPECIFIED"

	// PolicyTypePOLICYTYPEAPP captures enum value "POLICY_TYPE_APP"
	PolicyTypePOLICYTYPEAPP PolicyType = "POLICY_TYPE_APP"

	// PolicyTypePOLICYTYPEAZURE captures enum value "POLICY_TYPE_AZURE"
	PolicyTypePOLICYTYPEAZURE PolicyType = "POLICY_TYPE_AZURE"

	// PolicyTypePOLICYTYPEAWS captures enum value "POLICY_TYPE_AWS"
	PolicyTypePOLICYTYPEAWS PolicyType = "POLICY_TYPE_AWS"

	// PolicyTypePOLICYTYPEGCP captures enum value "POLICY_TYPE_GCP"
	PolicyTypePOLICYTYPEGCP PolicyType = "POLICY_TYPE_GCP"

	// PolicyTypePOLICYTYPEMODULE captures enum value "POLICY_TYPE_MODULE"
	PolicyTypePOLICYTYPEMODULE PolicyType = "POLICY_TYPE_MODULE"

	// PolicyTypePOLICYTYPEATTESTATION captures enum value "POLICY_TYPE_ATTESTATION"
	PolicyTypePOLICYTYPEATTESTATION PolicyType = "POLICY_TYPE_ATTESTATION"

	// PolicyTypePOLICYTYPENETWORK captures enum value "POLICY_TYPE_NETWORK"
	PolicyTypePOLICYTYPENETWORK PolicyType = "POLICY_TYPE_NETWORK"

	// PolicyTypePOLICYTYPECLUSTER captures enum value "POLICY_TYPE_CLUSTER"
	PolicyTypePOLICYTYPECLUSTER PolicyType = "POLICY_TYPE_CLUSTER"

	// PolicyTypePOLICYTYPEEDGEVIEW captures enum value "POLICY_TYPE_EDGEVIEW"
	PolicyTypePOLICYTYPEEDGEVIEW PolicyType = "POLICY_TYPE_EDGEVIEW"
)

// for schema
var policyTypeEnum []interface{}

func init() {
	var res []PolicyType
	if err := json.Unmarshal([]byte(`["POLICY_TYPE_UNSPECIFIED","POLICY_TYPE_APP","POLICY_TYPE_AZURE","POLICY_TYPE_AWS","POLICY_TYPE_GCP","POLICY_TYPE_MODULE","POLICY_TYPE_ATTESTATION","POLICY_TYPE_NETWORK","POLICY_TYPE_CLUSTER","POLICY_TYPE_EDGEVIEW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyTypeEnum = append(policyTypeEnum, v)
	}
}

func (m PolicyType) validatePolicyTypeEnum(path, location string, value PolicyType) error {
	if err := validate.EnumCase(path, location, value, policyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy type
func (m PolicyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy type based on context it is used
func (m PolicyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
