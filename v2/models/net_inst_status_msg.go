// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetInstStatusMsg Network instance detailed status
//
// Network instance provides Edge applications a variety of connectivity choices for all types of networks. This enables logical secure connectivity between Edge applications within a single Edge node and within a logical group of Edge nodes. This provides detailed status of a Network instance.
// Example: {"id":"d85a545f-6510-4327-b03d-c02eef119e99","name":"sample-app"}
//
// swagger:model NetInstStatusMsg
type NetInstStatusMsg struct {

	// assigned adapters
	AssignedAdapters []*IoBundleStatus `json:"assignedAdapters"`

	// bridge IP addr
	BridgeIPAddr string `json:"bridgeIPAddr,omitempty"`

	// bridge name
	BridgeName string `json:"bridgeName,omitempty"`

	// bridge num
	BridgeNum int64 `json:"bridgeNum,omitempty"`

	// System defined universally unique clusterInstance ID, unique across the enterprise.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ClusterID string `json:"clusterID,omitempty"`

	// device on which this network is running
	DeviceID string `json:"deviceId,omitempty"`

	// err info
	ErrInfo []*DeviceError `json:"errInfo"`

	// System defined universally unique Id of the network instance
	// Read Only: true
	// Pattern: [0-9A-Za-z-]+
	ID string `json:"id,omitempty"`

	// ip mappings
	IPMappings []*IPAssignment `json:"ipMappings"`

	// ipv4 eid
	IPV4Eid bool `json:"ipv4Eid,omitempty"`

	// kind
	Kind *NetworkInstanceKind `json:"kind,omitempty"`

	// User defined name of the network instance, unique across the enterprise. Once object is created, name canâ€™t be changed
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name string `json:"name,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// raw status
	RawStatus string `json:"rawStatus,omitempty"`

	// run state
	RunState *RunState `json:"runState,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// up time stamp
	// Format: date-time
	UpTimeStamp strfmt.DateTime `json:"upTimeStamp,omitempty"`

	// uplink intf
	UplinkIntf string `json:"uplinkIntf,omitempty"`

	// vifs
	Vifs []*VifInfo `json:"vifs"`
}

// Validate validates this net inst status msg
func (m *NetInstStatusMsg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignedAdapters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPMappings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVifs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetInstStatusMsg) validateAssignedAdapters(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedAdapters) { // not required
		return nil
	}

	for i := 0; i < len(m.AssignedAdapters); i++ {
		if swag.IsZero(m.AssignedAdapters[i]) { // not required
			continue
		}

		if m.AssignedAdapters[i] != nil {
			if err := m.AssignedAdapters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignedAdapters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignedAdapters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetInstStatusMsg) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.MinLength("clusterID", "body", m.ClusterID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterID", "body", m.ClusterID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("clusterID", "body", m.ClusterID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *NetInstStatusMsg) validateErrInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrInfo); i++ {
		if swag.IsZero(m.ErrInfo[i]) { // not required
			continue
		}

		if m.ErrInfo[i] != nil {
			if err := m.ErrInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetInstStatusMsg) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *NetInstStatusMsg) validateIPMappings(formats strfmt.Registry) error {
	if swag.IsZero(m.IPMappings) { // not required
		return nil
	}

	for i := 0; i < len(m.IPMappings); i++ {
		if swag.IsZero(m.IPMappings[i]) { // not required
			continue
		}

		if m.IPMappings[i] != nil {
			if err := m.IPMappings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipMappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetInstStatusMsg) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	if m.Kind != nil {
		if err := m.Kind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kind")
			}
			return err
		}
	}

	return nil
}

func (m *NetInstStatusMsg) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", m.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *NetInstStatusMsg) validateRunState(formats strfmt.Registry) error {
	if swag.IsZero(m.RunState) { // not required
		return nil
	}

	if m.RunState != nil {
		if err := m.RunState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runState")
			}
			return err
		}
	}

	return nil
}

func (m *NetInstStatusMsg) validateUpTimeStamp(formats strfmt.Registry) error {
	if swag.IsZero(m.UpTimeStamp) { // not required
		return nil
	}

	if err := validate.FormatOf("upTimeStamp", "body", "date-time", m.UpTimeStamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NetInstStatusMsg) validateVifs(formats strfmt.Registry) error {
	if swag.IsZero(m.Vifs) { // not required
		return nil
	}

	for i := 0; i < len(m.Vifs); i++ {
		if swag.IsZero(m.Vifs[i]) { // not required
			continue
		}

		if m.Vifs[i] != nil {
			if err := m.Vifs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vifs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vifs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this net inst status msg based on the context it is used
func (m *NetInstStatusMsg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignedAdapters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPMappings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVifs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetInstStatusMsg) contextValidateAssignedAdapters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignedAdapters); i++ {

		if m.AssignedAdapters[i] != nil {
			if err := m.AssignedAdapters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignedAdapters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignedAdapters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetInstStatusMsg) contextValidateErrInfo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ErrInfo); i++ {

		if m.ErrInfo[i] != nil {
			if err := m.ErrInfo[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errInfo" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetInstStatusMsg) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *NetInstStatusMsg) contextValidateIPMappings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IPMappings); i++ {

		if m.IPMappings[i] != nil {
			if err := m.IPMappings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipMappings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ipMappings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NetInstStatusMsg) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	if m.Kind != nil {
		if err := m.Kind.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kind")
			}
			return err
		}
	}

	return nil
}

func (m *NetInstStatusMsg) contextValidateRunState(ctx context.Context, formats strfmt.Registry) error {

	if m.RunState != nil {
		if err := m.RunState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runState")
			}
			return err
		}
	}

	return nil
}

func (m *NetInstStatusMsg) contextValidateVifs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Vifs); i++ {

		if m.Vifs[i] != nil {
			if err := m.Vifs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vifs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vifs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetInstStatusMsg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetInstStatusMsg) UnmarshalBinary(b []byte) error {
	var res NetInstStatusMsg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
