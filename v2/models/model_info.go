// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelInfo Model details
//
// # Detailed model information including id, name
//
// swagger:model ModelInfo
type ModelInfo struct {

	// system generated unique id for a brand
	// Read Only: true
	// Pattern: [0-9A-Za-z-]+
	BrandID string `json:"brandId,omitempty"`

	// brand name
	BrandName string `json:"brandName,omitempty"`

	// system generated unique id for a model
	// Read Only: true
	// Pattern: [0-9A-Za-z-]+
	ModelID string `json:"modelId,omitempty"`

	// model name
	ModelName string `json:"modelName,omitempty"`
}

// Validate validates this model info
func (m *ModelInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrandID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelInfo) validateBrandID(formats strfmt.Registry) error {
	if swag.IsZero(m.BrandID) { // not required
		return nil
	}

	if err := validate.Pattern("brandId", "body", m.BrandID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *ModelInfo) validateModelID(formats strfmt.Registry) error {
	if swag.IsZero(m.ModelID) { // not required
		return nil
	}

	if err := validate.Pattern("modelId", "body", m.ModelID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this model info based on the context it is used
func (m *ModelInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBrandID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModelID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelInfo) contextValidateBrandID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "brandId", "body", string(m.BrandID)); err != nil {
		return err
	}

	return nil
}

func (m *ModelInfo) contextValidateModelID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "modelId", "body", string(m.ModelID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelInfo) UnmarshalBinary(b []byte) error {
	var res ModelInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
