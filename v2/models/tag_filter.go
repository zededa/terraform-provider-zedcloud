// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TagFilter tag filter
//
// swagger:model TagFilter
type TagFilter struct {

	// Resource group name pattern to be matched.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9_.-]+
	NamePattern string `json:"namePattern,omitempty"`

	// Resource group type to ne matched.
	Type *TagType `json:"type,omitempty"`
}

// Validate validates this tag filter
func (m *TagFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNamePattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagFilter) validateNamePattern(formats strfmt.Registry) error {
	if swag.IsZero(m.NamePattern) { // not required
		return nil
	}

	if err := validate.MinLength("namePattern", "body", m.NamePattern, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("namePattern", "body", m.NamePattern, 256); err != nil {
		return err
	}

	if err := validate.Pattern("namePattern", "body", m.NamePattern, `[a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *TagFilter) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tag filter based on the context it is used
func (m *TagFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagFilter) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TagFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagFilter) UnmarshalBinary(b []byte) error {
	var res TagFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
