// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DockerRuntimeVersion docker runtime version
//
// swagger:model DockerRuntimeVersion
type DockerRuntimeVersion string

func NewDockerRuntimeVersion(value DockerRuntimeVersion) *DockerRuntimeVersion {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DockerRuntimeVersion.
func (m DockerRuntimeVersion) Pointer() *DockerRuntimeVersion {
	return &m
}

const (

	// DockerRuntimeVersionRuntimeVersionUnknown captures enum value "RuntimeVersion_Unknown"
	DockerRuntimeVersionRuntimeVersionUnknown DockerRuntimeVersion = "RuntimeVersion_Unknown"

	// DockerRuntimeVersionRuntimeVersionV1 captures enum value "RuntimeVersion_V1"
	DockerRuntimeVersionRuntimeVersionV1 DockerRuntimeVersion = "RuntimeVersion_V1"
)

// for schema
var dockerRuntimeVersionEnum []interface{}

func init() {
	var res []DockerRuntimeVersion
	if err := json.Unmarshal([]byte(`["RuntimeVersion_Unknown","RuntimeVersion_V1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dockerRuntimeVersionEnum = append(dockerRuntimeVersionEnum, v)
	}
}

func (m DockerRuntimeVersion) validateDockerRuntimeVersionEnum(path, location string, value DockerRuntimeVersion) error {
	if err := validate.EnumCase(path, location, value, dockerRuntimeVersionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this docker runtime version
func (m DockerRuntimeVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDockerRuntimeVersionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this docker runtime version based on context it is used
func (m DockerRuntimeVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
