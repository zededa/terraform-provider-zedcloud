// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceConfig Device Configuration payload detail
//
// # Device Configuration request payload holds the device properties
//
// swagger:model DeviceConfig
type DeviceConfig struct {

	// administrative state of device
	AdminState *AdminState `json:"adminState,omitempty"`

	// Device asset ID
	AssetID string `json:"assetId,omitempty"`

	// base images
	BaseImage []*BaseOSImage `json:"baseImage"`

	// Force upgrade base OS
	BaseOsForceUpgrade bool `json:"baseOsForceUpgrade,omitempty"`

	// device baseos retry counter
	BaseOsRetryCounter int64 `json:"baseOsRetryCounter,omitempty"`

	// device baseos retry time
	BaseOsRetryTime string `json:"baseOsRetryTime,omitempty"`

	// Client IP
	ClientIP string `json:"clientIp,omitempty"`

	// System defined universally unique clusterInstance ID, unique across the enterprise.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ClusterID string `json:"clusterID,omitempty"`

	// The following two fields are related to the edge node cluster configuration
	//
	// Cluster Interface
	ClusterInterface string `json:"clusterInterface,omitempty"`

	// ED configurations
	ConfigItem []*EDConfigItem `json:"configItem"`

	// device configuration lock setting
	ConfigLock *DeviceConfigLock `json:"configLock,omitempty"`

	// CPU (configured values)
	CPU int64 `json:"cpu,omitempty"`

	// debug knob details for the device
	DebugKnob *DebugKnobDetail `json:"debugKnob,omitempty"`

	// default network instance details
	DefaultNetInst *NetInstConfig `json:"defaultNetInst,omitempty"`

	// user defined tag for the device, which is used while deploying policies.
	DeploymentTag string `json:"deploymentTag,omitempty"`

	// deprecated field
	Deprecated string `json:"deprecated,omitempty"`

	// user specified description
	Description string `json:"description,omitempty"`

	// User specified geo location
	DevLocation *GeoLocation `json:"devLocation,omitempty"`

	// device Lisp
	Dlisp *DeviceLisp `json:"dlisp,omitempty"`

	// Edge Node Cluster Configuration
	EdgeNodeCluster *EdgeNodeClusterConfig `json:"edgeNodeCluster,omitempty"`

	// edge sync config
	EdgeSyncConfig *EdgeSyncConfig `json:"edgeSyncConfig,omitempty"`

	// To support edge view policy in deployments, adding a new column in device table
	//
	// Allow device to enable Edgeview
	EdgeviewAllow bool `json:"edgeviewAllow,omitempty"`

	// edgeview configuration for device
	Edgeviewconfig *EdgeviewCfg `json:"edgeviewconfig,omitempty"`

	// indicates whether a soft serial should be generated; it will work ONLY when device is created
	GenerateSoftSerial bool `json:"generateSoftSerial,omitempty"`

	// system generated unique id for a device
	// Read Only: true
	// Pattern: [0-9A-Za-z-]+
	ID string `json:"id,omitempty"`

	// Device identity
	// Format: byte
	Identity strfmt.Base64 `json:"identity,omitempty"`

	// System Interface list
	Interfaces []*SysInterface `json:"interfaces"`

	// will be deprecated 73
	//
	// local operator console url
	LocalOperatorConsoleURL string `json:"localOperatorConsoleURL,omitempty"`

	// Device location: deprecated
	Location string `json:"location,omitempty"`

	// Device memory in MBs
	Memory int64 `json:"memory,omitempty"`

	// Model specific info
	Model *ModelInfo `json:"model,omitempty"`

	// device model
	// Required: true
	ModelID *string `json:"modelId"`

	// user specified device name
	// Required: true
	Name *string `json:"name"`

	// Object key
	Obkey string `json:"obkey,omitempty"`

	// Device level certificates used while onboarding
	Onboarding *DeviceCerts `json:"onboarding,omitempty"`

	// prepare poweroff counter
	PreparePowerOffCounter int64 `json:"preparePowerOffCounter,omitempty"`

	// prepare poweroff time
	PreparePowerOffTime string `json:"preparePowerOffTime,omitempty"`

	// Project specific info
	Project *ProjectInfo `json:"project,omitempty"`

	// project name
	// Required: true
	ProjectID *string `json:"projectId"`

	// devicereset counter
	ResetCounter int64 `json:"resetCounter,omitempty"`

	// device reset time
	ResetTime string `json:"resetTime,omitempty"`

	// Object revision details
	Revision *ObjectRevision `json:"revision,omitempty"`

	// Device serial number
	Serialno string `json:"serialno,omitempty"`

	// Site captured pictures
	SitePictures []string `json:"sitePictures"`

	// Device storage in GBs
	Storage int64 `json:"storage,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// Threads
	Thread int64 `json:"thread,omitempty"`

	// user specified title
	// Required: true
	Title *string `json:"title"`

	// Single use token
	Token string `json:"token,omitempty"`

	// device model arch type
	Utype *ModelArchType `json:"utype,omitempty"`

	// A list of VLAN sub-interfaces configured for EVE management traffic and for local network instances
	VlanAdapters []*VlanAdapter `json:"vlanAdapters"`
}

// Validate validates this device config
func (m *DeviceConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigItem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebugKnob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultNetInst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDlisp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeNodeCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeSyncConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeviewconfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnboarding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUtype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanAdapters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceConfig) validateAdminState(formats strfmt.Registry) error {
	if swag.IsZero(m.AdminState) { // not required
		return nil
	}

	if m.AdminState != nil {
		if err := m.AdminState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminState")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateBaseImage(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseImage) { // not required
		return nil
	}

	for i := 0; i < len(m.BaseImage); i++ {
		if swag.IsZero(m.BaseImage[i]) { // not required
			continue
		}

		if m.BaseImage[i] != nil {
			if err := m.BaseImage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("baseImage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("baseImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfig) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.MinLength("clusterID", "body", m.ClusterID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterID", "body", m.ClusterID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("clusterID", "body", m.ClusterID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfig) validateConfigItem(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigItem) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigItem); i++ {
		if swag.IsZero(m.ConfigItem[i]) { // not required
			continue
		}

		if m.ConfigItem[i] != nil {
			if err := m.ConfigItem[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configItem" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfig) validateConfigLock(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigLock) { // not required
		return nil
	}

	if m.ConfigLock != nil {
		if err := m.ConfigLock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configLock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configLock")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateDebugKnob(formats strfmt.Registry) error {
	if swag.IsZero(m.DebugKnob) { // not required
		return nil
	}

	if m.DebugKnob != nil {
		if err := m.DebugKnob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debugKnob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("debugKnob")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateDefaultNetInst(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultNetInst) { // not required
		return nil
	}

	if m.DefaultNetInst != nil {
		if err := m.DefaultNetInst.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultNetInst")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultNetInst")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateDevLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.DevLocation) { // not required
		return nil
	}

	if m.DevLocation != nil {
		if err := m.DevLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("devLocation")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateDlisp(formats strfmt.Registry) error {
	if swag.IsZero(m.Dlisp) { // not required
		return nil
	}

	if m.Dlisp != nil {
		if err := m.Dlisp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dlisp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dlisp")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateEdgeNodeCluster(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeNodeCluster) { // not required
		return nil
	}

	if m.EdgeNodeCluster != nil {
		if err := m.EdgeNodeCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeNodeCluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeNodeCluster")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateEdgeSyncConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeSyncConfig) { // not required
		return nil
	}

	if m.EdgeSyncConfig != nil {
		if err := m.EdgeSyncConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeSyncConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeSyncConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateEdgeviewconfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Edgeviewconfig) { // not required
		return nil
	}

	if m.Edgeviewconfig != nil {
		if err := m.Edgeviewconfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeviewconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeviewconfig")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfig) validateInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Interfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Interfaces); i++ {
		if swag.IsZero(m.Interfaces[i]) { // not required
			continue
		}

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfig) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(m.Model) { // not required
		return nil
	}

	if m.Model != nil {
		if err := m.Model.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateModelID(formats strfmt.Registry) error {

	if err := validate.Required("modelId", "body", m.ModelID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfig) validateOnboarding(formats strfmt.Registry) error {
	if swag.IsZero(m.Onboarding) { // not required
		return nil
	}

	if m.Onboarding != nil {
		if err := m.Onboarding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onboarding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onboarding")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateProject(formats strfmt.Registry) error {
	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfig) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfig) validateUtype(formats strfmt.Registry) error {
	if swag.IsZero(m.Utype) { // not required
		return nil
	}

	if m.Utype != nil {
		if err := m.Utype.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("utype")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("utype")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) validateVlanAdapters(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanAdapters) { // not required
		return nil
	}

	for i := 0; i < len(m.VlanAdapters); i++ {
		if swag.IsZero(m.VlanAdapters[i]) { // not required
			continue
		}

		if m.VlanAdapters[i] != nil {
			if err := m.VlanAdapters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlanAdapters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlanAdapters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this device config based on the context it is used
func (m *DeviceConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdminState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBaseImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfigLock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDebugKnob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultNetInst(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDlisp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeNodeCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeSyncConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEdgeviewconfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateModel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnboarding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUtype(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanAdapters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceConfig) contextValidateAdminState(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminState != nil {
		if err := m.AdminState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminState")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateBaseImage(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BaseImage); i++ {

		if m.BaseImage[i] != nil {
			if err := m.BaseImage[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("baseImage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("baseImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfig) contextValidateConfigItem(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConfigItem); i++ {

		if m.ConfigItem[i] != nil {
			if err := m.ConfigItem[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configItem" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("configItem" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfig) contextValidateConfigLock(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigLock != nil {
		if err := m.ConfigLock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configLock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configLock")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateDebugKnob(ctx context.Context, formats strfmt.Registry) error {

	if m.DebugKnob != nil {
		if err := m.DebugKnob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debugKnob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("debugKnob")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateDefaultNetInst(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultNetInst != nil {
		if err := m.DefaultNetInst.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultNetInst")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultNetInst")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateDevLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.DevLocation != nil {
		if err := m.DevLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("devLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("devLocation")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateDlisp(ctx context.Context, formats strfmt.Registry) error {

	if m.Dlisp != nil {
		if err := m.Dlisp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dlisp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dlisp")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateEdgeNodeCluster(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeNodeCluster != nil {
		if err := m.EdgeNodeCluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeNodeCluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeNodeCluster")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateEdgeSyncConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EdgeSyncConfig != nil {
		if err := m.EdgeSyncConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeSyncConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeSyncConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateEdgeviewconfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Edgeviewconfig != nil {
		if err := m.Edgeviewconfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("edgeviewconfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("edgeviewconfig")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfig) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Interfaces); i++ {

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfig) contextValidateModel(ctx context.Context, formats strfmt.Registry) error {

	if m.Model != nil {
		if err := m.Model.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("model")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("model")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateOnboarding(ctx context.Context, formats strfmt.Registry) error {

	if m.Onboarding != nil {
		if err := m.Onboarding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onboarding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onboarding")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateProject(ctx context.Context, formats strfmt.Registry) error {

	if m.Project != nil {
		if err := m.Project.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {
		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateUtype(ctx context.Context, formats strfmt.Registry) error {

	if m.Utype != nil {
		if err := m.Utype.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("utype")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("utype")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfig) contextValidateVlanAdapters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VlanAdapters); i++ {

		if m.VlanAdapters[i] != nil {
			if err := m.VlanAdapters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vlanAdapters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vlanAdapters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceConfig) UnmarshalBinary(b []byte) error {
	var res DeviceConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
