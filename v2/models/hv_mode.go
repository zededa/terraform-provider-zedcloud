// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HvMode For now we need to tell the device which virtualization mode
// to use. Later we might use a single one for all VMs (on any particular
// ISA). If we end up keeping this we should make the names be less
// tied to a particular hypervisor.
//
// swagger:model hvMode
type HvMode string

func NewHvMode(value HvMode) *HvMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HvMode.
func (m HvMode) Pointer() *HvMode {
	return &m
}

const (

	// HvModeHVPV captures enum value "HV_PV"
	HvModeHVPV HvMode = "HV_PV"

	// HvModeHVHVM captures enum value "HV_HVM"
	HvModeHVHVM HvMode = "HV_HVM"

	// HvModeHVFML captures enum value "HV_FML"
	HvModeHVFML HvMode = "HV_FML"

	// HvModeHVNOHYPER captures enum value "HV_NOHYPER"
	HvModeHVNOHYPER HvMode = "HV_NOHYPER"

	// HvModeHVLEGACY captures enum value "HV_LEGACY"
	HvModeHVLEGACY HvMode = "HV_LEGACY"
)

// for schema
var hvModeEnum []interface{}

func init() {
	var res []HvMode
	if err := json.Unmarshal([]byte(`["HV_PV","HV_HVM","HV_FML","HV_NOHYPER","HV_LEGACY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hvModeEnum = append(hvModeEnum, v)
	}
}

func (m HvMode) validateHvModeEnum(path, location string, value HvMode) error {
	if err := validate.EnumCase(path, location, value, hvModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hv mode
func (m HvMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHvModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hv mode based on context it is used
func (m HvMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
