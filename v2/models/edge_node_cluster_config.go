// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EdgeNodeClusterConfig edge node cluster config
//
// swagger:model EdgeNodeClusterConfig
type EdgeNodeClusterConfig struct {

	// A cluster prefix
	ClusterPrefix string `json:"clusterPrefix,omitempty"`

	// System defined universally unique Id of the cluster
	// Read Only: true
	// Pattern: [0-9A-Za-z-]+
	ID string `json:"id,omitempty"`

	// User defined name of the cluster, unique across the enterprise. Once cluster is created, name canâ€™t be changed
	Name string `json:"name,omitempty"`

	// Foreign key to the project
	ProjectID string `json:"projectId,omitempty"`

	// Seed node id
	SeedNodeID string `json:"seedNodeId,omitempty"`

	// Seed node ip
	SeedNodeIP string `json:"seedNodeIp,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// Cluster token
	Token string `json:"token,omitempty"`
}

// Validate validates this edge node cluster config
func (m *EdgeNodeClusterConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeNodeClusterConfig) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this edge node cluster config based on the context it is used
func (m *EdgeNodeClusterConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EdgeNodeClusterConfig) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EdgeNodeClusterConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EdgeNodeClusterConfig) UnmarshalBinary(b []byte) error {
	var res EdgeNodeClusterConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
