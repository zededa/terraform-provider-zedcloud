// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ZserviceAssetGroupAssetType Enum for AssetType
//
// swagger:model zservice_asset_groupAssetType
type ZserviceAssetGroupAssetType string

func NewZserviceAssetGroupAssetType(value ZserviceAssetGroupAssetType) *ZserviceAssetGroupAssetType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ZserviceAssetGroupAssetType.
func (m ZserviceAssetGroupAssetType) Pointer() *ZserviceAssetGroupAssetType {
	return &m
}

const (

	// ZserviceAssetGroupAssetTypeEVE captures enum value "EVE"
	ZserviceAssetGroupAssetTypeEVE ZserviceAssetGroupAssetType = "EVE"

	// ZserviceAssetGroupAssetTypeK8S captures enum value "K8S"
	ZserviceAssetGroupAssetTypeK8S ZserviceAssetGroupAssetType = "K8S"

	// ZserviceAssetGroupAssetTypeK3S captures enum value "K3S"
	ZserviceAssetGroupAssetTypeK3S ZserviceAssetGroupAssetType = "K3S"
)

// for schema
var zserviceAssetGroupAssetTypeEnum []interface{}

func init() {
	var res []ZserviceAssetGroupAssetType
	if err := json.Unmarshal([]byte(`["EVE","K8S","K3S"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		zserviceAssetGroupAssetTypeEnum = append(zserviceAssetGroupAssetTypeEnum, v)
	}
}

func (m ZserviceAssetGroupAssetType) validateZserviceAssetGroupAssetTypeEnum(path, location string, value ZserviceAssetGroupAssetType) error {
	if err := validate.EnumCase(path, location, value, zserviceAssetGroupAssetTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this zservice asset group asset type
func (m ZserviceAssetGroupAssetType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateZserviceAssetGroupAssetTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this zservice asset group asset type based on context it is used
func (m ZserviceAssetGroupAssetType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
