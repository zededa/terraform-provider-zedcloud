// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PhysicalStorageTypeInfo physical storage type info
//
// swagger:model PhysicalStorageTypeInfo
type PhysicalStorageTypeInfo string

func NewPhysicalStorageTypeInfo(value PhysicalStorageTypeInfo) *PhysicalStorageTypeInfo {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PhysicalStorageTypeInfo.
func (m PhysicalStorageTypeInfo) Pointer() *PhysicalStorageTypeInfo {
	return &m
}

const (

	// PhysicalStorageTypeInfoPHYSICALSTORAGETYPEINFOUNSPECIFIED captures enum value "PHYSICAL_STORAGE_TYPE_INFO_UNSPECIFIED"
	PhysicalStorageTypeInfoPHYSICALSTORAGETYPEINFOUNSPECIFIED PhysicalStorageTypeInfo = "PHYSICAL_STORAGE_TYPE_INFO_UNSPECIFIED"

	// PhysicalStorageTypeInfoPHYSICALSTORAGETYPEINFOEXT4 captures enum value "PHYSICAL_STORAGE_TYPE_INFO_EXT4"
	PhysicalStorageTypeInfoPHYSICALSTORAGETYPEINFOEXT4 PhysicalStorageTypeInfo = "PHYSICAL_STORAGE_TYPE_INFO_EXT4"

	// PhysicalStorageTypeInfoPHYSICALSTORAGETYPEINFOZFS captures enum value "PHYSICAL_STORAGE_TYPE_INFO_ZFS"
	PhysicalStorageTypeInfoPHYSICALSTORAGETYPEINFOZFS PhysicalStorageTypeInfo = "PHYSICAL_STORAGE_TYPE_INFO_ZFS"
)

// for schema
var physicalStorageTypeInfoEnum []interface{}

func init() {
	var res []PhysicalStorageTypeInfo
	if err := json.Unmarshal([]byte(`["PHYSICAL_STORAGE_TYPE_INFO_UNSPECIFIED","PHYSICAL_STORAGE_TYPE_INFO_EXT4","PHYSICAL_STORAGE_TYPE_INFO_ZFS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		physicalStorageTypeInfoEnum = append(physicalStorageTypeInfoEnum, v)
	}
}

func (m PhysicalStorageTypeInfo) validatePhysicalStorageTypeInfoEnum(path, location string, value PhysicalStorageTypeInfo) error {
	if err := validate.EnumCase(path, location, value, physicalStorageTypeInfoEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this physical storage type info
func (m PhysicalStorageTypeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePhysicalStorageTypeInfoEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this physical storage type info based on context it is used
func (m PhysicalStorageTypeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
