// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VCEStatusDetail v c e status detail
//
// swagger:model VCEStatusDetail
type VCEStatusDetail struct {

	// activation key
	ActivationKey string `json:"activationKey,omitempty"`

	// activation key expires
	// Format: date-time
	ActivationKeyExpires strfmt.DateTime `json:"activationKeyExpires,omitempty"`

	// activation state
	ActivationState string `json:"activationState,omitempty"`

	// activation time
	// Format: date-time
	ActivationTime strfmt.DateTime `json:"activationTime,omitempty"`

	// alerts enabled
	AlertsEnabled bool `json:"alertsEnabled,omitempty"`

	// bastion state
	BastionState string `json:"bastionState,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// edge state
	EdgeState string `json:"edgeState,omitempty"`

	// edge state time
	// Format: date-time
	EdgeStateTime strfmt.DateTime `json:"edgeStateTime,omitempty"`

	// ha last contact
	// Format: date-time
	HaLastContact strfmt.DateTime `json:"haLastContact,omitempty"`

	// ha previous state
	HaPreviousState string `json:"haPreviousState,omitempty"`

	// ha serial number
	HaSerialNumber string `json:"haSerialNumber,omitempty"`

	// ha state
	HaState string `json:"haState,omitempty"`

	// is hub
	IsHub bool `json:"isHub,omitempty"`

	// is live
	IsLive bool `json:"isLive,omitempty"`

	// last contact
	// Format: date-time
	LastContact strfmt.DateTime `json:"lastContact,omitempty"`

	// lte region
	LteRegion string `json:"lteRegion,omitempty"`

	// modified
	// Format: date-time
	Modified strfmt.DateTime `json:"modified,omitempty"`

	// operator alerts enabled
	OperatorAlertsEnabled bool `json:"operatorAlertsEnabled,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// service state
	ServiceState string `json:"serviceState,omitempty"`

	// service up since
	// Format: date-time
	ServiceUpSince strfmt.DateTime `json:"serviceUpSince,omitempty"`

	// status fetched at
	// Format: date-time
	StatusFetchedAt strfmt.DateTime `json:"statusFetchedAt,omitempty"`

	// system up since
	// Format: date-time
	SystemUpSince strfmt.DateTime `json:"systemUpSince,omitempty"`

	// vce edge Id
	VceEdgeID int64 `json:"vceEdgeId,omitempty"`

	// vce URL
	VceURL string `json:"vceURL,omitempty"`
}

// Validate validates this v c e status detail
func (m *VCEStatusDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivationKeyExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEdgeStateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHaLastContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceUpSince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusFetchedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemUpSince(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VCEStatusDetail) validateActivationKeyExpires(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivationKeyExpires) { // not required
		return nil
	}

	if err := validate.FormatOf("activationKeyExpires", "body", "date-time", m.ActivationKeyExpires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateActivationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ActivationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("activationTime", "body", "date-time", m.ActivationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateEdgeStateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EdgeStateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("edgeStateTime", "body", "date-time", m.EdgeStateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateHaLastContact(formats strfmt.Registry) error {
	if swag.IsZero(m.HaLastContact) { // not required
		return nil
	}

	if err := validate.FormatOf("haLastContact", "body", "date-time", m.HaLastContact.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateLastContact(formats strfmt.Registry) error {
	if swag.IsZero(m.LastContact) { // not required
		return nil
	}

	if err := validate.FormatOf("lastContact", "body", "date-time", m.LastContact.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateModified(formats strfmt.Registry) error {
	if swag.IsZero(m.Modified) { // not required
		return nil
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateServiceUpSince(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceUpSince) { // not required
		return nil
	}

	if err := validate.FormatOf("serviceUpSince", "body", "date-time", m.ServiceUpSince.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateStatusFetchedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusFetchedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("statusFetchedAt", "body", "date-time", m.StatusFetchedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VCEStatusDetail) validateSystemUpSince(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemUpSince) { // not required
		return nil
	}

	if err := validate.FormatOf("systemUpSince", "body", "date-time", m.SystemUpSince.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v c e status detail based on context it is used
func (m *VCEStatusDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VCEStatusDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VCEStatusDetail) UnmarshalBinary(b []byte) error {
	var res VCEStatusDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
