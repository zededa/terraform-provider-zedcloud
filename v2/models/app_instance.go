// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppInstance App Instance detail
//
// # App Instance detail
//
// swagger:model AppInstance
type AppInstance struct {

	// app instance activation flag
	// Required: true
	Activate *bool `json:"activate"`

	// User defined name of the edge app, unique across the enterprise. Once app name is created, name can’t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	AppID *string `json:"appId"`

	// app policy id
	AppPolicyID string `json:"appPolicyId,omitempty"`

	// type of bundle
	AppType *AppType `json:"appType,omitempty"`

	// version of bundle app is referring to
	Bundleversion string `json:"bundleversion,omitempty"`

	// System defined universally unique clusterInstance ID, unique across the enterprise.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ClusterID string `json:"clusterID,omitempty"`

	// holds the static Ip of the app instance
	CollectStatsIPAddr string `json:"collectStatsIPAddr,omitempty"`

	// Crypto Key for decrypting user secret information
	CryptoKey string `json:"cryptoKey,omitempty"`

	// Application initialization script template in cloud-config format and user specified values
	CustomConfig *CustomConfig `json:"customConfig,omitempty"`

	// type of deployment for the app, eg: azure, k3s, standalone
	DeploymentType *DeploymentType `json:"deploymentType,omitempty"`

	// Detailed description of the app instance
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// User defined name of the device name, unique across the enterprise. Once device name is defined, name can’t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	DeviceID *string `json:"deviceId"`

	// drive details
	// Required: true
	Drives []*Drive `json:"drives"`

	// user encrypted secrets map
	EncryptedSecrets map[string]string `json:"encryptedSecrets,omitempty"`

	// System defined universally unique Id of the app instance
	// Read Only: true
	// Pattern: [0-9A-Za-z-]+
	ID string `json:"id,omitempty"`

	// application interfaces
	// Required: true
	Interfaces []*AppInterface `json:"interfaces"`

	// This field tells whether user secrets has updated or not, especially the cusotom config
	IsSecretUpdated bool `json:"isSecretUpdated,omitempty"`

	// App Instance logs
	Logs *AppInstanceLogs `json:"logs,omitempty"`

	// app manifest Info
	ManifestInfo *ManifestInfo `json:"manifestInfo,omitempty"`

	// User defined name of the app instance, unique across the enterprise. Once app instance is created, name can’t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// project name which the given app instance belong to
	// Required: true
	ProjectID *string `json:"projectId"`

	// Purge counter: ZedCloudOpsCmd
	Purge *ZedCloudOpsCmd `json:"purge,omitempty"`

	// Refresh counter: ZedCloudOpsCmd
	Refresh *ZedCloudOpsCmd `json:"refresh,omitempty"`

	// Remote console flag
	RemoteConsole bool `json:"remoteConsole,omitempty"`

	// Restart counter: ZedCloudOpsCmd
	Restart *ZedCloudOpsCmd `json:"restart,omitempty"`

	// app instance object revision details
	Revision *ObjectRevision `json:"revision,omitempty"`

	// start delay is the time in seconds EVE should wait after boot before starting the application instance
	StartDelayInSeconds int32 `json:"startDelayInSeconds,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// User defined title of the app instance. Title can be changed at any time
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: ^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$
	Title *string `json:"title"`

	// Deprecated: Application initiazation script in cloud-config format to be used by cloud-init
	UserData string `json:"userData,omitempty"`

	// Instance version tells which edge app does this instance is running
	UserDefinedVersion string `json:"userDefinedVersion,omitempty"`

	// virtual machine info
	Vminfo *VM `json:"vminfo,omitempty"`
}

// Validate validates this app instance
func (m *AppInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeploymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDrives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManifestInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefresh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVminfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstance) validateActivate(formats strfmt.Registry) error {

	if err := validate.Required("activate", "body", m.Activate); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("appId", "body", m.AppID); err != nil {
		return err
	}

	if err := validate.MinLength("appId", "body", *m.AppID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("appId", "body", *m.AppID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("appId", "body", *m.AppID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateAppType(formats strfmt.Registry) error {
	if swag.IsZero(m.AppType) { // not required
		return nil
	}

	if m.AppType != nil {
		if err := m.AppType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.MinLength("clusterID", "body", m.ClusterID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterID", "body", m.ClusterID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("clusterID", "body", m.ClusterID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateCustomConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomConfig) { // not required
		return nil
	}

	if m.CustomConfig != nil {
		if err := m.CustomConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateDeploymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.DeploymentType) { // not required
		return nil
	}

	if m.DeploymentType != nil {
		if err := m.DeploymentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 256); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("deviceId", "body", m.DeviceID); err != nil {
		return err
	}

	if err := validate.MinLength("deviceId", "body", *m.DeviceID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("deviceId", "body", *m.DeviceID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("deviceId", "body", *m.DeviceID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateDrives(formats strfmt.Registry) error {

	if err := validate.Required("drives", "body", m.Drives); err != nil {
		return err
	}

	for i := 0; i < len(m.Drives); i++ {
		if swag.IsZero(m.Drives[i]) { // not required
			continue
		}

		if m.Drives[i] != nil {
			if err := m.Drives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("drives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("drives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstance) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateInterfaces(formats strfmt.Registry) error {

	if err := validate.Required("interfaces", "body", m.Interfaces); err != nil {
		return err
	}

	for i := 0; i < len(m.Interfaces); i++ {
		if swag.IsZero(m.Interfaces[i]) { // not required
			continue
		}

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstance) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.Logs) { // not required
		return nil
	}

	if m.Logs != nil {
		if err := m.Logs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logs")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateManifestInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ManifestInfo) { // not required
		return nil
	}

	if m.ManifestInfo != nil {
		if err := m.ManifestInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manifestInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manifestInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validatePurge(formats strfmt.Registry) error {
	if swag.IsZero(m.Purge) { // not required
		return nil
	}

	if m.Purge != nil {
		if err := m.Purge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purge")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateRefresh(formats strfmt.Registry) error {
	if swag.IsZero(m.Refresh) { // not required
		return nil
	}

	if m.Refresh != nil {
		if err := m.Refresh.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refresh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refresh")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateRestart(formats strfmt.Registry) error {
	if swag.IsZero(m.Restart) { // not required
		return nil
	}

	if m.Restart != nil {
		if err := m.Restart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restart")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.Revision) { // not required
		return nil
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("title", "body", *m.Title, `^[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+$`); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) validateVminfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Vminfo) { // not required
		return nil
	}

	if m.Vminfo != nil {
		if err := m.Vminfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vminfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vminfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app instance based on the context it is used
func (m *AppInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeploymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDrives(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManifestInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePurge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefresh(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVminfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstance) contextValidateAppType(ctx context.Context, formats strfmt.Registry) error {

	if m.AppType != nil {
		if err := m.AppType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateCustomConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomConfig != nil {
		if err := m.CustomConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customConfig")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateDeploymentType(ctx context.Context, formats strfmt.Registry) error {

	if m.DeploymentType != nil {
		if err := m.DeploymentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploymentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploymentType")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateDrives(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Drives); i++ {

		if m.Drives[i] != nil {
			if err := m.Drives[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("drives" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("drives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstance) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *AppInstance) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Interfaces); i++ {

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppInstance) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {

	if m.Logs != nil {
		if err := m.Logs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logs")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateManifestInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ManifestInfo != nil {
		if err := m.ManifestInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("manifestInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("manifestInfo")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidatePurge(ctx context.Context, formats strfmt.Registry) error {

	if m.Purge != nil {
		if err := m.Purge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purge")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateRefresh(ctx context.Context, formats strfmt.Registry) error {

	if m.Refresh != nil {
		if err := m.Refresh.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refresh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refresh")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateRestart(ctx context.Context, formats strfmt.Registry) error {

	if m.Restart != nil {
		if err := m.Restart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("restart")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {
		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstance) contextValidateVminfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Vminfo != nil {
		if err := m.Vminfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vminfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vminfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstance) UnmarshalBinary(b []byte) error {
	var res AppInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
