// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppType type of app bundle.
//
// swagger:model AppType
type AppType string

func NewAppType(value AppType) *AppType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppType.
func (m AppType) Pointer() *AppType {
	return &m
}

const (

	// AppTypeAPPTYPEUNSPECIFIED captures enum value "APP_TYPE_UNSPECIFIED"
	AppTypeAPPTYPEUNSPECIFIED AppType = "APP_TYPE_UNSPECIFIED"

	// AppTypeAPPTYPEVM captures enum value "APP_TYPE_VM"
	AppTypeAPPTYPEVM AppType = "APP_TYPE_VM"

	// AppTypeAPPTYPEVMRUNTIME captures enum value "APP_TYPE_VM_RUNTIME"
	AppTypeAPPTYPEVMRUNTIME AppType = "APP_TYPE_VM_RUNTIME"

	// AppTypeAPPTYPECONTAINER captures enum value "APP_TYPE_CONTAINER"
	AppTypeAPPTYPECONTAINER AppType = "APP_TYPE_CONTAINER"

	// AppTypeAPPTYPEMODULE captures enum value "APP_TYPE_MODULE"
	AppTypeAPPTYPEMODULE AppType = "APP_TYPE_MODULE"
)

// for schema
var appTypeEnum []interface{}

func init() {
	var res []AppType
	if err := json.Unmarshal([]byte(`["APP_TYPE_UNSPECIFIED","APP_TYPE_VM","APP_TYPE_VM_RUNTIME","APP_TYPE_CONTAINER","APP_TYPE_MODULE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appTypeEnum = append(appTypeEnum, v)
	}
}

func (m AppType) validateAppTypeEnum(path, location string, value AppType) error {
	if err := validate.EnumCase(path, location, value, appTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app type
func (m AppType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app type based on context it is used
func (m AppType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
