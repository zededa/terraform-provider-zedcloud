// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkWirelessType network wireless type
//
// swagger:model NetworkWirelessType
type NetworkWirelessType string

func NewNetworkWirelessType(value NetworkWirelessType) *NetworkWirelessType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetworkWirelessType.
func (m NetworkWirelessType) Pointer() *NetworkWirelessType {
	return &m
}

const (

	// NetworkWirelessTypeNETWORKWIRELESSTYPEUNSPECIFIED captures enum value "NETWORK_WIRELESS_TYPE_UNSPECIFIED"
	NetworkWirelessTypeNETWORKWIRELESSTYPEUNSPECIFIED NetworkWirelessType = "NETWORK_WIRELESS_TYPE_UNSPECIFIED"

	// NetworkWirelessTypeNETWORKWIRELESSTYPEWIFI captures enum value "NETWORK_WIRELESS_TYPE_WIFI"
	NetworkWirelessTypeNETWORKWIRELESSTYPEWIFI NetworkWirelessType = "NETWORK_WIRELESS_TYPE_WIFI"

	// NetworkWirelessTypeNETWORKWIRELESSTYPECELLULAR captures enum value "NETWORK_WIRELESS_TYPE_CELLULAR"
	NetworkWirelessTypeNETWORKWIRELESSTYPECELLULAR NetworkWirelessType = "NETWORK_WIRELESS_TYPE_CELLULAR"
)

// for schema
var networkWirelessTypeEnum []interface{}

func init() {
	var res []NetworkWirelessType
	if err := json.Unmarshal([]byte(`["NETWORK_WIRELESS_TYPE_UNSPECIFIED","NETWORK_WIRELESS_TYPE_WIFI","NETWORK_WIRELESS_TYPE_CELLULAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkWirelessTypeEnum = append(networkWirelessTypeEnum, v)
	}
}

func (m NetworkWirelessType) validateNetworkWirelessTypeEnum(path, location string, value NetworkWirelessType) error {
	if err := validate.EnumCase(path, location, value, networkWirelessTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network wireless type
func (m NetworkWirelessType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkWirelessTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this network wireless type based on context it is used
func (m NetworkWirelessType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
