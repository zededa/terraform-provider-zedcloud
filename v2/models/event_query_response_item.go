// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EventQueryResponseItem Event query response item payload detail
//
// # Event query response item payload
//
// swagger:model EventQueryResponseItem
type EventQueryResponseItem struct {

	// clusterInstance name
	ClusterInstance string `json:"clusterInstance,omitempty"`

	// Event description
	Description string `json:"description,omitempty"`

	// device name
	Device string `json:"device,omitempty"`

	// Event type
	EventType string `json:"eventType,omitempty"`

	// instance name
	Instance string `json:"instance,omitempty"`

	// Event resources
	JSONData interface{} `json:"jsonData,omitempty"`

	// project name
	Project string `json:"project,omitempty"`

	// Event resources
	Resource string `json:"resource,omitempty"`

	// Event resources
	ResourceName string `json:"resourceName,omitempty"`

	// severity: FIXME: should be ENUM
	Severity string `json:"severity,omitempty"`

	// source
	Source *EventSource `json:"source,omitempty"`

	// Event tags
	Tags []string `json:"tags"`

	// event timestamp
	Timestamp interface{} `json:"timestamp,omitempty"`

	// User name
	User string `json:"user,omitempty"`
}

// Validate validates this event query response item
func (m *EventQueryResponseItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventQueryResponseItem) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this event query response item based on the context it is used
func (m *EventQueryResponseItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventQueryResponseItem) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventQueryResponseItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventQueryResponseItem) UnmarshalBinary(b []byte) error {
	var res EventQueryResponseItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
