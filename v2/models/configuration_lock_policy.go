// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigurationLockPolicy configuration lock policy body detail
//
// # Configuration lock policy to enforce on all devices of the project
//
// swagger:model ConfigurationLockPolicy
type ConfigurationLockPolicy struct {

	// configuration lock setting
	// Required: true
	ConfigLock *ConfigurationLock `json:"configLock"`

	// unique policy id
	// Read Only: true
	// Pattern: [0-9-a-z-]+
	ID string `json:"id,omitempty"`
}

// Validate validates this configuration lock policy
func (m *ConfigurationLockPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigLock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationLockPolicy) validateConfigLock(formats strfmt.Registry) error {

	if err := validate.Required("configLock", "body", m.ConfigLock); err != nil {
		return err
	}

	if err := validate.Required("configLock", "body", m.ConfigLock); err != nil {
		return err
	}

	if m.ConfigLock != nil {
		if err := m.ConfigLock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configLock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configLock")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationLockPolicy) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[0-9-a-z-]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this configuration lock policy based on the context it is used
func (m *ConfigurationLockPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigLock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigurationLockPolicy) contextValidateConfigLock(ctx context.Context, formats strfmt.Registry) error {

	if m.ConfigLock != nil {

		if err := m.ConfigLock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configLock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("configLock")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigurationLockPolicy) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigurationLockPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigurationLockPolicy) UnmarshalBinary(b []byte) error {
	var res ConfigurationLockPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
