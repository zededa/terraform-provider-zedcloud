// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppCategory Edge Application Category
//
// - APP_CATEGORY_UNSPECIFIED: Invalid Edge Application Category
//   - APP_CATEGORY_OPERATING_SYSTEM: Edge operating systems
//   - APP_CATEGORY_INDUSTRIAL: Connectity solution for industrial protocols
//   - APP_CATEGORY_EDGE_APPLICATION: Edge application framework featuring composite functions for data ingestion, buffering, analytics and export
//   - APP_CATEGORY_NETWORKING: Edge networking services (e.g. SD-WAN, NFV)
//   - APP_CATEGORY_SECURITY: Edge security services (e.g. protocol inspection, firewall)
//   - APP_CATEGORY_DATA_ANALYTICS: Edge analytics (e.g. AI/ML) and data management (e.g. database, connectors) services
//   - APP_CATEGORY_CLOUD_APPLICATION: Edge application runtimes, cloud connectivity and general application enablement
//   - APP_CATEGORY_DEVOPS: Tools for Edge Application CI/CD and performance optimization
//   - APP_CATEGORY_OTHERS: Miscellaneous functionality
//
// swagger:model AppCategory
type AppCategory string

func NewAppCategory(value AppCategory) *AppCategory {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppCategory.
func (m AppCategory) Pointer() *AppCategory {
	return &m
}

const (

	// AppCategoryAPPCATEGORYUNSPECIFIED captures enum value "APP_CATEGORY_UNSPECIFIED"
	AppCategoryAPPCATEGORYUNSPECIFIED AppCategory = "APP_CATEGORY_UNSPECIFIED"

	// AppCategoryAPPCATEGORYOPERATINGSYSTEM captures enum value "APP_CATEGORY_OPERATING_SYSTEM"
	AppCategoryAPPCATEGORYOPERATINGSYSTEM AppCategory = "APP_CATEGORY_OPERATING_SYSTEM"

	// AppCategoryAPPCATEGORYINDUSTRIAL captures enum value "APP_CATEGORY_INDUSTRIAL"
	AppCategoryAPPCATEGORYINDUSTRIAL AppCategory = "APP_CATEGORY_INDUSTRIAL"

	// AppCategoryAPPCATEGORYEDGEAPPLICATION captures enum value "APP_CATEGORY_EDGE_APPLICATION"
	AppCategoryAPPCATEGORYEDGEAPPLICATION AppCategory = "APP_CATEGORY_EDGE_APPLICATION"

	// AppCategoryAPPCATEGORYNETWORKING captures enum value "APP_CATEGORY_NETWORKING"
	AppCategoryAPPCATEGORYNETWORKING AppCategory = "APP_CATEGORY_NETWORKING"

	// AppCategoryAPPCATEGORYSECURITY captures enum value "APP_CATEGORY_SECURITY"
	AppCategoryAPPCATEGORYSECURITY AppCategory = "APP_CATEGORY_SECURITY"

	// AppCategoryAPPCATEGORYDATAANALYTICS captures enum value "APP_CATEGORY_DATA_ANALYTICS"
	AppCategoryAPPCATEGORYDATAANALYTICS AppCategory = "APP_CATEGORY_DATA_ANALYTICS"

	// AppCategoryAPPCATEGORYCLOUDAPPLICATION captures enum value "APP_CATEGORY_CLOUD_APPLICATION"
	AppCategoryAPPCATEGORYCLOUDAPPLICATION AppCategory = "APP_CATEGORY_CLOUD_APPLICATION"

	// AppCategoryAPPCATEGORYDEVOPS captures enum value "APP_CATEGORY_DEVOPS"
	AppCategoryAPPCATEGORYDEVOPS AppCategory = "APP_CATEGORY_DEVOPS"

	// AppCategoryAPPCATEGORYOTHERS captures enum value "APP_CATEGORY_OTHERS"
	AppCategoryAPPCATEGORYOTHERS AppCategory = "APP_CATEGORY_OTHERS"
)

// for schema
var appCategoryEnum []interface{}

func init() {
	var res []AppCategory
	if err := json.Unmarshal([]byte(`["APP_CATEGORY_UNSPECIFIED","APP_CATEGORY_OPERATING_SYSTEM","APP_CATEGORY_INDUSTRIAL","APP_CATEGORY_EDGE_APPLICATION","APP_CATEGORY_NETWORKING","APP_CATEGORY_SECURITY","APP_CATEGORY_DATA_ANALYTICS","APP_CATEGORY_CLOUD_APPLICATION","APP_CATEGORY_DEVOPS","APP_CATEGORY_OTHERS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appCategoryEnum = append(appCategoryEnum, v)
	}
}

func (m AppCategory) validateAppCategoryEnum(path, location string, value AppCategory) error {
	if err := validate.EnumCase(path, location, value, appCategoryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app category
func (m AppCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppCategoryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app category based on context it is used
func (m AppCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
