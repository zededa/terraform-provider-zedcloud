// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ZserviceAssetGroupCreateRO AssetGroupCreateRO - refers to the request object for creating an asset group
//
// swagger:model zserviceAssetGroupCreateRO
type ZserviceAssetGroupCreateRO struct {

	// asset ids
	AssetIds *ZserviceAssetIDs `json:"assetIds,omitempty"`

	// asset tags
	AssetTags *ZserviceAssetTags `json:"assetTags,omitempty"`

	// asset type
	AssetType *ZserviceAssetType `json:"assetType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this zservice asset group create r o
func (m *ZserviceAssetGroupCreateRO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZserviceAssetGroupCreateRO) validateAssetIds(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetIds) { // not required
		return nil
	}

	if m.AssetIds != nil {
		if err := m.AssetIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetIds")
			}
			return err
		}
	}

	return nil
}

func (m *ZserviceAssetGroupCreateRO) validateAssetTags(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetTags) { // not required
		return nil
	}

	if m.AssetTags != nil {
		if err := m.AssetTags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetTags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetTags")
			}
			return err
		}
	}

	return nil
}

func (m *ZserviceAssetGroupCreateRO) validateAssetType(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetType) { // not required
		return nil
	}

	if m.AssetType != nil {
		if err := m.AssetType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this zservice asset group create r o based on the context it is used
func (m *ZserviceAssetGroupCreateRO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssetTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssetType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZserviceAssetGroupCreateRO) contextValidateAssetIds(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetIds != nil {

		if swag.IsZero(m.AssetIds) { // not required
			return nil
		}

		if err := m.AssetIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetIds")
			}
			return err
		}
	}

	return nil
}

func (m *ZserviceAssetGroupCreateRO) contextValidateAssetTags(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetTags != nil {

		if swag.IsZero(m.AssetTags) { // not required
			return nil
		}

		if err := m.AssetTags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetTags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetTags")
			}
			return err
		}
	}

	return nil
}

func (m *ZserviceAssetGroupCreateRO) contextValidateAssetType(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetType != nil {

		if swag.IsZero(m.AssetType) { // not required
			return nil
		}

		if err := m.AssetType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ZserviceAssetGroupCreateRO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZserviceAssetGroupCreateRO) UnmarshalBinary(b []byte) error {
	var res ZserviceAssetGroupCreateRO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
