// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigConnectivityProbeMethod User-defined method to use to determine the connectivity status.
//
//   - CONNECTIVITY_PROBE_METHOD_UNSPECIFIED: Connectivity probing method is not specified and therefore will not be used.
//   - CONNECTIVITY_PROBE_METHOD_ICMP: Use ICMP ping against the probed endpoint to determine the connectivity status.
//   - CONNECTIVITY_PROBE_METHOD_TCP: Try to establish TCP connection with the probed endpoint to determine the connectivity
//
// status.
//
// swagger:model configConnectivityProbeMethod
type ConfigConnectivityProbeMethod string

func NewConfigConnectivityProbeMethod(value ConfigConnectivityProbeMethod) *ConfigConnectivityProbeMethod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigConnectivityProbeMethod.
func (m ConfigConnectivityProbeMethod) Pointer() *ConfigConnectivityProbeMethod {
	return &m
}

const (

	// ConfigConnectivityProbeMethodCONNECTIVITYPROBEMETHODUNSPECIFIED captures enum value "CONNECTIVITY_PROBE_METHOD_UNSPECIFIED"
	ConfigConnectivityProbeMethodCONNECTIVITYPROBEMETHODUNSPECIFIED ConfigConnectivityProbeMethod = "CONNECTIVITY_PROBE_METHOD_UNSPECIFIED"

	// ConfigConnectivityProbeMethodCONNECTIVITYPROBEMETHODICMP captures enum value "CONNECTIVITY_PROBE_METHOD_ICMP"
	ConfigConnectivityProbeMethodCONNECTIVITYPROBEMETHODICMP ConfigConnectivityProbeMethod = "CONNECTIVITY_PROBE_METHOD_ICMP"

	// ConfigConnectivityProbeMethodCONNECTIVITYPROBEMETHODTCP captures enum value "CONNECTIVITY_PROBE_METHOD_TCP"
	ConfigConnectivityProbeMethodCONNECTIVITYPROBEMETHODTCP ConfigConnectivityProbeMethod = "CONNECTIVITY_PROBE_METHOD_TCP"
)

// for schema
var configConnectivityProbeMethodEnum []interface{}

func init() {
	var res []ConfigConnectivityProbeMethod
	if err := json.Unmarshal([]byte(`["CONNECTIVITY_PROBE_METHOD_UNSPECIFIED","CONNECTIVITY_PROBE_METHOD_ICMP","CONNECTIVITY_PROBE_METHOD_TCP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configConnectivityProbeMethodEnum = append(configConnectivityProbeMethodEnum, v)
	}
}

func (m ConfigConnectivityProbeMethod) validateConfigConnectivityProbeMethodEnum(path, location string, value ConfigConnectivityProbeMethod) error {
	if err := validate.EnumCase(path, location, value, configConnectivityProbeMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config connectivity probe method
func (m ConfigConnectivityProbeMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigConnectivityProbeMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config connectivity probe method based on context it is used
func (m ConfigConnectivityProbeMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
