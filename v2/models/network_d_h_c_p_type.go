// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NetworkDHCPType - NETWORK_DHCP_TYPE_STATIC: used for adapter configured DHCP static
//   - NETWORK_DHCP_TYPE_PASSTHROUGH: used for adapter configured DHCP none, application will do DHCP
//   - NETWORK_DHCP_TYPE_DEPRECATED: used for application simulation
//   - NETWORK_DHCP_TYPE_CLIENT: used for adapter configured DHCP client
//
// swagger:model NetworkDHCPType
type NetworkDHCPType string

func NewNetworkDHCPType(value NetworkDHCPType) *NetworkDHCPType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated NetworkDHCPType.
func (m NetworkDHCPType) Pointer() *NetworkDHCPType {
	return &m
}

const (

	// NetworkDHCPTypeNETWORKDHCPTYPEUNSPECIFIED captures enum value "NETWORK_DHCP_TYPE_UNSPECIFIED"
	NetworkDHCPTypeNETWORKDHCPTYPEUNSPECIFIED NetworkDHCPType = "NETWORK_DHCP_TYPE_UNSPECIFIED"

	// NetworkDHCPTypeNETWORKDHCPTYPESTATIC captures enum value "NETWORK_DHCP_TYPE_STATIC"
	NetworkDHCPTypeNETWORKDHCPTYPESTATIC NetworkDHCPType = "NETWORK_DHCP_TYPE_STATIC"

	// NetworkDHCPTypeNETWORKDHCPTYPEPASSTHROUGH captures enum value "NETWORK_DHCP_TYPE_PASSTHROUGH"
	NetworkDHCPTypeNETWORKDHCPTYPEPASSTHROUGH NetworkDHCPType = "NETWORK_DHCP_TYPE_PASSTHROUGH"

	// NetworkDHCPTypeNETWORKDHCPTYPEDEPRECATED captures enum value "NETWORK_DHCP_TYPE_DEPRECATED"
	NetworkDHCPTypeNETWORKDHCPTYPEDEPRECATED NetworkDHCPType = "NETWORK_DHCP_TYPE_DEPRECATED"

	// NetworkDHCPTypeNETWORKDHCPTYPECLIENT captures enum value "NETWORK_DHCP_TYPE_CLIENT"
	NetworkDHCPTypeNETWORKDHCPTYPECLIENT NetworkDHCPType = "NETWORK_DHCP_TYPE_CLIENT"
)

// for schema
var networkDHCPTypeEnum []interface{}

func init() {
	var res []NetworkDHCPType
	if err := json.Unmarshal([]byte(`["NETWORK_DHCP_TYPE_UNSPECIFIED","NETWORK_DHCP_TYPE_STATIC","NETWORK_DHCP_TYPE_PASSTHROUGH","NETWORK_DHCP_TYPE_DEPRECATED","NETWORK_DHCP_TYPE_CLIENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkDHCPTypeEnum = append(networkDHCPTypeEnum, v)
	}
}

func (m NetworkDHCPType) validateNetworkDHCPTypeEnum(path, location string, value NetworkDHCPType) error {
	if err := validate.EnumCase(path, location, value, networkDHCPTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this network d h c p type
func (m NetworkDHCPType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNetworkDHCPTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this network d h c p type based on context it is used
func (m NetworkDHCPType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
