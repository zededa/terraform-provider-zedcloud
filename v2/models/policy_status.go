// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PolicyStatus policy status.
//
// swagger:model PolicyStatus
type PolicyStatus string

func NewPolicyStatus(value PolicyStatus) *PolicyStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PolicyStatus.
func (m PolicyStatus) Pointer() *PolicyStatus {
	return &m
}

const (

	// PolicyStatusPOLICYSTATUSUNSPECIFIED captures enum value "POLICY_STATUS_UNSPECIFIED"
	PolicyStatusPOLICYSTATUSUNSPECIFIED PolicyStatus = "POLICY_STATUS_UNSPECIFIED"

	// PolicyStatusPOLICYSTATUSINITIALIZED captures enum value "POLICY_STATUS_INITIALIZED"
	PolicyStatusPOLICYSTATUSINITIALIZED PolicyStatus = "POLICY_STATUS_INITIALIZED"

	// PolicyStatusPOLICYSTATUSINPROGRESS captures enum value "POLICY_STATUS_INPROGRESS"
	PolicyStatusPOLICYSTATUSINPROGRESS PolicyStatus = "POLICY_STATUS_INPROGRESS"

	// PolicyStatusPOLICYSTATUSREADY captures enum value "POLICY_STATUS_READY"
	PolicyStatusPOLICYSTATUSREADY PolicyStatus = "POLICY_STATUS_READY"

	// PolicyStatusPOLICYSTATUSFAILED captures enum value "POLICY_STATUS_FAILED"
	PolicyStatusPOLICYSTATUSFAILED PolicyStatus = "POLICY_STATUS_FAILED"
)

// for schema
var policyStatusEnum []interface{}

func init() {
	var res []PolicyStatus
	if err := json.Unmarshal([]byte(`["POLICY_STATUS_UNSPECIFIED","POLICY_STATUS_INITIALIZED","POLICY_STATUS_INPROGRESS","POLICY_STATUS_READY","POLICY_STATUS_FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyStatusEnum = append(policyStatusEnum, v)
	}
}

func (m PolicyStatus) validatePolicyStatusEnum(path, location string, value PolicyStatus) error {
	if err := validate.EnumCase(path, location, value, policyStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this policy status
func (m PolicyStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePolicyStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this policy status based on context it is used
func (m PolicyStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
