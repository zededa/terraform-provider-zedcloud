// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DockerRuntimeProtocolVersion docker runtime protocol version
//
// swagger:model DockerRuntimeProtocolVersion
type DockerRuntimeProtocolVersion string

func NewDockerRuntimeProtocolVersion(value DockerRuntimeProtocolVersion) *DockerRuntimeProtocolVersion {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DockerRuntimeProtocolVersion.
func (m DockerRuntimeProtocolVersion) Pointer() *DockerRuntimeProtocolVersion {
	return &m
}

const (

	// DockerRuntimeProtocolVersionRuntimeProtocolVersionUnknown captures enum value "RuntimeProtocolVersion_Unknown"
	DockerRuntimeProtocolVersionRuntimeProtocolVersionUnknown DockerRuntimeProtocolVersion = "RuntimeProtocolVersion_Unknown"

	// DockerRuntimeProtocolVersionRuntimeProtocolVersionV1 captures enum value "RuntimeProtocolVersion_V1"
	DockerRuntimeProtocolVersionRuntimeProtocolVersionV1 DockerRuntimeProtocolVersion = "RuntimeProtocolVersion_V1"
)

// for schema
var dockerRuntimeProtocolVersionEnum []interface{}

func init() {
	var res []DockerRuntimeProtocolVersion
	if err := json.Unmarshal([]byte(`["RuntimeProtocolVersion_Unknown","RuntimeProtocolVersion_V1"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dockerRuntimeProtocolVersionEnum = append(dockerRuntimeProtocolVersionEnum, v)
	}
}

func (m DockerRuntimeProtocolVersion) validateDockerRuntimeProtocolVersionEnum(path, location string, value DockerRuntimeProtocolVersion) error {
	if err := validate.EnumCase(path, location, value, dockerRuntimeProtocolVersionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this docker runtime protocol version
func (m DockerRuntimeProtocolVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDockerRuntimeProtocolVersionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this docker runtime protocol version based on context it is used
func (m DockerRuntimeProtocolVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
