package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Create(params *ProjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsCreateOK, error)

	Delete(params *ProjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDeleteOK, error)

	GetByID(params *ProjectsGetByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsGetByIDOK, error)

	GetByName(params *ProjectsGetByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsGetByNameOK, error)

	Update(params *ProjectsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Create creates project

Create a project.
*/
func (a *Client) Create(params *ProjectsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = CreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Create",
		Method:             "POST",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsCreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsCreateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Delete deletes project

Delete the project with the provided ID.
*/
func (a *Client) Delete(params *ProjectsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = DeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Delete",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByID gets project by ID

Fetch a project via HTTP/GET request with project-ID as a parameter.
*/
func (a *Client) GetByID(params *ProjectsGetByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsGetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_GetByID",
		Method:             "GET",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsGetByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsGetByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsGetByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByName gets project by name

Fetch a project via HTTP/GET request with project-name as a parameter.
*/
func (a *Client) GetByName(params *ProjectsGetByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsGetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_GetByName",
		Method:             "GET",
		PathPattern:        "/v1/projects/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsGetByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsGetByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsGetByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Update updates a project

Note, partial updates are not supported! The body must contain the complete project data including the fields that have not been changed. Therefore, it might be necessary to fetch the project, apply the changes to the retrieved data before eventually submitting the update request.
*/
func (a *Client) Update(params *ProjectsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ProjectsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = UpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Projects_Update",
		Method:             "PUT",
		PathPattern:        "/v1/projects/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProjectsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProjectsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
