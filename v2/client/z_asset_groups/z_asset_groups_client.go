// Code generated by go-swagger; DO NOT EDIT.

package z_asset_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new z asset groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new z asset groups API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new z asset groups API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for z asset groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ZAssetGroupsCreateAssetGroups(params *ZAssetGroupsCreateAssetGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsCreateAssetGroupsOK, error)

	ZAssetGroupsDeleteAssetGroup(params *ZAssetGroupsDeleteAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsDeleteAssetGroupOK, error)

	ZAssetGroupsGetAssetGroup(params *ZAssetGroupsGetAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsGetAssetGroupOK, error)

	ZAssetGroupsGetAssetGroupByName(params *ZAssetGroupsGetAssetGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsGetAssetGroupByNameOK, error)

	ZAssetGroupsListAssetGroups(params *ZAssetGroupsListAssetGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsListAssetGroupsOK, error)

	ZAssetGroupsUpdateAssetGroup(params *ZAssetGroupsUpdateAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsUpdateAssetGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ZAssetGroupsCreateAssetGroups creates asset groups

group assets based on id or tags
*/
func (a *Client) ZAssetGroupsCreateAssetGroups(params *ZAssetGroupsCreateAssetGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsCreateAssetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZAssetGroupsCreateAssetGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZAssetGroups_CreateAssetGroups",
		Method:             "POST",
		PathPattern:        "/v1/asset-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZAssetGroupsCreateAssetGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZAssetGroupsCreateAssetGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZAssetGroupsCreateAssetGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZAssetGroupsDeleteAssetGroup deletes asset group

Delete asset group.
*/
func (a *Client) ZAssetGroupsDeleteAssetGroup(params *ZAssetGroupsDeleteAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsDeleteAssetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZAssetGroupsDeleteAssetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZAssetGroups_DeleteAssetGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/asset-groups/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZAssetGroupsDeleteAssetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZAssetGroupsDeleteAssetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZAssetGroupsDeleteAssetGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZAssetGroupsGetAssetGroup gets aseet group

	get asset group detail
*/
func (a *Client) ZAssetGroupsGetAssetGroup(params *ZAssetGroupsGetAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsGetAssetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZAssetGroupsGetAssetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZAssetGroups_GetAssetGroup",
		Method:             "GET",
		PathPattern:        "/v1/asset-groups/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZAssetGroupsGetAssetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZAssetGroupsGetAssetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZAssetGroupsGetAssetGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZAssetGroupsGetAssetGroupByName gets aseet group

	get asset group detail
*/
func (a *Client) ZAssetGroupsGetAssetGroupByName(params *ZAssetGroupsGetAssetGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsGetAssetGroupByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZAssetGroupsGetAssetGroupByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZAssetGroups_GetAssetGroupByName",
		Method:             "GET",
		PathPattern:        "/v1/asset-groups/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZAssetGroupsGetAssetGroupByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZAssetGroupsGetAssetGroupByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZAssetGroupsGetAssetGroupByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZAssetGroupsListAssetGroups lists asset groups

	List all the asset groups
*/
func (a *Client) ZAssetGroupsListAssetGroups(params *ZAssetGroupsListAssetGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsListAssetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZAssetGroupsListAssetGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZAssetGroups_ListAssetGroups",
		Method:             "GET",
		PathPattern:        "/v1/asset-groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZAssetGroupsListAssetGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZAssetGroupsListAssetGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZAssetGroupsListAssetGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ZAssetGroupsUpdateAssetGroup updates asset group

update asset group by adding or removing assets
*/
func (a *Client) ZAssetGroupsUpdateAssetGroup(params *ZAssetGroupsUpdateAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ZAssetGroupsUpdateAssetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZAssetGroupsUpdateAssetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ZAssetGroups_UpdateAssetGroup",
		Method:             "PUT",
		PathPattern:        "/v1/asset-groups/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ZAssetGroupsUpdateAssetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZAssetGroupsUpdateAssetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ZAssetGroupsUpdateAssetGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
