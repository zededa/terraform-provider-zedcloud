// Code generated by go-swagger; DO NOT EDIT.

package z_asset_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/zededa/terraform-provider-zedcloud/v2/models"
)

// ZAssetGroupsUpdateAssetGroupReader is a Reader for the ZAssetGroupsUpdateAssetGroup structure.
type ZAssetGroupsUpdateAssetGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ZAssetGroupsUpdateAssetGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewZAssetGroupsUpdateAssetGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewZAssetGroupsUpdateAssetGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewZAssetGroupsUpdateAssetGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewZAssetGroupsUpdateAssetGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewZAssetGroupsUpdateAssetGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewZAssetGroupsUpdateAssetGroupInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewZAssetGroupsUpdateAssetGroupGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewZAssetGroupsUpdateAssetGroupDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewZAssetGroupsUpdateAssetGroupOK creates a ZAssetGroupsUpdateAssetGroupOK with default headers values
func NewZAssetGroupsUpdateAssetGroupOK() *ZAssetGroupsUpdateAssetGroupOK {
	return &ZAssetGroupsUpdateAssetGroupOK{}
}

/*
ZAssetGroupsUpdateAssetGroupOK describes a response with status code 200, with default header values.

A successful response.
*/
type ZAssetGroupsUpdateAssetGroupOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z asset groups update asset group o k response has a 2xx status code
func (o *ZAssetGroupsUpdateAssetGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this z asset groups update asset group o k response has a 3xx status code
func (o *ZAssetGroupsUpdateAssetGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z asset groups update asset group o k response has a 4xx status code
func (o *ZAssetGroupsUpdateAssetGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this z asset groups update asset group o k response has a 5xx status code
func (o *ZAssetGroupsUpdateAssetGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this z asset groups update asset group o k response a status code equal to that given
func (o *ZAssetGroupsUpdateAssetGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the z asset groups update asset group o k response
func (o *ZAssetGroupsUpdateAssetGroupOK) Code() int {
	return 200
}

func (o *ZAssetGroupsUpdateAssetGroupOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupOK %s", 200, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupOK %s", 200, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZAssetGroupsUpdateAssetGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZAssetGroupsUpdateAssetGroupUnauthorized creates a ZAssetGroupsUpdateAssetGroupUnauthorized with default headers values
func NewZAssetGroupsUpdateAssetGroupUnauthorized() *ZAssetGroupsUpdateAssetGroupUnauthorized {
	return &ZAssetGroupsUpdateAssetGroupUnauthorized{}
}

/*
ZAssetGroupsUpdateAssetGroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type ZAssetGroupsUpdateAssetGroupUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z asset groups update asset group unauthorized response has a 2xx status code
func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z asset groups update asset group unauthorized response has a 3xx status code
func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z asset groups update asset group unauthorized response has a 4xx status code
func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this z asset groups update asset group unauthorized response has a 5xx status code
func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this z asset groups update asset group unauthorized response a status code equal to that given
func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the z asset groups update asset group unauthorized response
func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) Code() int {
	return 401
}

func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupUnauthorized %s", 401, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupUnauthorized %s", 401, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZAssetGroupsUpdateAssetGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZAssetGroupsUpdateAssetGroupForbidden creates a ZAssetGroupsUpdateAssetGroupForbidden with default headers values
func NewZAssetGroupsUpdateAssetGroupForbidden() *ZAssetGroupsUpdateAssetGroupForbidden {
	return &ZAssetGroupsUpdateAssetGroupForbidden{}
}

/*
ZAssetGroupsUpdateAssetGroupForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have application level access permission for the operation or does not have access scope to the project.
*/
type ZAssetGroupsUpdateAssetGroupForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z asset groups update asset group forbidden response has a 2xx status code
func (o *ZAssetGroupsUpdateAssetGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z asset groups update asset group forbidden response has a 3xx status code
func (o *ZAssetGroupsUpdateAssetGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z asset groups update asset group forbidden response has a 4xx status code
func (o *ZAssetGroupsUpdateAssetGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this z asset groups update asset group forbidden response has a 5xx status code
func (o *ZAssetGroupsUpdateAssetGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this z asset groups update asset group forbidden response a status code equal to that given
func (o *ZAssetGroupsUpdateAssetGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the z asset groups update asset group forbidden response
func (o *ZAssetGroupsUpdateAssetGroupForbidden) Code() int {
	return 403
}

func (o *ZAssetGroupsUpdateAssetGroupForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupForbidden %s", 403, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupForbidden %s", 403, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZAssetGroupsUpdateAssetGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZAssetGroupsUpdateAssetGroupNotFound creates a ZAssetGroupsUpdateAssetGroupNotFound with default headers values
func NewZAssetGroupsUpdateAssetGroupNotFound() *ZAssetGroupsUpdateAssetGroupNotFound {
	return &ZAssetGroupsUpdateAssetGroupNotFound{}
}

/*
ZAssetGroupsUpdateAssetGroupNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type ZAssetGroupsUpdateAssetGroupNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z asset groups update asset group not found response has a 2xx status code
func (o *ZAssetGroupsUpdateAssetGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z asset groups update asset group not found response has a 3xx status code
func (o *ZAssetGroupsUpdateAssetGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z asset groups update asset group not found response has a 4xx status code
func (o *ZAssetGroupsUpdateAssetGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this z asset groups update asset group not found response has a 5xx status code
func (o *ZAssetGroupsUpdateAssetGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this z asset groups update asset group not found response a status code equal to that given
func (o *ZAssetGroupsUpdateAssetGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the z asset groups update asset group not found response
func (o *ZAssetGroupsUpdateAssetGroupNotFound) Code() int {
	return 404
}

func (o *ZAssetGroupsUpdateAssetGroupNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupNotFound %s", 404, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupNotFound %s", 404, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZAssetGroupsUpdateAssetGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZAssetGroupsUpdateAssetGroupConflict creates a ZAssetGroupsUpdateAssetGroupConflict with default headers values
func NewZAssetGroupsUpdateAssetGroupConflict() *ZAssetGroupsUpdateAssetGroupConflict {
	return &ZAssetGroupsUpdateAssetGroupConflict{}
}

/*
ZAssetGroupsUpdateAssetGroupConflict describes a response with status code 409, with default header values.

Conflict.
*/
type ZAssetGroupsUpdateAssetGroupConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z asset groups update asset group conflict response has a 2xx status code
func (o *ZAssetGroupsUpdateAssetGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z asset groups update asset group conflict response has a 3xx status code
func (o *ZAssetGroupsUpdateAssetGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z asset groups update asset group conflict response has a 4xx status code
func (o *ZAssetGroupsUpdateAssetGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this z asset groups update asset group conflict response has a 5xx status code
func (o *ZAssetGroupsUpdateAssetGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this z asset groups update asset group conflict response a status code equal to that given
func (o *ZAssetGroupsUpdateAssetGroupConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the z asset groups update asset group conflict response
func (o *ZAssetGroupsUpdateAssetGroupConflict) Code() int {
	return 409
}

func (o *ZAssetGroupsUpdateAssetGroupConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupConflict %s", 409, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupConflict %s", 409, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZAssetGroupsUpdateAssetGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZAssetGroupsUpdateAssetGroupInternalServerError creates a ZAssetGroupsUpdateAssetGroupInternalServerError with default headers values
func NewZAssetGroupsUpdateAssetGroupInternalServerError() *ZAssetGroupsUpdateAssetGroupInternalServerError {
	return &ZAssetGroupsUpdateAssetGroupInternalServerError{}
}

/*
ZAssetGroupsUpdateAssetGroupInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type ZAssetGroupsUpdateAssetGroupInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z asset groups update asset group internal server error response has a 2xx status code
func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z asset groups update asset group internal server error response has a 3xx status code
func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z asset groups update asset group internal server error response has a 4xx status code
func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this z asset groups update asset group internal server error response has a 5xx status code
func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this z asset groups update asset group internal server error response a status code equal to that given
func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the z asset groups update asset group internal server error response
func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) Code() int {
	return 500
}

func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupInternalServerError %s", 500, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupInternalServerError %s", 500, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZAssetGroupsUpdateAssetGroupInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZAssetGroupsUpdateAssetGroupGatewayTimeout creates a ZAssetGroupsUpdateAssetGroupGatewayTimeout with default headers values
func NewZAssetGroupsUpdateAssetGroupGatewayTimeout() *ZAssetGroupsUpdateAssetGroupGatewayTimeout {
	return &ZAssetGroupsUpdateAssetGroupGatewayTimeout{}
}

/*
ZAssetGroupsUpdateAssetGroupGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type ZAssetGroupsUpdateAssetGroupGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z asset groups update asset group gateway timeout response has a 2xx status code
func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z asset groups update asset group gateway timeout response has a 3xx status code
func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z asset groups update asset group gateway timeout response has a 4xx status code
func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this z asset groups update asset group gateway timeout response has a 5xx status code
func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this z asset groups update asset group gateway timeout response a status code equal to that given
func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the z asset groups update asset group gateway timeout response
func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) Code() int {
	return 504
}

func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupGatewayTimeout %s", 504, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] zAssetGroupsUpdateAssetGroupGatewayTimeout %s", 504, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZAssetGroupsUpdateAssetGroupGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZAssetGroupsUpdateAssetGroupDefault creates a ZAssetGroupsUpdateAssetGroupDefault with default headers values
func NewZAssetGroupsUpdateAssetGroupDefault(code int) *ZAssetGroupsUpdateAssetGroupDefault {
	return &ZAssetGroupsUpdateAssetGroupDefault{
		_statusCode: code,
	}
}

/*
ZAssetGroupsUpdateAssetGroupDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ZAssetGroupsUpdateAssetGroupDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this z asset groups update asset group default response has a 2xx status code
func (o *ZAssetGroupsUpdateAssetGroupDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this z asset groups update asset group default response has a 3xx status code
func (o *ZAssetGroupsUpdateAssetGroupDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this z asset groups update asset group default response has a 4xx status code
func (o *ZAssetGroupsUpdateAssetGroupDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this z asset groups update asset group default response has a 5xx status code
func (o *ZAssetGroupsUpdateAssetGroupDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this z asset groups update asset group default response a status code equal to that given
func (o *ZAssetGroupsUpdateAssetGroupDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the z asset groups update asset group default response
func (o *ZAssetGroupsUpdateAssetGroupDefault) Code() int {
	return o._statusCode
}

func (o *ZAssetGroupsUpdateAssetGroupDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] ZAssetGroups_UpdateAssetGroup default %s", o._statusCode, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/asset-groups/id/{id}][%d] ZAssetGroups_UpdateAssetGroup default %s", o._statusCode, payload)
}

func (o *ZAssetGroupsUpdateAssetGroupDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ZAssetGroupsUpdateAssetGroupDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ZAssetGroupsUpdateAssetGroupBody AssetGroupCreateRO - refers to the request object for creating an asset group
swagger:model ZAssetGroupsUpdateAssetGroupBody
*/
type ZAssetGroupsUpdateAssetGroupBody struct {

	// asset ids
	AssetIds *models.ZserviceAssetIDs `json:"assetIds,omitempty"`

	// asset tags
	AssetTags *models.ZserviceAssetTags `json:"assetTags,omitempty"`

	// asset type
	AssetType *models.ZserviceAssetType `json:"assetType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this z asset groups update asset group body
func (o *ZAssetGroupsUpdateAssetGroupBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssetIds(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssetTags(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ZAssetGroupsUpdateAssetGroupBody) validateAssetIds(formats strfmt.Registry) error {
	if swag.IsZero(o.AssetIds) { // not required
		return nil
	}

	if o.AssetIds != nil {
		if err := o.AssetIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "assetIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "assetIds")
			}
			return err
		}
	}

	return nil
}

func (o *ZAssetGroupsUpdateAssetGroupBody) validateAssetTags(formats strfmt.Registry) error {
	if swag.IsZero(o.AssetTags) { // not required
		return nil
	}

	if o.AssetTags != nil {
		if err := o.AssetTags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "assetTags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "assetTags")
			}
			return err
		}
	}

	return nil
}

func (o *ZAssetGroupsUpdateAssetGroupBody) validateAssetType(formats strfmt.Registry) error {
	if swag.IsZero(o.AssetType) { // not required
		return nil
	}

	if o.AssetType != nil {
		if err := o.AssetType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "assetType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "assetType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this z asset groups update asset group body based on the context it is used
func (o *ZAssetGroupsUpdateAssetGroupBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAssetIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAssetTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateAssetType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ZAssetGroupsUpdateAssetGroupBody) contextValidateAssetIds(ctx context.Context, formats strfmt.Registry) error {

	if o.AssetIds != nil {

		if swag.IsZero(o.AssetIds) { // not required
			return nil
		}

		if err := o.AssetIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "assetIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "assetIds")
			}
			return err
		}
	}

	return nil
}

func (o *ZAssetGroupsUpdateAssetGroupBody) contextValidateAssetTags(ctx context.Context, formats strfmt.Registry) error {

	if o.AssetTags != nil {

		if swag.IsZero(o.AssetTags) { // not required
			return nil
		}

		if err := o.AssetTags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "assetTags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "assetTags")
			}
			return err
		}
	}

	return nil
}

func (o *ZAssetGroupsUpdateAssetGroupBody) contextValidateAssetType(ctx context.Context, formats strfmt.Registry) error {

	if o.AssetType != nil {

		if swag.IsZero(o.AssetType) { // not required
			return nil
		}

		if err := o.AssetType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "assetType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "assetType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ZAssetGroupsUpdateAssetGroupBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ZAssetGroupsUpdateAssetGroupBody) UnmarshalBinary(b []byte) error {
	var res ZAssetGroupsUpdateAssetGroupBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
