// Code generated by go-swagger; DO NOT EDIT.

package asset_group_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new asset group service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new asset group service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new asset group service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for asset group service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssetGroupServiceCreateAssetGroup(params *AssetGroupServiceCreateAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceCreateAssetGroupOK, error)

	AssetGroupServiceDeleteAssetGroup(params *AssetGroupServiceDeleteAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceDeleteAssetGroupOK, error)

	AssetGroupServiceGetAssetGroup(params *AssetGroupServiceGetAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceGetAssetGroupOK, error)

	AssetGroupServiceGetAssetGroupByName(params *AssetGroupServiceGetAssetGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceGetAssetGroupByNameOK, error)

	AssetGroupServiceQueryAssetGroups(params *AssetGroupServiceQueryAssetGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceQueryAssetGroupsOK, error)

	AssetGroupServiceUpdateAssetGroup(params *AssetGroupServiceUpdateAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceUpdateAssetGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AssetGroupServiceCreateAssetGroup creates asset group

Create a asset group record.
*/
func (a *Client) AssetGroupServiceCreateAssetGroup(params *AssetGroupServiceCreateAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceCreateAssetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetGroupServiceCreateAssetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetGroupService_CreateAssetGroup",
		Method:             "POST",
		PathPattern:        "/v1/assetgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetGroupServiceCreateAssetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetGroupServiceCreateAssetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetGroupServiceCreateAssetGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetGroupServiceDeleteAssetGroup deletes asset group

Delete a asset group record.
*/
func (a *Client) AssetGroupServiceDeleteAssetGroup(params *AssetGroupServiceDeleteAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceDeleteAssetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetGroupServiceDeleteAssetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetGroupService_DeleteAssetGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/assetgroups/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetGroupServiceDeleteAssetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetGroupServiceDeleteAssetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetGroupServiceDeleteAssetGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetGroupServiceGetAssetGroup gets asset group

Get the configuration (without security details) of a asset group record.
*/
func (a *Client) AssetGroupServiceGetAssetGroup(params *AssetGroupServiceGetAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceGetAssetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetGroupServiceGetAssetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetGroupService_GetAssetGroup",
		Method:             "GET",
		PathPattern:        "/v1/assetgroups/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetGroupServiceGetAssetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetGroupServiceGetAssetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetGroupServiceGetAssetGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetGroupServiceGetAssetGroupByName gets asset group by name

Get the configuration (without security details) of a asset group record by name.
*/
func (a *Client) AssetGroupServiceGetAssetGroupByName(params *AssetGroupServiceGetAssetGroupByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceGetAssetGroupByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetGroupServiceGetAssetGroupByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetGroupService_GetAssetGroupByName",
		Method:             "GET",
		PathPattern:        "/v1/assetgroups/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetGroupServiceGetAssetGroupByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetGroupServiceGetAssetGroupByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetGroupServiceGetAssetGroupByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetGroupServiceQueryAssetGroups queries asset groups

Query the asset group records.
*/
func (a *Client) AssetGroupServiceQueryAssetGroups(params *AssetGroupServiceQueryAssetGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceQueryAssetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetGroupServiceQueryAssetGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetGroupService_QueryAssetGroups",
		Method:             "GET",
		PathPattern:        "/v1/assetgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetGroupServiceQueryAssetGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetGroupServiceQueryAssetGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetGroupServiceQueryAssetGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AssetGroupServiceUpdateAssetGroup updates asset group

Update a asset group record. The usual pattern to update a asset group record is to retrieve the record and update with the modified values in a new body to update the asset group record.
*/
func (a *Client) AssetGroupServiceUpdateAssetGroup(params *AssetGroupServiceUpdateAssetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetGroupServiceUpdateAssetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetGroupServiceUpdateAssetGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetGroupService_UpdateAssetGroup",
		Method:             "PUT",
		PathPattern:        "/v1/assetgroups/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetGroupServiceUpdateAssetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetGroupServiceUpdateAssetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetGroupServiceUpdateAssetGroupDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
