// Code generated by go-swagger; DO NOT EDIT.

package project_deployment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/zededa/terraform-provider-zedcloud/v2/models"
)

// UpdateReader is a Reader for the Update structure.
type UpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateOK creates a UpdateOK with default headers values
func NewUpdateOK() *UpdateOK {
	return &UpdateOK{}
}

/*
UpdateOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group v2 o k response has a 2xx status code
func (o *UpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this resource group update resource group v2 o k response has a 3xx status code
func (o *UpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group v2 o k response has a 4xx status code
func (o *UpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this resource group update resource group v2 o k response has a 5xx status code
func (o *UpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this resource group update resource group v2 o k response a status code equal to that given
func (o *UpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the resource group update resource group v2 o k response
func (o *UpdateOK) Code() int {
	return 200
}

func (o *UpdateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateOK %s", 200, payload)
}

func (o *UpdateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateOK %s", 200, payload)
}

func (o *UpdateOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnauthorized creates a UpdateUnauthorized with default headers values
func NewUpdateUnauthorized() *UpdateUnauthorized {
	return &UpdateUnauthorized{}
}

/*
UpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group v2 unauthorized response has a 2xx status code
func (o *UpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group v2 unauthorized response has a 3xx status code
func (o *UpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group v2 unauthorized response has a 4xx status code
func (o *UpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this resource group update resource group v2 unauthorized response has a 5xx status code
func (o *UpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this resource group update resource group v2 unauthorized response a status code equal to that given
func (o *UpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the resource group update resource group v2 unauthorized response
func (o *UpdateUnauthorized) Code() int {
	return 401
}

func (o *UpdateUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateUnauthorized %s", 401, payload)
}

func (o *UpdateUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateUnauthorized %s", 401, payload)
}

func (o *UpdateUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateForbidden creates a UpdateForbidden with default headers values
func NewUpdateForbidden() *UpdateForbidden {
	return &UpdateForbidden{}
}

/*
UpdateForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type UpdateForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group v2 forbidden response has a 2xx status code
func (o *UpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group v2 forbidden response has a 3xx status code
func (o *UpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group v2 forbidden response has a 4xx status code
func (o *UpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this resource group update resource group v2 forbidden response has a 5xx status code
func (o *UpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this resource group update resource group v2 forbidden response a status code equal to that given
func (o *UpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the resource group update resource group v2 forbidden response
func (o *UpdateForbidden) Code() int {
	return 403
}

func (o *UpdateForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateForbidden %s", 403, payload)
}

func (o *UpdateForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateForbidden %s", 403, payload)
}

func (o *UpdateForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternalServerError creates a UpdateInternalServerError with default headers values
func NewUpdateInternalServerError() *UpdateInternalServerError {
	return &UpdateInternalServerError{}
}

/*
UpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group v2 internal server error response has a 2xx status code
func (o *UpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group v2 internal server error response has a 3xx status code
func (o *UpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group v2 internal server error response has a 4xx status code
func (o *UpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this resource group update resource group v2 internal server error response has a 5xx status code
func (o *UpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this resource group update resource group v2 internal server error response a status code equal to that given
func (o *UpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the resource group update resource group v2 internal server error response
func (o *UpdateInternalServerError) Code() int {
	return 500
}

func (o *UpdateInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateInternalServerError %s", 500, payload)
}

func (o *UpdateInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateInternalServerError %s", 500, payload)
}

func (o *UpdateInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGatewayTimeout creates a UpdateGatewayTimeout with default headers values
func NewUpdateGatewayTimeout() *UpdateGatewayTimeout {
	return &UpdateGatewayTimeout{}
}

/*
UpdateGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this resource group update resource group v2 gateway timeout response has a 2xx status code
func (o *UpdateGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this resource group update resource group v2 gateway timeout response has a 3xx status code
func (o *UpdateGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this resource group update resource group v2 gateway timeout response has a 4xx status code
func (o *UpdateGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this resource group update resource group v2 gateway timeout response has a 5xx status code
func (o *UpdateGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this resource group update resource group v2 gateway timeout response a status code equal to that given
func (o *UpdateGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the resource group update resource group v2 gateway timeout response
func (o *UpdateGatewayTimeout) Code() int {
	return 504
}

func (o *UpdateGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateGatewayTimeout %s", 504, payload)
}

func (o *UpdateGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdateGatewayTimeout %s", 504, payload)
}

func (o *UpdateGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDefault creates a UpdateDefault with default headers values
func NewUpdateDefault(code int) *UpdateDefault {
	return &UpdateDefault{
		_statusCode: code,
	}
}

/*
UpdateDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpdateDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this resource group update resource group v2 default response has a 2xx status code
func (o *UpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this resource group update resource group v2 default response has a 3xx status code
func (o *UpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this resource group update resource group v2 default response has a 4xx status code
func (o *UpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this resource group update resource group v2 default response has a 5xx status code
func (o *UpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this resource group update resource group v2 default response a status code equal to that given
func (o *UpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the resource group update resource group v2 default response
func (o *UpdateDefault) Code() int {
	return o._statusCode
}

func (o *UpdateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdate default %s", o._statusCode, payload)
}

func (o *UpdateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v2/projects/id/{projectId}/deployments/id/{id}][%d] projectDeploymentUpdate default %s", o._statusCode, payload)
}

func (o *UpdateDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *UpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateBody resource group update resource group v2 body
swagger:model UpdateBody
*/
type UpdateBody struct {

	// list of app instance policies
	AppInstPolicies []*models.AppInstPolicy `json:"appInstPolicies"`

	// cluster policy details
	ClusterPolicy *models.ClusterInstPolicy `json:"clusterPolicy,omitempty"`

	// user defined tag for the deployment, which is used while targeting set of devices
	DeploymentTag string `json:"deploymentTag,omitempty"`

	// list of device policies
	DevicePolicies []*models.DevicePolicy `json:"devicePolicies"`

	// edge view policy details
	EdgeviewPolicy *models.EdgeviewPolicy `json:"edgeviewPolicy,omitempty"`

	// integration policy details
	IntegrationPolicy *models.IntegrationPolicy `json:"integrationPolicy,omitempty"`

	// user defined name for the deployment
	Name string `json:"name,omitempty"`

	// list of network instance policies
	NetworkInstPolicies []*models.NetworkInstPolicy `json:"networkInstPolicies"`

	// object revision
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// user defined title for the deployment
	Title string `json:"title,omitempty"`

	// list of volume instamce policies
	VolumeInstPolicies []*models.VolumeInstPolicy `json:"volumeInstPolicies"`
}

// Validate validates this resource group update resource group v2 body
func (o *UpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppInstPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClusterPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDevicePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEdgeviewPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIntegrationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkInstPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVolumeInstPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateBody) validateAppInstPolicies(formats strfmt.Registry) error {
	if swag.IsZero(o.AppInstPolicies) { // not required
		return nil
	}

	for i := 0; i < len(o.AppInstPolicies); i++ {
		if swag.IsZero(o.AppInstPolicies[i]) { // not required
			continue
		}

		if o.AppInstPolicies[i] != nil {
			if err := o.AppInstPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "appInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "appInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateBody) validateClusterPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.ClusterPolicy) { // not required
		return nil
	}

	if o.ClusterPolicy != nil {
		if err := o.ClusterPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "clusterPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "clusterPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBody) validateDevicePolicies(formats strfmt.Registry) error {
	if swag.IsZero(o.DevicePolicies) { // not required
		return nil
	}

	for i := 0; i < len(o.DevicePolicies); i++ {
		if swag.IsZero(o.DevicePolicies[i]) { // not required
			continue
		}

		if o.DevicePolicies[i] != nil {
			if err := o.DevicePolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "devicePolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "devicePolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateBody) validateEdgeviewPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.EdgeviewPolicy) { // not required
		return nil
	}

	if o.EdgeviewPolicy != nil {
		if err := o.EdgeviewPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "edgeviewPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "edgeviewPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBody) validateIntegrationPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.IntegrationPolicy) { // not required
		return nil
	}

	if o.IntegrationPolicy != nil {
		if err := o.IntegrationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "integrationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "integrationPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBody) validateNetworkInstPolicies(formats strfmt.Registry) error {
	if swag.IsZero(o.NetworkInstPolicies) { // not required
		return nil
	}

	for i := 0; i < len(o.NetworkInstPolicies); i++ {
		if swag.IsZero(o.NetworkInstPolicies[i]) { // not required
			continue
		}

		if o.NetworkInstPolicies[i] != nil {
			if err := o.NetworkInstPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "networkInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "networkInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBody) validateVolumeInstPolicies(formats strfmt.Registry) error {
	if swag.IsZero(o.VolumeInstPolicies) { // not required
		return nil
	}

	for i := 0; i < len(o.VolumeInstPolicies); i++ {
		if swag.IsZero(o.VolumeInstPolicies[i]) { // not required
			continue
		}

		if o.VolumeInstPolicies[i] != nil {
			if err := o.VolumeInstPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "volumeInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "volumeInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resource group update resource group v2 body based on the context it is used
func (o *UpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAppInstPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateClusterPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDevicePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEdgeviewPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateIntegrationPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNetworkInstPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVolumeInstPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateBody) contextValidateAppInstPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AppInstPolicies); i++ {

		if o.AppInstPolicies[i] != nil {

			if swag.IsZero(o.AppInstPolicies[i]) { // not required
				return nil
			}

			if err := o.AppInstPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "appInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "appInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateBody) contextValidateClusterPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.ClusterPolicy != nil {

		if swag.IsZero(o.ClusterPolicy) { // not required
			return nil
		}

		if err := o.ClusterPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "clusterPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "clusterPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBody) contextValidateDevicePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.DevicePolicies); i++ {

		if o.DevicePolicies[i] != nil {

			if swag.IsZero(o.DevicePolicies[i]) { // not required
				return nil
			}

			if err := o.DevicePolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "devicePolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "devicePolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateBody) contextValidateEdgeviewPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.EdgeviewPolicy != nil {

		if swag.IsZero(o.EdgeviewPolicy) { // not required
			return nil
		}

		if err := o.EdgeviewPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "edgeviewPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "edgeviewPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBody) contextValidateIntegrationPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.IntegrationPolicy != nil {

		if swag.IsZero(o.IntegrationPolicy) { // not required
			return nil
		}

		if err := o.IntegrationPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "integrationPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "integrationPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBody) contextValidateNetworkInstPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.NetworkInstPolicies); i++ {

		if o.NetworkInstPolicies[i] != nil {

			if swag.IsZero(o.NetworkInstPolicies[i]) { // not required
				return nil
			}

			if err := o.NetworkInstPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "networkInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "networkInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {

		if swag.IsZero(o.Revision) { // not required
			return nil
		}

		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateBody) contextValidateVolumeInstPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.VolumeInstPolicies); i++ {

		if o.VolumeInstPolicies[i] != nil {

			if swag.IsZero(o.VolumeInstPolicies[i]) { // not required
				return nil
			}

			if err := o.VolumeInstPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "volumeInstPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "volumeInstPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateBody) UnmarshalBinary(b []byte) error {
	var res UpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
