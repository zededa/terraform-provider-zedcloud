package volume_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new volume instance configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volume instance configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Create(params *VolumeInstanceConfigurationCreateVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationCreateVolumeInstanceOK, error)

	Delete(params *VolumeInstanceConfigurationDeleteVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationDeleteVolumeInstanceOK, error)

	GetByID(params *VolumeInstanceConfigurationGetVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationGetVolumeInstanceOK, error)

	GetByName(params *VolumeInstanceConfigurationGetVolumeInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationGetVolumeInstanceByNameOK, error)

	VolumeInstanceConfigurationQueryVolumeInstances(params *VolumeInstanceConfigurationQueryVolumeInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationQueryVolumeInstancesOK, error)

	Update(params *VolumeInstanceConfigurationUpdateVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationUpdateVolumeInstanceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Create creates edge volume instance

Create an edge volume instance record.
*/
func (a *Client) Create(params *VolumeInstanceConfigurationCreateVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationCreateVolumeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = CreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceConfiguration_CreateVolumeInstance",
		Method:             "POST",
		PathPattern:        "/v1/volumes/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceConfigurationCreateVolumeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceConfigurationCreateVolumeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceConfigurationCreateVolumeInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Delete deletes volume instance

Delete a volume instance record.
*/
func (a *Client) Delete(params *VolumeInstanceConfigurationDeleteVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationDeleteVolumeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = DeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceConfiguration_DeleteVolumeInstance",
		Method:             "DELETE",
		PathPattern:        "/v1/volumes/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceConfigurationDeleteVolumeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceConfigurationDeleteVolumeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceConfigurationDeleteVolumeInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByID gets edge volume instance

Get the configuration (without security details) of an edge volume instance record.
*/
func (a *Client) GetByID(params *VolumeInstanceConfigurationGetVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationGetVolumeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceConfiguration_GetVolumeInstance",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceConfigurationGetVolumeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceConfigurationGetVolumeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceConfigurationGetVolumeInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByName gets edge volume instance

Get the configuration (without security details) of an edge volume instance record.
*/
func (a *Client) GetByName(params *VolumeInstanceConfigurationGetVolumeInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationGetVolumeInstanceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceConfiguration_GetVolumeInstanceByName",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceConfigurationGetVolumeInstanceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceConfigurationGetVolumeInstanceByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceConfigurationGetVolumeInstanceByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
VolumeInstanceConfigurationQueryVolumeInstances queries edge volume instances

Query the edge volume instance records.
*/
func (a *Client) VolumeInstanceConfigurationQueryVolumeInstances(params *VolumeInstanceConfigurationQueryVolumeInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationQueryVolumeInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVolumeInstanceConfigurationQueryVolumeInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceConfiguration_QueryVolumeInstances",
		Method:             "GET",
		PathPattern:        "/v1/volumes/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceConfigurationQueryVolumeInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceConfigurationQueryVolumeInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceConfigurationQueryVolumeInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Update updates edge volume instance

Update an edge volume instance. The usual pattern to update an edge volume instance record is to retrieve the record and update with the modified values in a new body to update the edge volume instance record.
*/
func (a *Client) Update(params *VolumeInstanceConfigurationUpdateVolumeInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VolumeInstanceConfigurationUpdateVolumeInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = UpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "VolumeInstanceConfiguration_UpdateVolumeInstance",
		Method:             "PUT",
		PathPattern:        "/v1/volumes/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VolumeInstanceConfigurationUpdateVolumeInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VolumeInstanceConfigurationUpdateVolumeInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*VolumeInstanceConfigurationUpdateVolumeInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
