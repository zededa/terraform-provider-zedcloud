package application_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge application instance configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge application instance configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceOK, error)

	EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceOK, error)

	Create(params *EdgeApplicationInstanceConfigurationCreateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationCreateEdgeApplicationInstanceOK, error)

	EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceOK, error)

	Delete(params *EdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstanceOK, error)

	GetByID(params *EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceOK, error)

	GetByName(params *EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByNameOK, error)

	EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstances(params *EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesOK, error)

	EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceOK, error)

	EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceOK, error)

	EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceOK, error)

	Update(params *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK, error)

	EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstance(params *EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstanceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstance activates edge application instance

Activate an edge application instance. If already in active state no action is taken.
*/
func (a *Client) EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_ActivateEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationActivateEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstance connects to edge application instance console

Remotely connect to console of an edge application instance running on the edge node where the edge application instance has been deployed.
*/
func (a *Client) EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_ConnectToEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/console/remote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationConnectToEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Create creates edge application instance

Create an edge application instance record.
*/
func (a *Client) Create(params *EdgeApplicationInstanceConfigurationCreateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationCreateEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = CreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_CreateEdgeApplicationInstance",
		Method:             "POST",
		PathPattern:        "/v1/apps/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationCreateEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationCreateEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationCreateEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstance deactivates edge application instance

Deactivate an edge application instance. If already in inactive state no action is taken.
*/
func (a *Client) EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_DeActivateEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationDeActivateEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Delete deletes edge application instance

Delete an edge application instance record.
*/
func (a *Client) Delete(params *EdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = DeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_DeleteEdgeApplicationInstance",
		Method:             "DELETE",
		PathPattern:        "/v1/apps/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationDeleteEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByID gets edge application instance

Get the configuration (without security details) of an edge application instance record.
*/
func (a *Client) GetByID(params *EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_GetEdgeApplicationInstance",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByName gets edge application instance

Get the configuration (without security details) of an edge application instance record.
*/
func (a *Client) GetByName(params *EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_GetEdgeApplicationInstanceByName",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationGetEdgeApplicationInstanceByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstances queries edge application instances

Query the edge application instance records.
*/
func (a *Client) EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstances(params *EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_QueryEdgeApplicationInstances",
		Method:             "GET",
		PathPattern:        "/v1/apps/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationQueryEdgeApplicationInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstance refreshes edge application instance

Refresh an edge application instance. Update edge application instance to the latest version of the edge application. This operation will result in a restart of the edge application instance.
*/
func (a *Client) EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_RefreshEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationRefreshEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstance refreshes and purge edge application instance

Refresh and purge an edge application instance, update edge application instance to the latest version of the edge application. This operation will result in loss of data and a restart of the edge application instance.
*/
func (a *Client) EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_RefreshPurgeEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/refresh/purge",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationRefreshPurgeEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstance restarts edge application instance

Restart an edge application instance, initiate a restart of the edge application instance.
*/
func (a *Client) EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstance(params *EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_RestartEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationRestartEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Update updates edge application instance

Update an edge application instance. The usual pattern to update an edge application bundle record is to retrieve the record and update with the modified values in a new body to update the edge application bundle record.
*/
func (a *Client) Update(params *EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = UpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_UpdateEdgeApplicationInstance",
		Method:             "PUT",
		PathPattern:        "/v1/apps/instances/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationUpdateEdgeApplicationInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

/*
EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstance patches envelope reference update

Attach/detach a patch envelope to app instance. For detaching, pass patch envelope id as empty string
*/
func (a *Client) EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstance(params *EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationInstanceConfiguration_UpdatePatchEnvelopeReferencetoAppInstance",
		Method:             "POST",
		PathPattern:        "/v1/apps/instances/patch-reference-update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationInstanceConfigurationUpdatePatchEnvelopeReferencetoAppInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}
