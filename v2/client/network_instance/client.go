package network_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge network instance configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge network instance configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Create(params *EdgeNetworkInstanceConfigurationCreateEdgeNetworkInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationCreateEdgeNetworkInstanceOK, error)

	Delete(params *EdgeNetworkInstanceConfigurationDeleteEdgeNetworkInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationDeleteEdgeNetworkInstanceOK, error)

	GetByID(params *EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceOK, error)

	GetByName(params *EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceByNameOK, error)

	EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstances(params *EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstancesOK, error)

	EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstance(params *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Create creates edge network instance

Create an edge network instance record.
*/
func (a *Client) Create(params *EdgeNetworkInstanceConfigurationCreateEdgeNetworkInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationCreateEdgeNetworkInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = CreateNetworkInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceConfiguration_CreateEdgeNetworkInstance",
		Method:             "POST",
		PathPattern:        "/v1/netinsts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceConfigurationCreateEdgeNetworkInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceConfigurationCreateEdgeNetworkInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceConfigurationCreateEdgeNetworkInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Delete deletes edge network instance

Delete an edge network instance record.
*/
func (a *Client) Delete(params *EdgeNetworkInstanceConfigurationDeleteEdgeNetworkInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationDeleteEdgeNetworkInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = DeleteNetworkInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceConfiguration_DeleteEdgeNetworkInstance",
		Method:             "DELETE",
		PathPattern:        "/v1/netinsts/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceConfigurationDeleteEdgeNetworkInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceConfigurationDeleteEdgeNetworkInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceConfigurationDeleteEdgeNetworkInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByID gets edge network instance

Get the configuration (without security details) of an edge network instance record.
*/
func (a *Client) GetByID(params *EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceConfiguration_GetEdgeNetworkInstance",
		Method:             "GET",
		PathPattern:        "/v1/netinsts/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByName gets edge network instance

Get the configuration (without security details) of an edge network instance record.
*/
func (a *Client) GetByName(params *EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceConfiguration_GetEdgeNetworkInstanceByName",
		Method:             "GET",
		PathPattern:        "/v1/netinsts/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceConfigurationGetEdgeNetworkInstanceByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstances queries edge network instances

Query the edge network instance records.
*/
func (a *Client) EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstances(params *EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNetworkInstanceConfigurationQueryEdgeNetworkInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceConfiguration_QueryEdgeNetworkInstances",
		Method:             "GET",
		PathPattern:        "/v1/netinsts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceConfigurationQueryEdgeNetworkInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstance updates edge network instance

Update an edge network instance. The usual pattern to update an edge network instance record is to retrieve the record and update with the modified values in a new body to update the edge network instance record.
*/
func (a *Client) EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstance(params *EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeNetworkInstanceConfiguration_UpdateEdgeNetworkInstance",
		Method:             "PUT",
		PathPattern:        "/v1/netinsts/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeNetworkInstanceConfigurationUpdateEdgeNetworkInstanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
