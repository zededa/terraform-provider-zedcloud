package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new edge application configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for edge application configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Create(params *EdgeApplicationConfigurationCreateEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationCreateEdgeApplicationBundleOK, error)

	Delete(params *EdgeApplicationConfigurationDeleteEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationDeleteEdgeApplicationBundleOK, error)

	GetByID(params *EdgeApplicationConfigurationGetEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationGetEdgeApplicationBundleOK, error)

	GetByName(params *EdgeApplicationConfigurationGetEdgeApplicationBundleByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationGetEdgeApplicationBundleByNameOK, error)

	EdgeApplicationConfigurationGetGlobalEdgeApplicationBundle(params *EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleOK, error)

	EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByName(params *EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByNameOK, error)

	EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectList(params *EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectListOK, error)

	EdgeApplicationConfigurationQueryEdgeApplicationBundles(params *EdgeApplicationConfigurationQueryEdgeApplicationBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationQueryEdgeApplicationBundlesOK, error)

	EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundles(params *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesOK, error)

	Update(params *EdgeApplicationConfigurationUpdateEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationUpdateEdgeApplicationBundleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Create creates edge application bundle

Create an edge application bundle record.
*/
func (a *Client) Create(params *EdgeApplicationConfigurationCreateEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationCreateEdgeApplicationBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = CreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_CreateEdgeApplicationBundle",
		Method:             "POST",
		PathPattern:        "/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationCreateEdgeApplicationBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationCreateEdgeApplicationBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationCreateEdgeApplicationBundleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Delete deletes edge application bundle

Delete an edge application bundle record.
*/
func (a *Client) Delete(params *EdgeApplicationConfigurationDeleteEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationDeleteEdgeApplicationBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = DeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_DeleteEdgeApplicationBundle",
		Method:             "DELETE",
		PathPattern:        "/v1/apps/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationDeleteEdgeApplicationBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationDeleteEdgeApplicationBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationDeleteEdgeApplicationBundleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByID gets edge application bundle

Get the configuration (without security details) of an edge application bundle record.
*/
func (a *Client) GetByID(params *EdgeApplicationConfigurationGetEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationGetEdgeApplicationBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_GetEdgeApplicationBundle",
		Method:             "GET",
		PathPattern:        "/v1/apps/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationGetEdgeApplicationBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationGetEdgeApplicationBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationGetEdgeApplicationBundleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetByName gets edge application bundle

Get the configuration (without security details) of an edge application bundle record.
*/
func (a *Client) GetByName(params *EdgeApplicationConfigurationGetEdgeApplicationBundleByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationGetEdgeApplicationBundleByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = GetByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_GetEdgeApplicationBundleByName",
		Method:             "GET",
		PathPattern:        "/v1/apps/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationGetEdgeApplicationBundleByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationGetEdgeApplicationBundleByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationGetEdgeApplicationBundleByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationConfigurationGetGlobalEdgeApplicationBundle gets global edge application bundle

Get the configuration (without security details) of a global edge application bundle record.
*/
func (a *Client) EdgeApplicationConfigurationGetGlobalEdgeApplicationBundle(params *EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationConfigurationGetGlobalEdgeApplicationBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_GetGlobalEdgeApplicationBundle",
		Method:             "GET",
		PathPattern:        "/v1/apps/global/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByName gets global edge application bundle

Get the configuration (without security details) of a global edge application bundle record.
*/
func (a *Client) EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByName(params *EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_GetGlobalEdgeApplicationBundleByName",
		Method:             "GET",
		PathPattern:        "/v1/apps/global/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationGetGlobalEdgeApplicationBundleByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectList queries the project access list of an edge application bundle

Query the project access list of an edge application bundle
*/
func (a *Client) EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectList(params *EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationConfigurationQueryEdgeApplicationBundleProjectListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_QueryEdgeApplicationBundleProjectList",
		Method:             "GET",
		PathPattern:        "/v1/apps/id/{id}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationQueryEdgeApplicationBundleProjectListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationConfigurationQueryEdgeApplicationBundles queries edge application bundles

Query the edge application bundle records.
*/
func (a *Client) EdgeApplicationConfigurationQueryEdgeApplicationBundles(params *EdgeApplicationConfigurationQueryEdgeApplicationBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationQueryEdgeApplicationBundlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationConfigurationQueryEdgeApplicationBundlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_QueryEdgeApplicationBundles",
		Method:             "GET",
		PathPattern:        "/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationQueryEdgeApplicationBundlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationQueryEdgeApplicationBundlesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationQueryEdgeApplicationBundlesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundles queries global edge application bundles

Query the edge application bundle records present in the parent enetrprise
*/
func (a *Client) EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundles(params *EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_QueryGlobalEdgeApplicationBundles",
		Method:             "GET",
		PathPattern:        "/v1/apps/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationQueryGlobalEdgeApplicationBundlesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Update updates edge application bundle

Update an edge application bundle record. The usual pattern to update an edge application bundle record is to retrieve the record and update with the modified values in a new body to update the edge application bundle record.
*/
func (a *Client) Update(params *EdgeApplicationConfigurationUpdateEdgeApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EdgeApplicationConfigurationUpdateEdgeApplicationBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = UpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EdgeApplicationConfiguration_UpdateEdgeApplicationBundle",
		Method:             "PUT",
		PathPattern:        "/v1/apps/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EdgeApplicationConfigurationUpdateEdgeApplicationBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EdgeApplicationConfigurationUpdateEdgeApplicationBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EdgeApplicationConfigurationUpdateEdgeApplicationBundleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
