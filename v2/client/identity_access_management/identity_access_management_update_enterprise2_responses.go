// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/v2/models"
)

// IdentityAccessManagementUpdateEnterprise2Reader is a Reader for the IdentityAccessManagementUpdateEnterprise2 structure.
type IdentityAccessManagementUpdateEnterprise2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IdentityAccessManagementUpdateEnterprise2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIdentityAccessManagementUpdateEnterprise2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIdentityAccessManagementUpdateEnterprise2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIdentityAccessManagementUpdateEnterprise2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIdentityAccessManagementUpdateEnterprise2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewIdentityAccessManagementUpdateEnterprise2Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIdentityAccessManagementUpdateEnterprise2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewIdentityAccessManagementUpdateEnterprise2GatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIdentityAccessManagementUpdateEnterprise2Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIdentityAccessManagementUpdateEnterprise2OK creates a IdentityAccessManagementUpdateEnterprise2OK with default headers values
func NewIdentityAccessManagementUpdateEnterprise2OK() *IdentityAccessManagementUpdateEnterprise2OK {
	return &IdentityAccessManagementUpdateEnterprise2OK{}
}

/*
IdentityAccessManagementUpdateEnterprise2OK describes a response with status code 200, with default header values.

A successful response.
*/
type IdentityAccessManagementUpdateEnterprise2OK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update enterprise2 o k response has a 2xx status code
func (o *IdentityAccessManagementUpdateEnterprise2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this identity access management update enterprise2 o k response has a 3xx status code
func (o *IdentityAccessManagementUpdateEnterprise2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update enterprise2 o k response has a 4xx status code
func (o *IdentityAccessManagementUpdateEnterprise2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update enterprise2 o k response has a 5xx status code
func (o *IdentityAccessManagementUpdateEnterprise2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update enterprise2 o k response a status code equal to that given
func (o *IdentityAccessManagementUpdateEnterprise2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the identity access management update enterprise2 o k response
func (o *IdentityAccessManagementUpdateEnterprise2OK) Code() int {
	return 200
}

func (o *IdentityAccessManagementUpdateEnterprise2OK) Error() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2OK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2OK) String() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2OK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2OK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateEnterprise2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateEnterprise2Unauthorized creates a IdentityAccessManagementUpdateEnterprise2Unauthorized with default headers values
func NewIdentityAccessManagementUpdateEnterprise2Unauthorized() *IdentityAccessManagementUpdateEnterprise2Unauthorized {
	return &IdentityAccessManagementUpdateEnterprise2Unauthorized{}
}

/*
IdentityAccessManagementUpdateEnterprise2Unauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type IdentityAccessManagementUpdateEnterprise2Unauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update enterprise2 unauthorized response has a 2xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update enterprise2 unauthorized response has a 3xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update enterprise2 unauthorized response has a 4xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update enterprise2 unauthorized response has a 5xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update enterprise2 unauthorized response a status code equal to that given
func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the identity access management update enterprise2 unauthorized response
func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) Code() int {
	return 401
}

func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2Unauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2Unauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateEnterprise2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateEnterprise2Forbidden creates a IdentityAccessManagementUpdateEnterprise2Forbidden with default headers values
func NewIdentityAccessManagementUpdateEnterprise2Forbidden() *IdentityAccessManagementUpdateEnterprise2Forbidden {
	return &IdentityAccessManagementUpdateEnterprise2Forbidden{}
}

/*
IdentityAccessManagementUpdateEnterprise2Forbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type IdentityAccessManagementUpdateEnterprise2Forbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update enterprise2 forbidden response has a 2xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update enterprise2 forbidden response has a 3xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update enterprise2 forbidden response has a 4xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update enterprise2 forbidden response has a 5xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update enterprise2 forbidden response a status code equal to that given
func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the identity access management update enterprise2 forbidden response
func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) Code() int {
	return 403
}

func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2Forbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) String() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2Forbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateEnterprise2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateEnterprise2NotFound creates a IdentityAccessManagementUpdateEnterprise2NotFound with default headers values
func NewIdentityAccessManagementUpdateEnterprise2NotFound() *IdentityAccessManagementUpdateEnterprise2NotFound {
	return &IdentityAccessManagementUpdateEnterprise2NotFound{}
}

/*
IdentityAccessManagementUpdateEnterprise2NotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type IdentityAccessManagementUpdateEnterprise2NotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update enterprise2 not found response has a 2xx status code
func (o *IdentityAccessManagementUpdateEnterprise2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update enterprise2 not found response has a 3xx status code
func (o *IdentityAccessManagementUpdateEnterprise2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update enterprise2 not found response has a 4xx status code
func (o *IdentityAccessManagementUpdateEnterprise2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update enterprise2 not found response has a 5xx status code
func (o *IdentityAccessManagementUpdateEnterprise2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update enterprise2 not found response a status code equal to that given
func (o *IdentityAccessManagementUpdateEnterprise2NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the identity access management update enterprise2 not found response
func (o *IdentityAccessManagementUpdateEnterprise2NotFound) Code() int {
	return 404
}

func (o *IdentityAccessManagementUpdateEnterprise2NotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2NotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2NotFound) String() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2NotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2NotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateEnterprise2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateEnterprise2Conflict creates a IdentityAccessManagementUpdateEnterprise2Conflict with default headers values
func NewIdentityAccessManagementUpdateEnterprise2Conflict() *IdentityAccessManagementUpdateEnterprise2Conflict {
	return &IdentityAccessManagementUpdateEnterprise2Conflict{}
}

/*
IdentityAccessManagementUpdateEnterprise2Conflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing enterprise record.
*/
type IdentityAccessManagementUpdateEnterprise2Conflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update enterprise2 conflict response has a 2xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Conflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update enterprise2 conflict response has a 3xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Conflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update enterprise2 conflict response has a 4xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Conflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update enterprise2 conflict response has a 5xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Conflict) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update enterprise2 conflict response a status code equal to that given
func (o *IdentityAccessManagementUpdateEnterprise2Conflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the identity access management update enterprise2 conflict response
func (o *IdentityAccessManagementUpdateEnterprise2Conflict) Code() int {
	return 409
}

func (o *IdentityAccessManagementUpdateEnterprise2Conflict) Error() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2Conflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2Conflict) String() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2Conflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2Conflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateEnterprise2Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateEnterprise2InternalServerError creates a IdentityAccessManagementUpdateEnterprise2InternalServerError with default headers values
func NewIdentityAccessManagementUpdateEnterprise2InternalServerError() *IdentityAccessManagementUpdateEnterprise2InternalServerError {
	return &IdentityAccessManagementUpdateEnterprise2InternalServerError{}
}

/*
IdentityAccessManagementUpdateEnterprise2InternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type IdentityAccessManagementUpdateEnterprise2InternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update enterprise2 internal server error response has a 2xx status code
func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update enterprise2 internal server error response has a 3xx status code
func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update enterprise2 internal server error response has a 4xx status code
func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update enterprise2 internal server error response has a 5xx status code
func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update enterprise2 internal server error response a status code equal to that given
func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the identity access management update enterprise2 internal server error response
func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) Code() int {
	return 500
}

func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2InternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2InternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateEnterprise2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateEnterprise2GatewayTimeout creates a IdentityAccessManagementUpdateEnterprise2GatewayTimeout with default headers values
func NewIdentityAccessManagementUpdateEnterprise2GatewayTimeout() *IdentityAccessManagementUpdateEnterprise2GatewayTimeout {
	return &IdentityAccessManagementUpdateEnterprise2GatewayTimeout{}
}

/*
IdentityAccessManagementUpdateEnterprise2GatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type IdentityAccessManagementUpdateEnterprise2GatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update enterprise2 gateway timeout response has a 2xx status code
func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update enterprise2 gateway timeout response has a 3xx status code
func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update enterprise2 gateway timeout response has a 4xx status code
func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update enterprise2 gateway timeout response has a 5xx status code
func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update enterprise2 gateway timeout response a status code equal to that given
func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the identity access management update enterprise2 gateway timeout response
func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) Code() int {
	return 504
}

func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2GatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] identityAccessManagementUpdateEnterprise2GatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateEnterprise2GatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateEnterprise2Default creates a IdentityAccessManagementUpdateEnterprise2Default with default headers values
func NewIdentityAccessManagementUpdateEnterprise2Default(code int) *IdentityAccessManagementUpdateEnterprise2Default {
	return &IdentityAccessManagementUpdateEnterprise2Default{
		_statusCode: code,
	}
}

/*
IdentityAccessManagementUpdateEnterprise2Default describes a response with status code -1, with default header values.

An unexpected error response.
*/
type IdentityAccessManagementUpdateEnterprise2Default struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this identity access management update enterprise2 default response has a 2xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Default) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this identity access management update enterprise2 default response has a 3xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Default) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this identity access management update enterprise2 default response has a 4xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Default) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this identity access management update enterprise2 default response has a 5xx status code
func (o *IdentityAccessManagementUpdateEnterprise2Default) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this identity access management update enterprise2 default response a status code equal to that given
func (o *IdentityAccessManagementUpdateEnterprise2Default) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the identity access management update enterprise2 default response
func (o *IdentityAccessManagementUpdateEnterprise2Default) Code() int {
	return o._statusCode
}

func (o *IdentityAccessManagementUpdateEnterprise2Default) Error() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] IdentityAccessManagement_UpdateEnterprise2 default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2Default) String() string {
	return fmt.Sprintf("[PUT /v1/enterprises/id/{id}][%d] IdentityAccessManagement_UpdateEnterprise2 default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateEnterprise2Default) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateEnterprise2Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
IdentityAccessManagementUpdateEnterprise2Body Enterprise detail
//
// Enterprise meta data
swagger:model IdentityAccessManagementUpdateEnterprise2Body
*/
type IdentityAccessManagementUpdateEnterprise2Body struct {

	// hubspot Id
	HubspotID string `json:"HubspotId,omitempty"`

	// sfdc Id
	SfdcID string `json:"SfdcId,omitempty"`

	// Enterprise settings for API Token expiry to be set in seconds
	APITokenExpiryInSeconds int64 `json:"apiTokenExpiryInSeconds,omitempty"`

	// enterprise level key-value pairs
	Attributes map[string]string `json:"attributes,omitempty"`

	// Azure subscription ID tied to this enterprise
	AzureSubID string `json:"azureSubId,omitempty"`

	// List of all child enterprises
	ChildEnterprises []*models.EnterpriseSummary `json:"childEnterprises"`

	// zedcontrol host
	ControllerHostURL string `json:"controllerHostURL,omitempty"`

	// Detailed description of the enterprise
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// Perform authorization using parent enterprise
	InheritAuthFromParent bool `json:"inheritAuthFromParent,omitempty"`

	// User defined name of the enterprise. Once enterprise is created, name can’t be changed
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// string id = 100;
	// string name = 101;
	//
	// Parent enterprise ID
	// Pattern: [0-9A-Za-z_=-]{28}
	ParentEntpID string `json:"parentEntpId,omitempty"`

	// Policy version list
	PolicyList *models.PolicyVersionList `json:"policyList,omitempty"`

	// List of realms associated with the enterprise
	Realms []string `json:"realms"`

	// system defined info
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// Enterprise state
	State *models.EnterpriseState `json:"state,omitempty"`

	// Enable / Disable streaming of events to 3rd party end point
	StreamEvents *models.DataStream `json:"streamEvents,omitempty"`

	// User defined title for the enterprise. Title can be changed any time
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title *string `json:"title"`

	// Enterprise settings to enforce TOTP
	TotpSettings *models.TOTPSettings `json:"totpSettings,omitempty"`

	// Enterprise type
	Type *models.EnterpriseType `json:"type,omitempty"`
}

// Validate validates this identity access management update enterprise2 body
func (o *IdentityAccessManagementUpdateEnterprise2Body) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChildEnterprises(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParentEntpID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePolicyList(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStreamEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotpSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateChildEnterprises(formats strfmt.Registry) error {
	if swag.IsZero(o.ChildEnterprises) { // not required
		return nil
	}

	for i := 0; i < len(o.ChildEnterprises); i++ {
		if swag.IsZero(o.ChildEnterprises[i]) { // not required
			continue
		}

		if o.ChildEnterprises[i] != nil {
			if err := o.ChildEnterprises[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "childEnterprises" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "childEnterprises" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateParentEntpID(formats strfmt.Registry) error {
	if swag.IsZero(o.ParentEntpID) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"parentEntpId", "body", o.ParentEntpID, `[0-9A-Za-z_=-]{28}`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validatePolicyList(formats strfmt.Registry) error {
	if swag.IsZero(o.PolicyList) { // not required
		return nil
	}

	if o.PolicyList != nil {
		if err := o.PolicyList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "policyList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "policyList")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	if o.State != nil {
		if err := o.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateStreamEvents(formats strfmt.Registry) error {
	if swag.IsZero(o.StreamEvents) { // not required
		return nil
	}

	if o.StreamEvents != nil {
		if err := o.StreamEvents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "streamEvents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "streamEvents")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateTotpSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.TotpSettings) { // not required
		return nil
	}

	if o.TotpSettings != nil {
		if err := o.TotpSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "totpSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "totpSettings")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this identity access management update enterprise2 body based on the context it is used
func (o *IdentityAccessManagementUpdateEnterprise2Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateChildEnterprises(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePolicyList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateStreamEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTotpSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) contextValidateChildEnterprises(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ChildEnterprises); i++ {

		if o.ChildEnterprises[i] != nil {

			if swag.IsZero(o.ChildEnterprises[i]) { // not required
				return nil
			}

			if err := o.ChildEnterprises[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "childEnterprises" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "childEnterprises" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) contextValidatePolicyList(ctx context.Context, formats strfmt.Registry) error {

	if o.PolicyList != nil {

		if swag.IsZero(o.PolicyList) { // not required
			return nil
		}

		if err := o.PolicyList.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "policyList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "policyList")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {

		if swag.IsZero(o.Revision) { // not required
			return nil
		}

		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if o.State != nil {

		if swag.IsZero(o.State) { // not required
			return nil
		}

		if err := o.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) contextValidateStreamEvents(ctx context.Context, formats strfmt.Registry) error {

	if o.StreamEvents != nil {

		if swag.IsZero(o.StreamEvents) { // not required
			return nil
		}

		if err := o.StreamEvents.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "streamEvents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "streamEvents")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) contextValidateTotpSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.TotpSettings != nil {

		if swag.IsZero(o.TotpSettings) { // not required
			return nil
		}

		if err := o.TotpSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "totpSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "totpSettings")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateEnterprise2Body) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {

		if swag.IsZero(o.Type) { // not required
			return nil
		}

		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IdentityAccessManagementUpdateEnterprise2Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IdentityAccessManagementUpdateEnterprise2Body) UnmarshalBinary(b []byte) error {
	var res IdentityAccessManagementUpdateEnterprise2Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
