// Code generated by go-swagger; DO NOT EDIT.

package identity_access_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/v2/models"
)

// IdentityAccessManagementUpdateAuthProfileReader is a Reader for the IdentityAccessManagementUpdateAuthProfile structure.
type IdentityAccessManagementUpdateAuthProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IdentityAccessManagementUpdateAuthProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIdentityAccessManagementUpdateAuthProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewIdentityAccessManagementUpdateAuthProfileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewIdentityAccessManagementUpdateAuthProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIdentityAccessManagementUpdateAuthProfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewIdentityAccessManagementUpdateAuthProfileConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIdentityAccessManagementUpdateAuthProfileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewIdentityAccessManagementUpdateAuthProfileGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewIdentityAccessManagementUpdateAuthProfileDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIdentityAccessManagementUpdateAuthProfileOK creates a IdentityAccessManagementUpdateAuthProfileOK with default headers values
func NewIdentityAccessManagementUpdateAuthProfileOK() *IdentityAccessManagementUpdateAuthProfileOK {
	return &IdentityAccessManagementUpdateAuthProfileOK{}
}

/*
IdentityAccessManagementUpdateAuthProfileOK describes a response with status code 200, with default header values.

A successful response.
*/
type IdentityAccessManagementUpdateAuthProfileOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update auth profile o k response has a 2xx status code
func (o *IdentityAccessManagementUpdateAuthProfileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this identity access management update auth profile o k response has a 3xx status code
func (o *IdentityAccessManagementUpdateAuthProfileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update auth profile o k response has a 4xx status code
func (o *IdentityAccessManagementUpdateAuthProfileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update auth profile o k response has a 5xx status code
func (o *IdentityAccessManagementUpdateAuthProfileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update auth profile o k response a status code equal to that given
func (o *IdentityAccessManagementUpdateAuthProfileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the identity access management update auth profile o k response
func (o *IdentityAccessManagementUpdateAuthProfileOK) Code() int {
	return 200
}

func (o *IdentityAccessManagementUpdateAuthProfileOK) Error() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileOK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileOK) String() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileOK  %+v", 200, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateAuthProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateAuthProfileUnauthorized creates a IdentityAccessManagementUpdateAuthProfileUnauthorized with default headers values
func NewIdentityAccessManagementUpdateAuthProfileUnauthorized() *IdentityAccessManagementUpdateAuthProfileUnauthorized {
	return &IdentityAccessManagementUpdateAuthProfileUnauthorized{}
}

/*
IdentityAccessManagementUpdateAuthProfileUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type IdentityAccessManagementUpdateAuthProfileUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update auth profile unauthorized response has a 2xx status code
func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update auth profile unauthorized response has a 3xx status code
func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update auth profile unauthorized response has a 4xx status code
func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update auth profile unauthorized response has a 5xx status code
func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update auth profile unauthorized response a status code equal to that given
func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the identity access management update auth profile unauthorized response
func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) Code() int {
	return 401
}

func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileUnauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileUnauthorized  %+v", 401, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateAuthProfileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateAuthProfileForbidden creates a IdentityAccessManagementUpdateAuthProfileForbidden with default headers values
func NewIdentityAccessManagementUpdateAuthProfileForbidden() *IdentityAccessManagementUpdateAuthProfileForbidden {
	return &IdentityAccessManagementUpdateAuthProfileForbidden{}
}

/*
IdentityAccessManagementUpdateAuthProfileForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have edge-node level access permission for the operation or does not have access scope to the project.
*/
type IdentityAccessManagementUpdateAuthProfileForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update auth profile forbidden response has a 2xx status code
func (o *IdentityAccessManagementUpdateAuthProfileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update auth profile forbidden response has a 3xx status code
func (o *IdentityAccessManagementUpdateAuthProfileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update auth profile forbidden response has a 4xx status code
func (o *IdentityAccessManagementUpdateAuthProfileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update auth profile forbidden response has a 5xx status code
func (o *IdentityAccessManagementUpdateAuthProfileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update auth profile forbidden response a status code equal to that given
func (o *IdentityAccessManagementUpdateAuthProfileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the identity access management update auth profile forbidden response
func (o *IdentityAccessManagementUpdateAuthProfileForbidden) Code() int {
	return 403
}

func (o *IdentityAccessManagementUpdateAuthProfileForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileForbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileForbidden  %+v", 403, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateAuthProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateAuthProfileNotFound creates a IdentityAccessManagementUpdateAuthProfileNotFound with default headers values
func NewIdentityAccessManagementUpdateAuthProfileNotFound() *IdentityAccessManagementUpdateAuthProfileNotFound {
	return &IdentityAccessManagementUpdateAuthProfileNotFound{}
}

/*
IdentityAccessManagementUpdateAuthProfileNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type IdentityAccessManagementUpdateAuthProfileNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update auth profile not found response has a 2xx status code
func (o *IdentityAccessManagementUpdateAuthProfileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update auth profile not found response has a 3xx status code
func (o *IdentityAccessManagementUpdateAuthProfileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update auth profile not found response has a 4xx status code
func (o *IdentityAccessManagementUpdateAuthProfileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update auth profile not found response has a 5xx status code
func (o *IdentityAccessManagementUpdateAuthProfileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update auth profile not found response a status code equal to that given
func (o *IdentityAccessManagementUpdateAuthProfileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the identity access management update auth profile not found response
func (o *IdentityAccessManagementUpdateAuthProfileNotFound) Code() int {
	return 404
}

func (o *IdentityAccessManagementUpdateAuthProfileNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileNotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileNotFound  %+v", 404, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateAuthProfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateAuthProfileConflict creates a IdentityAccessManagementUpdateAuthProfileConflict with default headers values
func NewIdentityAccessManagementUpdateAuthProfileConflict() *IdentityAccessManagementUpdateAuthProfileConflict {
	return &IdentityAccessManagementUpdateAuthProfileConflict{}
}

/*
IdentityAccessManagementUpdateAuthProfileConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this operation will conflict with an already existing AAA profile record.
*/
type IdentityAccessManagementUpdateAuthProfileConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update auth profile conflict response has a 2xx status code
func (o *IdentityAccessManagementUpdateAuthProfileConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update auth profile conflict response has a 3xx status code
func (o *IdentityAccessManagementUpdateAuthProfileConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update auth profile conflict response has a 4xx status code
func (o *IdentityAccessManagementUpdateAuthProfileConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this identity access management update auth profile conflict response has a 5xx status code
func (o *IdentityAccessManagementUpdateAuthProfileConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this identity access management update auth profile conflict response a status code equal to that given
func (o *IdentityAccessManagementUpdateAuthProfileConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the identity access management update auth profile conflict response
func (o *IdentityAccessManagementUpdateAuthProfileConflict) Code() int {
	return 409
}

func (o *IdentityAccessManagementUpdateAuthProfileConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileConflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileConflict) String() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileConflict  %+v", 409, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateAuthProfileConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateAuthProfileInternalServerError creates a IdentityAccessManagementUpdateAuthProfileInternalServerError with default headers values
func NewIdentityAccessManagementUpdateAuthProfileInternalServerError() *IdentityAccessManagementUpdateAuthProfileInternalServerError {
	return &IdentityAccessManagementUpdateAuthProfileInternalServerError{}
}

/*
IdentityAccessManagementUpdateAuthProfileInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type IdentityAccessManagementUpdateAuthProfileInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update auth profile internal server error response has a 2xx status code
func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update auth profile internal server error response has a 3xx status code
func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update auth profile internal server error response has a 4xx status code
func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update auth profile internal server error response has a 5xx status code
func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update auth profile internal server error response a status code equal to that given
func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the identity access management update auth profile internal server error response
func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) Code() int {
	return 500
}

func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileInternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileInternalServerError  %+v", 500, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateAuthProfileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateAuthProfileGatewayTimeout creates a IdentityAccessManagementUpdateAuthProfileGatewayTimeout with default headers values
func NewIdentityAccessManagementUpdateAuthProfileGatewayTimeout() *IdentityAccessManagementUpdateAuthProfileGatewayTimeout {
	return &IdentityAccessManagementUpdateAuthProfileGatewayTimeout{}
}

/*
IdentityAccessManagementUpdateAuthProfileGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type IdentityAccessManagementUpdateAuthProfileGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this identity access management update auth profile gateway timeout response has a 2xx status code
func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this identity access management update auth profile gateway timeout response has a 3xx status code
func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this identity access management update auth profile gateway timeout response has a 4xx status code
func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this identity access management update auth profile gateway timeout response has a 5xx status code
func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this identity access management update auth profile gateway timeout response a status code equal to that given
func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the identity access management update auth profile gateway timeout response
func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) Code() int {
	return 504
}

func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileGatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] identityAccessManagementUpdateAuthProfileGatewayTimeout  %+v", 504, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateAuthProfileGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIdentityAccessManagementUpdateAuthProfileDefault creates a IdentityAccessManagementUpdateAuthProfileDefault with default headers values
func NewIdentityAccessManagementUpdateAuthProfileDefault(code int) *IdentityAccessManagementUpdateAuthProfileDefault {
	return &IdentityAccessManagementUpdateAuthProfileDefault{
		_statusCode: code,
	}
}

/*
IdentityAccessManagementUpdateAuthProfileDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type IdentityAccessManagementUpdateAuthProfileDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this identity access management update auth profile default response has a 2xx status code
func (o *IdentityAccessManagementUpdateAuthProfileDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this identity access management update auth profile default response has a 3xx status code
func (o *IdentityAccessManagementUpdateAuthProfileDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this identity access management update auth profile default response has a 4xx status code
func (o *IdentityAccessManagementUpdateAuthProfileDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this identity access management update auth profile default response has a 5xx status code
func (o *IdentityAccessManagementUpdateAuthProfileDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this identity access management update auth profile default response a status code equal to that given
func (o *IdentityAccessManagementUpdateAuthProfileDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the identity access management update auth profile default response
func (o *IdentityAccessManagementUpdateAuthProfileDefault) Code() int {
	return o._statusCode
}

func (o *IdentityAccessManagementUpdateAuthProfileDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] IdentityAccessManagement_UpdateAuthProfile default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileDefault) String() string {
	return fmt.Sprintf("[PUT /v1/authorization/profiles/id/{id}][%d] IdentityAccessManagement_UpdateAuthProfile default  %+v", o._statusCode, o.Payload)
}

func (o *IdentityAccessManagementUpdateAuthProfileDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *IdentityAccessManagementUpdateAuthProfileDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
IdentityAccessManagementUpdateAuthProfileBody Authorization profile detail
//
// Authorization profile  meta data
swagger:model IdentityAccessManagementUpdateAuthProfileBody
*/
type IdentityAccessManagementUpdateAuthProfileBody struct {

	// Mark this profile as active. Only one profile can be active in a given enterprise
	Active bool `json:"active,omitempty"`

	// Default Role ID to associate with the profile
	// Required: true
	// Pattern: [0-9A-Za-z_=-]{28}
	DefaultRoleID *string `json:"defaultRoleId"`

	// Detailed description of the profile
	// Max Length: 256
	Description string `json:"description,omitempty"`

	// Do not automatically create new users if this is set
	DisableAutoUserCreate bool `json:"disableAutoUserCreate,omitempty"`

	// Parent enterprise ID of the authorization profile
	// Pattern: [0-9A-Za-z_=-]{28}
	EnterpriseID string `json:"enterpriseId,omitempty"`

	// User defined name of the profile. Profile name is unique within an enterprise. Name can't be changed once created
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	Name *string `json:"name"`

	// Oauth profile configuration details
	OauthProfile *models.OAUTHProfile `json:"oauthProfile,omitempty"`

	// password profile
	PasswordProfile *models.PasswordProfile `json:"passwordProfile,omitempty"`

	// Authorization profile type
	ProfileType *models.AuthProfileType `json:"profileType,omitempty"`

	// system defined info
	// Read Only: true
	Revision *models.ObjectRevision `json:"revision,omitempty"`

	// test only
	TestOnly bool `json:"testOnly,omitempty"`

	// User defined title for the profile. Title can be changed anytime
	// Required: true
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+
	Title *string `json:"title"`

	// Type of the profile
	Type *models.AuthType `json:"type,omitempty"`
}

// Validate validates this identity access management update auth profile body
func (o *IdentityAccessManagementUpdateAuthProfileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDefaultRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnterpriseID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOauthProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePasswordProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfileType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateDefaultRoleID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"defaultRoleId", "body", o.DefaultRoleID); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"defaultRoleId", "body", *o.DefaultRoleID, `[0-9A-Za-z_=-]{28}`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("body"+"."+"description", "body", o.Description, 256); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateEnterpriseID(formats strfmt.Registry) error {
	if swag.IsZero(o.EnterpriseID) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"enterpriseId", "body", o.EnterpriseID, `[0-9A-Za-z_=-]{28}`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"name", "body", *o.Name, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"name", "body", *o.Name, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"name", "body", *o.Name, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateOauthProfile(formats strfmt.Registry) error {
	if swag.IsZero(o.OauthProfile) { // not required
		return nil
	}

	if o.OauthProfile != nil {
		if err := o.OauthProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "oauthProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "oauthProfile")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validatePasswordProfile(formats strfmt.Registry) error {
	if swag.IsZero(o.PasswordProfile) { // not required
		return nil
	}

	if o.PasswordProfile != nil {
		if err := o.PasswordProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "passwordProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "passwordProfile")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateProfileType(formats strfmt.Registry) error {
	if swag.IsZero(o.ProfileType) { // not required
		return nil
	}

	if o.ProfileType != nil {
		if err := o.ProfileType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "profileType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "profileType")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateRevision(formats strfmt.Registry) error {
	if swag.IsZero(o.Revision) { // not required
		return nil
	}

	if o.Revision != nil {
		if err := o.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"title", "body", *o.Title, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"title", "body", *o.Title, 256); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"title", "body", *o.Title, `[a-zA-Z0-9]+[a-zA-Z0-9!-~ ]+`); err != nil {
		return err
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this identity access management update auth profile body based on the context it is used
func (o *IdentityAccessManagementUpdateAuthProfileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOauthProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePasswordProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateProfileType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) contextValidateOauthProfile(ctx context.Context, formats strfmt.Registry) error {

	if o.OauthProfile != nil {

		if swag.IsZero(o.OauthProfile) { // not required
			return nil
		}

		if err := o.OauthProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "oauthProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "oauthProfile")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) contextValidatePasswordProfile(ctx context.Context, formats strfmt.Registry) error {

	if o.PasswordProfile != nil {

		if swag.IsZero(o.PasswordProfile) { // not required
			return nil
		}

		if err := o.PasswordProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "passwordProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "passwordProfile")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) contextValidateProfileType(ctx context.Context, formats strfmt.Registry) error {

	if o.ProfileType != nil {

		if swag.IsZero(o.ProfileType) { // not required
			return nil
		}

		if err := o.ProfileType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "profileType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "profileType")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if o.Revision != nil {

		if swag.IsZero(o.Revision) { // not required
			return nil
		}

		if err := o.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "revision")
			}
			return err
		}
	}

	return nil
}

func (o *IdentityAccessManagementUpdateAuthProfileBody) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {

		if swag.IsZero(o.Type) { // not required
			return nil
		}

		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IdentityAccessManagementUpdateAuthProfileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IdentityAccessManagementUpdateAuthProfileBody) UnmarshalBinary(b []byte) error {
	var res IdentityAccessManagementUpdateAuthProfileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
