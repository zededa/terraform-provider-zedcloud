// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/zededa/terraform-provider-zedcloud/v2/models"
)

// UpdateReader is a Reader for the Update structure.
type UpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewUpdatePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewUpdateGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateOK creates a UpdateOK with default headers values
func NewUpdateOK() *UpdateOK {
	return &UpdateOK{}
}

/*
UpdateOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateOK struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster o k response has a 2xx status code
func (o *UpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this edge node cluster configuration update cluster o k response has a 3xx status code
func (o *UpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster o k response has a 4xx status code
func (o *UpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge node cluster configuration update cluster o k response has a 5xx status code
func (o *UpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this edge node cluster configuration update cluster o k response a status code equal to that given
func (o *UpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the edge node cluster configuration update cluster o k response
func (o *UpdateOK) Code() int {
	return 200
}

func (o *UpdateOK) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateOK  %+v", 200, o.Payload)
}

func (o *UpdateOK) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateOK  %+v", 200, o.Payload)
}

func (o *UpdateOK) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBadRequest creates a UpdateBadRequest with default headers values
func NewUpdateBadRequest() *UpdateBadRequest {
	return &UpdateBadRequest{}
}

/*
UpdateBadRequest describes a response with status code 400, with default header values.

Bad Request. The API gateway did not process the request because of missing parameter or invalid value of parameters.
*/
type UpdateBadRequest struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster bad request response has a 2xx status code
func (o *UpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge node cluster configuration update cluster bad request response has a 3xx status code
func (o *UpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster bad request response has a 4xx status code
func (o *UpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge node cluster configuration update cluster bad request response has a 5xx status code
func (o *UpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this edge node cluster configuration update cluster bad request response a status code equal to that given
func (o *UpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the edge node cluster configuration update cluster bad request response
func (o *UpdateBadRequest) Code() int {
	return 400
}

func (o *UpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBadRequest) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnauthorized creates a UpdateUnauthorized with default headers values
func NewUpdateUnauthorized() *UpdateUnauthorized {
	return &UpdateUnauthorized{}
}

/*
UpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type UpdateUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster unauthorized response has a 2xx status code
func (o *UpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge node cluster configuration update cluster unauthorized response has a 3xx status code
func (o *UpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster unauthorized response has a 4xx status code
func (o *UpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge node cluster configuration update cluster unauthorized response has a 5xx status code
func (o *UpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this edge node cluster configuration update cluster unauthorized response a status code equal to that given
func (o *UpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the edge node cluster configuration update cluster unauthorized response
func (o *UpdateUnauthorized) Code() int {
	return 401
}

func (o *UpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateForbidden creates a UpdateForbidden with default headers values
func NewUpdateForbidden() *UpdateForbidden {
	return &UpdateForbidden{}
}

/*
UpdateForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have application level access permission for the operation or does not have access scope to the project.
*/
type UpdateForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster forbidden response has a 2xx status code
func (o *UpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge node cluster configuration update cluster forbidden response has a 3xx status code
func (o *UpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster forbidden response has a 4xx status code
func (o *UpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge node cluster configuration update cluster forbidden response has a 5xx status code
func (o *UpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this edge node cluster configuration update cluster forbidden response a status code equal to that given
func (o *UpdateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the edge node cluster configuration update cluster forbidden response
func (o *UpdateForbidden) Code() int {
	return 403
}

func (o *UpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateForbidden  %+v", 403, o.Payload)
}

func (o *UpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateForbidden  %+v", 403, o.Payload)
}

func (o *UpdateForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNotFound creates a UpdateNotFound with default headers values
func NewUpdateNotFound() *UpdateNotFound {
	return &UpdateNotFound{}
}

/*
UpdateNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type UpdateNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster not found response has a 2xx status code
func (o *UpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge node cluster configuration update cluster not found response has a 3xx status code
func (o *UpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster not found response has a 4xx status code
func (o *UpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge node cluster configuration update cluster not found response has a 5xx status code
func (o *UpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this edge node cluster configuration update cluster not found response a status code equal to that given
func (o *UpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the edge node cluster configuration update cluster not found response
func (o *UpdateNotFound) Code() int {
	return 404
}

func (o *UpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateNotFound  %+v", 404, o.Payload)
}

func (o *UpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateNotFound  %+v", 404, o.Payload)
}

func (o *UpdateNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConflict creates a UpdateConflict with default headers values
func NewUpdateConflict() *UpdateConflict {
	return &UpdateConflict{}
}

/*
UpdateConflict describes a response with status code 409, with default header values.

Conflict. The API gateway did not process the request because this edge-node cluster record will conflict with an already existing edge-node cluster record.
*/
type UpdateConflict struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster conflict response has a 2xx status code
func (o *UpdateConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge node cluster configuration update cluster conflict response has a 3xx status code
func (o *UpdateConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster conflict response has a 4xx status code
func (o *UpdateConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge node cluster configuration update cluster conflict response has a 5xx status code
func (o *UpdateConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this edge node cluster configuration update cluster conflict response a status code equal to that given
func (o *UpdateConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the edge node cluster configuration update cluster conflict response
func (o *UpdateConflict) Code() int {
	return 409
}

func (o *UpdateConflict) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateConflict  %+v", 409, o.Payload)
}

func (o *UpdateConflict) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateConflict  %+v", 409, o.Payload)
}

func (o *UpdateConflict) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePreconditionFailed creates a UpdatePreconditionFailed with default headers values
func NewUpdatePreconditionFailed() *UpdatePreconditionFailed {
	return &UpdatePreconditionFailed{}
}

/*
UpdatePreconditionFailed describes a response with status code 412, with default header values.

Precondition failed. Some of preconditions haven't been met to start request processing.
*/
type UpdatePreconditionFailed struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster precondition failed response has a 2xx status code
func (o *UpdatePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge node cluster configuration update cluster precondition failed response has a 3xx status code
func (o *UpdatePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster precondition failed response has a 4xx status code
func (o *UpdatePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this edge node cluster configuration update cluster precondition failed response has a 5xx status code
func (o *UpdatePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this edge node cluster configuration update cluster precondition failed response a status code equal to that given
func (o *UpdatePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the edge node cluster configuration update cluster precondition failed response
func (o *UpdatePreconditionFailed) Code() int {
	return 412
}

func (o *UpdatePreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdatePreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdatePreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdatePreconditionFailed) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdatePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInternalServerError creates a UpdateInternalServerError with default headers values
func NewUpdateInternalServerError() *UpdateInternalServerError {
	return &UpdateInternalServerError{}
}

/*
UpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type UpdateInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster internal server error response has a 2xx status code
func (o *UpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge node cluster configuration update cluster internal server error response has a 3xx status code
func (o *UpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster internal server error response has a 4xx status code
func (o *UpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge node cluster configuration update cluster internal server error response has a 5xx status code
func (o *UpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this edge node cluster configuration update cluster internal server error response a status code equal to that given
func (o *UpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the edge node cluster configuration update cluster internal server error response
func (o *UpdateInternalServerError) Code() int {
	return 500
}

func (o *UpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGatewayTimeout creates a UpdateGatewayTimeout with default headers values
func NewUpdateGatewayTimeout() *UpdateGatewayTimeout {
	return &UpdateGatewayTimeout{}
}

/*
UpdateGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type UpdateGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this edge node cluster configuration update cluster gateway timeout response has a 2xx status code
func (o *UpdateGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this edge node cluster configuration update cluster gateway timeout response has a 3xx status code
func (o *UpdateGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this edge node cluster configuration update cluster gateway timeout response has a 4xx status code
func (o *UpdateGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this edge node cluster configuration update cluster gateway timeout response has a 5xx status code
func (o *UpdateGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this edge node cluster configuration update cluster gateway timeout response a status code equal to that given
func (o *UpdateGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the edge node cluster configuration update cluster gateway timeout response
func (o *UpdateGatewayTimeout) Code() int {
	return 504
}

func (o *UpdateGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *UpdateGatewayTimeout) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] edgeNodeConfigurationUpdateGatewayTimeout  %+v", 504, o.Payload)
}

func (o *UpdateGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *UpdateGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDefault creates a UpdateDefault with default headers values
func NewUpdateDefault(code int) *UpdateDefault {
	return &UpdateDefault{
		_statusCode: code,
	}
}

/*
UpdateDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpdateDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this edge node cluster configuration update cluster default response has a 2xx status code
func (o *UpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this edge node cluster configuration update cluster default response has a 3xx status code
func (o *UpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this edge node cluster configuration update cluster default response has a 4xx status code
func (o *UpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this edge node cluster configuration update cluster default response has a 5xx status code
func (o *UpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this edge node cluster configuration update cluster default response a status code equal to that given
func (o *UpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the edge node cluster configuration update cluster default response
func (o *UpdateDefault) Code() int {
	return o._statusCode
}

func (o *UpdateDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] _Update default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDefault) String() string {
	return fmt.Sprintf("[PUT /v1/cluster/id/{id}][%d] _Update default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *UpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateBody  detail
//
//  detail
swagger:model UpdateBody
*/
type UpdateBody struct {

	// A cluster prefix
	Prefix string `json:"clusterPrefix,omitempty"`

	// Detailed description of the cluster
	Description string `json:"description,omitempty"`

	// User defined name of the cluster, unique across the enterprise. Once cluster is created, name can’t be changed
	// Required: true
	Name *string `json:"name"`

	// A list of nodes in the cluster
	// Required: true
	Nodes []*models.ClusterNode `json:"nodes"`

	// Foreign key to the project
	// Required: true
	// Pattern: [0-9A-Za-z-]+
	ProjectID *string `json:"projectId"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// User defined title of the cluster. Title can be changed at any time
	Title string `json:"title,omitempty"`
}

// Validate validates this edge node cluster configuration update cluster body
func (o *UpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *UpdateBody) validateNodes(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"nodes", "body", o.Nodes); err != nil {
		return err
	}

	for i := 0; i < len(o.Nodes); i++ {
		if swag.IsZero(o.Nodes[i]) { // not required
			continue
		}

		if o.Nodes[i] != nil {
			if err := o.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UpdateBody) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"projectId", "body", o.ProjectID); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"projectId", "body", *o.ProjectID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this edge node cluster configuration update cluster body based on the context it is used
func (o *UpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateNodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateBody) contextValidateNodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Nodes); i++ {

		if o.Nodes[i] != nil {

			if swag.IsZero(o.Nodes[i]) { // not required
				return nil
			}

			if err := o.Nodes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "nodes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateBody) UnmarshalBinary(b []byte) error {
	var res UpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
