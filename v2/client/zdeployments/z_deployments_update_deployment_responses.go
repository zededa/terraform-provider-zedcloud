// Code generated by go-swagger; DO NOT EDIT.

package z_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/zededa/terraform-provider-zedcloud/v2/models"
)

// ZDeploymentsUpdateDeploymentReader is a Reader for the ZDeploymentsUpdateDeployment structure.
type ZDeploymentsUpdateDeploymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ZDeploymentsUpdateDeploymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewZDeploymentsUpdateDeploymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewZDeploymentsUpdateDeploymentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewZDeploymentsUpdateDeploymentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewZDeploymentsUpdateDeploymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewZDeploymentsUpdateDeploymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewZDeploymentsUpdateDeploymentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewZDeploymentsUpdateDeploymentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewZDeploymentsUpdateDeploymentOK creates a ZDeploymentsUpdateDeploymentOK with default headers values
func NewZDeploymentsUpdateDeploymentOK() *ZDeploymentsUpdateDeploymentOK {
	return &ZDeploymentsUpdateDeploymentOK{}
}

/*
ZDeploymentsUpdateDeploymentOK describes a response with status code 200, with default header values.

A successful response.
*/
type ZDeploymentsUpdateDeploymentOK struct {
	Payload *models.ZserviceDeploymentUpdateResponse
}

// IsSuccess returns true when this z deployments update deployment o k response has a 2xx status code
func (o *ZDeploymentsUpdateDeploymentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this z deployments update deployment o k response has a 3xx status code
func (o *ZDeploymentsUpdateDeploymentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments update deployment o k response has a 4xx status code
func (o *ZDeploymentsUpdateDeploymentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this z deployments update deployment o k response has a 5xx status code
func (o *ZDeploymentsUpdateDeploymentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this z deployments update deployment o k response a status code equal to that given
func (o *ZDeploymentsUpdateDeploymentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the z deployments update deployment o k response
func (o *ZDeploymentsUpdateDeploymentOK) Code() int {
	return 200
}

func (o *ZDeploymentsUpdateDeploymentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentOK %s", 200, payload)
}

func (o *ZDeploymentsUpdateDeploymentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentOK %s", 200, payload)
}

func (o *ZDeploymentsUpdateDeploymentOK) GetPayload() *models.ZserviceDeploymentUpdateResponse {
	return o.Payload
}

func (o *ZDeploymentsUpdateDeploymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZserviceDeploymentUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsUpdateDeploymentUnauthorized creates a ZDeploymentsUpdateDeploymentUnauthorized with default headers values
func NewZDeploymentsUpdateDeploymentUnauthorized() *ZDeploymentsUpdateDeploymentUnauthorized {
	return &ZDeploymentsUpdateDeploymentUnauthorized{}
}

/*
ZDeploymentsUpdateDeploymentUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type ZDeploymentsUpdateDeploymentUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments update deployment unauthorized response has a 2xx status code
func (o *ZDeploymentsUpdateDeploymentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments update deployment unauthorized response has a 3xx status code
func (o *ZDeploymentsUpdateDeploymentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments update deployment unauthorized response has a 4xx status code
func (o *ZDeploymentsUpdateDeploymentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this z deployments update deployment unauthorized response has a 5xx status code
func (o *ZDeploymentsUpdateDeploymentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this z deployments update deployment unauthorized response a status code equal to that given
func (o *ZDeploymentsUpdateDeploymentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the z deployments update deployment unauthorized response
func (o *ZDeploymentsUpdateDeploymentUnauthorized) Code() int {
	return 401
}

func (o *ZDeploymentsUpdateDeploymentUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentUnauthorized %s", 401, payload)
}

func (o *ZDeploymentsUpdateDeploymentUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentUnauthorized %s", 401, payload)
}

func (o *ZDeploymentsUpdateDeploymentUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsUpdateDeploymentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsUpdateDeploymentForbidden creates a ZDeploymentsUpdateDeploymentForbidden with default headers values
func NewZDeploymentsUpdateDeploymentForbidden() *ZDeploymentsUpdateDeploymentForbidden {
	return &ZDeploymentsUpdateDeploymentForbidden{}
}

/*
ZDeploymentsUpdateDeploymentForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have application level access permission for the operation or does not have access scope to the project.
*/
type ZDeploymentsUpdateDeploymentForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments update deployment forbidden response has a 2xx status code
func (o *ZDeploymentsUpdateDeploymentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments update deployment forbidden response has a 3xx status code
func (o *ZDeploymentsUpdateDeploymentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments update deployment forbidden response has a 4xx status code
func (o *ZDeploymentsUpdateDeploymentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this z deployments update deployment forbidden response has a 5xx status code
func (o *ZDeploymentsUpdateDeploymentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this z deployments update deployment forbidden response a status code equal to that given
func (o *ZDeploymentsUpdateDeploymentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the z deployments update deployment forbidden response
func (o *ZDeploymentsUpdateDeploymentForbidden) Code() int {
	return 403
}

func (o *ZDeploymentsUpdateDeploymentForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentForbidden %s", 403, payload)
}

func (o *ZDeploymentsUpdateDeploymentForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentForbidden %s", 403, payload)
}

func (o *ZDeploymentsUpdateDeploymentForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsUpdateDeploymentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsUpdateDeploymentNotFound creates a ZDeploymentsUpdateDeploymentNotFound with default headers values
func NewZDeploymentsUpdateDeploymentNotFound() *ZDeploymentsUpdateDeploymentNotFound {
	return &ZDeploymentsUpdateDeploymentNotFound{}
}

/*
ZDeploymentsUpdateDeploymentNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type ZDeploymentsUpdateDeploymentNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments update deployment not found response has a 2xx status code
func (o *ZDeploymentsUpdateDeploymentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments update deployment not found response has a 3xx status code
func (o *ZDeploymentsUpdateDeploymentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments update deployment not found response has a 4xx status code
func (o *ZDeploymentsUpdateDeploymentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this z deployments update deployment not found response has a 5xx status code
func (o *ZDeploymentsUpdateDeploymentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this z deployments update deployment not found response a status code equal to that given
func (o *ZDeploymentsUpdateDeploymentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the z deployments update deployment not found response
func (o *ZDeploymentsUpdateDeploymentNotFound) Code() int {
	return 404
}

func (o *ZDeploymentsUpdateDeploymentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentNotFound %s", 404, payload)
}

func (o *ZDeploymentsUpdateDeploymentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentNotFound %s", 404, payload)
}

func (o *ZDeploymentsUpdateDeploymentNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsUpdateDeploymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsUpdateDeploymentInternalServerError creates a ZDeploymentsUpdateDeploymentInternalServerError with default headers values
func NewZDeploymentsUpdateDeploymentInternalServerError() *ZDeploymentsUpdateDeploymentInternalServerError {
	return &ZDeploymentsUpdateDeploymentInternalServerError{}
}

/*
ZDeploymentsUpdateDeploymentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type ZDeploymentsUpdateDeploymentInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments update deployment internal server error response has a 2xx status code
func (o *ZDeploymentsUpdateDeploymentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments update deployment internal server error response has a 3xx status code
func (o *ZDeploymentsUpdateDeploymentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments update deployment internal server error response has a 4xx status code
func (o *ZDeploymentsUpdateDeploymentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this z deployments update deployment internal server error response has a 5xx status code
func (o *ZDeploymentsUpdateDeploymentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this z deployments update deployment internal server error response a status code equal to that given
func (o *ZDeploymentsUpdateDeploymentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the z deployments update deployment internal server error response
func (o *ZDeploymentsUpdateDeploymentInternalServerError) Code() int {
	return 500
}

func (o *ZDeploymentsUpdateDeploymentInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentInternalServerError %s", 500, payload)
}

func (o *ZDeploymentsUpdateDeploymentInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentInternalServerError %s", 500, payload)
}

func (o *ZDeploymentsUpdateDeploymentInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsUpdateDeploymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsUpdateDeploymentGatewayTimeout creates a ZDeploymentsUpdateDeploymentGatewayTimeout with default headers values
func NewZDeploymentsUpdateDeploymentGatewayTimeout() *ZDeploymentsUpdateDeploymentGatewayTimeout {
	return &ZDeploymentsUpdateDeploymentGatewayTimeout{}
}

/*
ZDeploymentsUpdateDeploymentGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type ZDeploymentsUpdateDeploymentGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments update deployment gateway timeout response has a 2xx status code
func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments update deployment gateway timeout response has a 3xx status code
func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments update deployment gateway timeout response has a 4xx status code
func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this z deployments update deployment gateway timeout response has a 5xx status code
func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this z deployments update deployment gateway timeout response a status code equal to that given
func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the z deployments update deployment gateway timeout response
func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) Code() int {
	return 504
}

func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentGatewayTimeout %s", 504, payload)
}

func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] zDeploymentsUpdateDeploymentGatewayTimeout %s", 504, payload)
}

func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsUpdateDeploymentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsUpdateDeploymentDefault creates a ZDeploymentsUpdateDeploymentDefault with default headers values
func NewZDeploymentsUpdateDeploymentDefault(code int) *ZDeploymentsUpdateDeploymentDefault {
	return &ZDeploymentsUpdateDeploymentDefault{
		_statusCode: code,
	}
}

/*
ZDeploymentsUpdateDeploymentDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ZDeploymentsUpdateDeploymentDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this z deployments update deployment default response has a 2xx status code
func (o *ZDeploymentsUpdateDeploymentDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this z deployments update deployment default response has a 3xx status code
func (o *ZDeploymentsUpdateDeploymentDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this z deployments update deployment default response has a 4xx status code
func (o *ZDeploymentsUpdateDeploymentDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this z deployments update deployment default response has a 5xx status code
func (o *ZDeploymentsUpdateDeploymentDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this z deployments update deployment default response a status code equal to that given
func (o *ZDeploymentsUpdateDeploymentDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the z deployments update deployment default response
func (o *ZDeploymentsUpdateDeploymentDefault) Code() int {
	return o._statusCode
}

func (o *ZDeploymentsUpdateDeploymentDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] ZDeployments_UpdateDeployment default %s", o._statusCode, payload)
}

func (o *ZDeploymentsUpdateDeploymentDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /v1/deployments/id/{deploymentId}][%d] ZDeployments_UpdateDeployment default %s", o._statusCode, payload)
}

func (o *ZDeploymentsUpdateDeploymentDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ZDeploymentsUpdateDeploymentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ZDeploymentsUpdateDeploymentBody z deployments update deployment body
swagger:model ZDeploymentsUpdateDeploymentBody
*/
type ZDeploymentsUpdateDeploymentBody struct {

	// chart
	Chart *models.ZserviceChart `json:"chart,omitempty"`

	// deployment name
	DeploymentName string `json:"deploymentName,omitempty"`

	// override asset values
	OverrideAssetValues *models.ZserviceAssetValues `json:"overrideAssetValues,omitempty"`

	// target asset
	TargetAsset *models.ZserviceAsset `json:"targetAsset,omitempty"`
}

// Validate validates this z deployments update deployment body
func (o *ZDeploymentsUpdateDeploymentBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChart(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOverrideAssetValues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTargetAsset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ZDeploymentsUpdateDeploymentBody) validateChart(formats strfmt.Registry) error {
	if swag.IsZero(o.Chart) { // not required
		return nil
	}

	if o.Chart != nil {
		if err := o.Chart.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "chart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "chart")
			}
			return err
		}
	}

	return nil
}

func (o *ZDeploymentsUpdateDeploymentBody) validateOverrideAssetValues(formats strfmt.Registry) error {
	if swag.IsZero(o.OverrideAssetValues) { // not required
		return nil
	}

	if o.OverrideAssetValues != nil {
		if err := o.OverrideAssetValues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "overrideAssetValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "overrideAssetValues")
			}
			return err
		}
	}

	return nil
}

func (o *ZDeploymentsUpdateDeploymentBody) validateTargetAsset(formats strfmt.Registry) error {
	if swag.IsZero(o.TargetAsset) { // not required
		return nil
	}

	if o.TargetAsset != nil {
		if err := o.TargetAsset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "targetAsset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "targetAsset")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this z deployments update deployment body based on the context it is used
func (o *ZDeploymentsUpdateDeploymentBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateChart(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateOverrideAssetValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTargetAsset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ZDeploymentsUpdateDeploymentBody) contextValidateChart(ctx context.Context, formats strfmt.Registry) error {

	if o.Chart != nil {

		if swag.IsZero(o.Chart) { // not required
			return nil
		}

		if err := o.Chart.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "chart")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "chart")
			}
			return err
		}
	}

	return nil
}

func (o *ZDeploymentsUpdateDeploymentBody) contextValidateOverrideAssetValues(ctx context.Context, formats strfmt.Registry) error {

	if o.OverrideAssetValues != nil {

		if swag.IsZero(o.OverrideAssetValues) { // not required
			return nil
		}

		if err := o.OverrideAssetValues.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "overrideAssetValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "overrideAssetValues")
			}
			return err
		}
	}

	return nil
}

func (o *ZDeploymentsUpdateDeploymentBody) contextValidateTargetAsset(ctx context.Context, formats strfmt.Registry) error {

	if o.TargetAsset != nil {

		if swag.IsZero(o.TargetAsset) { // not required
			return nil
		}

		if err := o.TargetAsset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "targetAsset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "targetAsset")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ZDeploymentsUpdateDeploymentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ZDeploymentsUpdateDeploymentBody) UnmarshalBinary(b []byte) error {
	var res ZDeploymentsUpdateDeploymentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
