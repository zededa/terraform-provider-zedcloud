// Code generated by go-swagger; DO NOT EDIT.

package z_deployments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/zededa/terraform-provider-zedcloud/v2/models"
)

// ZDeploymentsGetDeploymentReader is a Reader for the ZDeploymentsGetDeployment structure.
type ZDeploymentsGetDeploymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ZDeploymentsGetDeploymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewZDeploymentsGetDeploymentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewZDeploymentsGetDeploymentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewZDeploymentsGetDeploymentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewZDeploymentsGetDeploymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewZDeploymentsGetDeploymentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewZDeploymentsGetDeploymentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewZDeploymentsGetDeploymentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewZDeploymentsGetDeploymentOK creates a ZDeploymentsGetDeploymentOK with default headers values
func NewZDeploymentsGetDeploymentOK() *ZDeploymentsGetDeploymentOK {
	return &ZDeploymentsGetDeploymentOK{}
}

/*
ZDeploymentsGetDeploymentOK describes a response with status code 200, with default header values.

A successful response.
*/
type ZDeploymentsGetDeploymentOK struct {
	Payload *models.ZserviceDeploymentReadRO
}

// IsSuccess returns true when this z deployments get deployment o k response has a 2xx status code
func (o *ZDeploymentsGetDeploymentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this z deployments get deployment o k response has a 3xx status code
func (o *ZDeploymentsGetDeploymentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments get deployment o k response has a 4xx status code
func (o *ZDeploymentsGetDeploymentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this z deployments get deployment o k response has a 5xx status code
func (o *ZDeploymentsGetDeploymentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this z deployments get deployment o k response a status code equal to that given
func (o *ZDeploymentsGetDeploymentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the z deployments get deployment o k response
func (o *ZDeploymentsGetDeploymentOK) Code() int {
	return 200
}

func (o *ZDeploymentsGetDeploymentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentOK %s", 200, payload)
}

func (o *ZDeploymentsGetDeploymentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentOK %s", 200, payload)
}

func (o *ZDeploymentsGetDeploymentOK) GetPayload() *models.ZserviceDeploymentReadRO {
	return o.Payload
}

func (o *ZDeploymentsGetDeploymentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZserviceDeploymentReadRO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsGetDeploymentUnauthorized creates a ZDeploymentsGetDeploymentUnauthorized with default headers values
func NewZDeploymentsGetDeploymentUnauthorized() *ZDeploymentsGetDeploymentUnauthorized {
	return &ZDeploymentsGetDeploymentUnauthorized{}
}

/*
ZDeploymentsGetDeploymentUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The API gateway did not process the request because it lacks valid authentication credentials for the target resource. The request header has either no authorization details or an authorization that has been refused.
*/
type ZDeploymentsGetDeploymentUnauthorized struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments get deployment unauthorized response has a 2xx status code
func (o *ZDeploymentsGetDeploymentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments get deployment unauthorized response has a 3xx status code
func (o *ZDeploymentsGetDeploymentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments get deployment unauthorized response has a 4xx status code
func (o *ZDeploymentsGetDeploymentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this z deployments get deployment unauthorized response has a 5xx status code
func (o *ZDeploymentsGetDeploymentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this z deployments get deployment unauthorized response a status code equal to that given
func (o *ZDeploymentsGetDeploymentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the z deployments get deployment unauthorized response
func (o *ZDeploymentsGetDeploymentUnauthorized) Code() int {
	return 401
}

func (o *ZDeploymentsGetDeploymentUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentUnauthorized %s", 401, payload)
}

func (o *ZDeploymentsGetDeploymentUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentUnauthorized %s", 401, payload)
}

func (o *ZDeploymentsGetDeploymentUnauthorized) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsGetDeploymentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsGetDeploymentForbidden creates a ZDeploymentsGetDeploymentForbidden with default headers values
func NewZDeploymentsGetDeploymentForbidden() *ZDeploymentsGetDeploymentForbidden {
	return &ZDeploymentsGetDeploymentForbidden{}
}

/*
ZDeploymentsGetDeploymentForbidden describes a response with status code 403, with default header values.

Forbidden. The API gateway did not process the request because the requestor does not have application level access permission for the operation or does not have access scope to the project.
*/
type ZDeploymentsGetDeploymentForbidden struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments get deployment forbidden response has a 2xx status code
func (o *ZDeploymentsGetDeploymentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments get deployment forbidden response has a 3xx status code
func (o *ZDeploymentsGetDeploymentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments get deployment forbidden response has a 4xx status code
func (o *ZDeploymentsGetDeploymentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this z deployments get deployment forbidden response has a 5xx status code
func (o *ZDeploymentsGetDeploymentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this z deployments get deployment forbidden response a status code equal to that given
func (o *ZDeploymentsGetDeploymentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the z deployments get deployment forbidden response
func (o *ZDeploymentsGetDeploymentForbidden) Code() int {
	return 403
}

func (o *ZDeploymentsGetDeploymentForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentForbidden %s", 403, payload)
}

func (o *ZDeploymentsGetDeploymentForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentForbidden %s", 403, payload)
}

func (o *ZDeploymentsGetDeploymentForbidden) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsGetDeploymentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsGetDeploymentNotFound creates a ZDeploymentsGetDeploymentNotFound with default headers values
func NewZDeploymentsGetDeploymentNotFound() *ZDeploymentsGetDeploymentNotFound {
	return &ZDeploymentsGetDeploymentNotFound{}
}

/*
ZDeploymentsGetDeploymentNotFound describes a response with status code 404, with default header values.

Not Found. The API gateway did not process the request because the requested resource could not be found.
*/
type ZDeploymentsGetDeploymentNotFound struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments get deployment not found response has a 2xx status code
func (o *ZDeploymentsGetDeploymentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments get deployment not found response has a 3xx status code
func (o *ZDeploymentsGetDeploymentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments get deployment not found response has a 4xx status code
func (o *ZDeploymentsGetDeploymentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this z deployments get deployment not found response has a 5xx status code
func (o *ZDeploymentsGetDeploymentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this z deployments get deployment not found response a status code equal to that given
func (o *ZDeploymentsGetDeploymentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the z deployments get deployment not found response
func (o *ZDeploymentsGetDeploymentNotFound) Code() int {
	return 404
}

func (o *ZDeploymentsGetDeploymentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentNotFound %s", 404, payload)
}

func (o *ZDeploymentsGetDeploymentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentNotFound %s", 404, payload)
}

func (o *ZDeploymentsGetDeploymentNotFound) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsGetDeploymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsGetDeploymentInternalServerError creates a ZDeploymentsGetDeploymentInternalServerError with default headers values
func NewZDeploymentsGetDeploymentInternalServerError() *ZDeploymentsGetDeploymentInternalServerError {
	return &ZDeploymentsGetDeploymentInternalServerError{}
}

/*
ZDeploymentsGetDeploymentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error. The API gateway experienced an unexpected condition. Specific error condition is indicated in error codes.
*/
type ZDeploymentsGetDeploymentInternalServerError struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments get deployment internal server error response has a 2xx status code
func (o *ZDeploymentsGetDeploymentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments get deployment internal server error response has a 3xx status code
func (o *ZDeploymentsGetDeploymentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments get deployment internal server error response has a 4xx status code
func (o *ZDeploymentsGetDeploymentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this z deployments get deployment internal server error response has a 5xx status code
func (o *ZDeploymentsGetDeploymentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this z deployments get deployment internal server error response a status code equal to that given
func (o *ZDeploymentsGetDeploymentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the z deployments get deployment internal server error response
func (o *ZDeploymentsGetDeploymentInternalServerError) Code() int {
	return 500
}

func (o *ZDeploymentsGetDeploymentInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentInternalServerError %s", 500, payload)
}

func (o *ZDeploymentsGetDeploymentInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentInternalServerError %s", 500, payload)
}

func (o *ZDeploymentsGetDeploymentInternalServerError) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsGetDeploymentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsGetDeploymentGatewayTimeout creates a ZDeploymentsGetDeploymentGatewayTimeout with default headers values
func NewZDeploymentsGetDeploymentGatewayTimeout() *ZDeploymentsGetDeploymentGatewayTimeout {
	return &ZDeploymentsGetDeploymentGatewayTimeout{}
}

/*
ZDeploymentsGetDeploymentGatewayTimeout describes a response with status code 504, with default header values.

Gateway Timeout. The API gateway did not receive a timely response from an upstream microservice it needed to communicate with in order to complete the request.
*/
type ZDeploymentsGetDeploymentGatewayTimeout struct {
	Payload *models.ZsrvResponse
}

// IsSuccess returns true when this z deployments get deployment gateway timeout response has a 2xx status code
func (o *ZDeploymentsGetDeploymentGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this z deployments get deployment gateway timeout response has a 3xx status code
func (o *ZDeploymentsGetDeploymentGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this z deployments get deployment gateway timeout response has a 4xx status code
func (o *ZDeploymentsGetDeploymentGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this z deployments get deployment gateway timeout response has a 5xx status code
func (o *ZDeploymentsGetDeploymentGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this z deployments get deployment gateway timeout response a status code equal to that given
func (o *ZDeploymentsGetDeploymentGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the z deployments get deployment gateway timeout response
func (o *ZDeploymentsGetDeploymentGatewayTimeout) Code() int {
	return 504
}

func (o *ZDeploymentsGetDeploymentGatewayTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentGatewayTimeout %s", 504, payload)
}

func (o *ZDeploymentsGetDeploymentGatewayTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] zDeploymentsGetDeploymentGatewayTimeout %s", 504, payload)
}

func (o *ZDeploymentsGetDeploymentGatewayTimeout) GetPayload() *models.ZsrvResponse {
	return o.Payload
}

func (o *ZDeploymentsGetDeploymentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ZsrvResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewZDeploymentsGetDeploymentDefault creates a ZDeploymentsGetDeploymentDefault with default headers values
func NewZDeploymentsGetDeploymentDefault(code int) *ZDeploymentsGetDeploymentDefault {
	return &ZDeploymentsGetDeploymentDefault{
		_statusCode: code,
	}
}

/*
ZDeploymentsGetDeploymentDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ZDeploymentsGetDeploymentDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this z deployments get deployment default response has a 2xx status code
func (o *ZDeploymentsGetDeploymentDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this z deployments get deployment default response has a 3xx status code
func (o *ZDeploymentsGetDeploymentDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this z deployments get deployment default response has a 4xx status code
func (o *ZDeploymentsGetDeploymentDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this z deployments get deployment default response has a 5xx status code
func (o *ZDeploymentsGetDeploymentDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this z deployments get deployment default response a status code equal to that given
func (o *ZDeploymentsGetDeploymentDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the z deployments get deployment default response
func (o *ZDeploymentsGetDeploymentDefault) Code() int {
	return o._statusCode
}

func (o *ZDeploymentsGetDeploymentDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] ZDeployments_GetDeployment default %s", o._statusCode, payload)
}

func (o *ZDeploymentsGetDeploymentDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/deployments/id/{deploymentId}][%d] ZDeployments_GetDeployment default %s", o._statusCode, payload)
}

func (o *ZDeploymentsGetDeploymentDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ZDeploymentsGetDeploymentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
