// Code generated by go-swagger; DO NOT EDIT.

package app_profile_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new app profile service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new app profile service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new app profile service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for app profile service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AppProfileServiceCreateAppProfile(params *AppProfileServiceCreateAppProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceCreateAppProfileOK, error)

	AppProfileServiceDeleteAppProfile(params *AppProfileServiceDeleteAppProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceDeleteAppProfileOK, error)

	AppProfileServiceGetAppProfile(params *AppProfileServiceGetAppProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceGetAppProfileOK, error)

	AppProfileServiceGetAppProfileByName(params *AppProfileServiceGetAppProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceGetAppProfileByNameOK, error)

	AppProfileServiceQueryAppProfileRevisionByID(params *AppProfileServiceQueryAppProfileRevisionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceQueryAppProfileRevisionByIDOK, error)

	AppProfileServiceQueryAppProfileRevisionByName(params *AppProfileServiceQueryAppProfileRevisionByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceQueryAppProfileRevisionByNameOK, error)

	AppProfileServiceQueryAppProfiles(params *AppProfileServiceQueryAppProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceQueryAppProfilesOK, error)

	AppProfileServiceUpdateAppProfile(params *AppProfileServiceUpdateAppProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceUpdateAppProfileOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AppProfileServiceCreateAppProfile creates app profile

Create an app profile record.
*/
func (a *Client) AppProfileServiceCreateAppProfile(params *AppProfileServiceCreateAppProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceCreateAppProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppProfileServiceCreateAppProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppProfileService_CreateAppProfile",
		Method:             "POST",
		PathPattern:        "/v1/appprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppProfileServiceCreateAppProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppProfileServiceCreateAppProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppProfileServiceCreateAppProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppProfileServiceDeleteAppProfile deletes app profile

Delete an app profile record.
*/
func (a *Client) AppProfileServiceDeleteAppProfile(params *AppProfileServiceDeleteAppProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceDeleteAppProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppProfileServiceDeleteAppProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppProfileService_DeleteAppProfile",
		Method:             "DELETE",
		PathPattern:        "/v1/appprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppProfileServiceDeleteAppProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppProfileServiceDeleteAppProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppProfileServiceDeleteAppProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppProfileServiceGetAppProfile gets app profile

Get the configuration (without security details) of an app profile record.
*/
func (a *Client) AppProfileServiceGetAppProfile(params *AppProfileServiceGetAppProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceGetAppProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppProfileServiceGetAppProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppProfileService_GetAppProfile",
		Method:             "GET",
		PathPattern:        "/v1/appprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppProfileServiceGetAppProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppProfileServiceGetAppProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppProfileServiceGetAppProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppProfileServiceGetAppProfileByName gets app profile by name

Get the configuration (without security details) of an app profile record by name.
*/
func (a *Client) AppProfileServiceGetAppProfileByName(params *AppProfileServiceGetAppProfileByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceGetAppProfileByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppProfileServiceGetAppProfileByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppProfileService_GetAppProfileByName",
		Method:             "GET",
		PathPattern:        "/v1/appprofiles/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppProfileServiceGetAppProfileByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppProfileServiceGetAppProfileByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppProfileServiceGetAppProfileByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppProfileServiceQueryAppProfileRevisionByID queries app profile versions by app profile id

Query the app profile version records using app profile id
*/
func (a *Client) AppProfileServiceQueryAppProfileRevisionByID(params *AppProfileServiceQueryAppProfileRevisionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceQueryAppProfileRevisionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppProfileServiceQueryAppProfileRevisionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppProfileService_QueryAppProfileRevisionById",
		Method:             "GET",
		PathPattern:        "/v1/appprofiles/id/{id}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppProfileServiceQueryAppProfileRevisionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppProfileServiceQueryAppProfileRevisionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppProfileServiceQueryAppProfileRevisionByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppProfileServiceQueryAppProfileRevisionByName queries app profile versions by app profile name

Query the app profile version records using app profile name
*/
func (a *Client) AppProfileServiceQueryAppProfileRevisionByName(params *AppProfileServiceQueryAppProfileRevisionByNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceQueryAppProfileRevisionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppProfileServiceQueryAppProfileRevisionByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppProfileService_QueryAppProfileRevisionByName",
		Method:             "GET",
		PathPattern:        "/v1/appprofiles/name/{name}/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppProfileServiceQueryAppProfileRevisionByNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppProfileServiceQueryAppProfileRevisionByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppProfileServiceQueryAppProfileRevisionByNameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppProfileServiceQueryAppProfiles queries app profiles

Query the app profile records.
*/
func (a *Client) AppProfileServiceQueryAppProfiles(params *AppProfileServiceQueryAppProfilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceQueryAppProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppProfileServiceQueryAppProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppProfileService_QueryAppProfiles",
		Method:             "GET",
		PathPattern:        "/v1/appprofiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppProfileServiceQueryAppProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppProfileServiceQueryAppProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppProfileServiceQueryAppProfilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AppProfileServiceUpdateAppProfile updates app profile

Update an app profile record. The usual pattern to update an app profile record is to retrieve the record and update with the modified values in a new body to update the app profile record.
*/
func (a *Client) AppProfileServiceUpdateAppProfile(params *AppProfileServiceUpdateAppProfileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AppProfileServiceUpdateAppProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppProfileServiceUpdateAppProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AppProfileService_UpdateAppProfile",
		Method:             "PUT",
		PathPattern:        "/v1/appprofiles/id/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AppProfileServiceUpdateAppProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppProfileServiceUpdateAppProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AppProfileServiceUpdateAppProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
