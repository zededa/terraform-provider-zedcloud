// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Entitlement Entitlement data
//
// # Get Entitlement data
//
// swagger:model Entitlement
type Entitlement struct {

	// Device entitlement data
	Devices []*DeviceEntitlement `json:"devices"`

	// Enterprise id for which we want to post/get enforce entitlement
	// Pattern: [0-9A-Za-z-]+
	EntpID string `json:"entpId,omitempty"`

	// Enterprise name for which we want to post/get enforce entitlement
	// Pattern: [0-9A-Za-z-]+
	EntpName string `json:"entpName,omitempty"`

	// Plugin entitlement data
	Plugins *PluginEntitlement `json:"plugins,omitempty"`

	// User entitlement data
	UserCount *UserEntitlement `json:"userCount,omitempty"`
}

// Validate validates this entitlement
func (m *Entitlement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntpID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntpName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Entitlement) validateDevices(formats strfmt.Registry) error {
	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entitlement) validateEntpID(formats strfmt.Registry) error {
	if swag.IsZero(m.EntpID) { // not required
		return nil
	}

	if err := validate.Pattern("entpId", "body", m.EntpID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *Entitlement) validateEntpName(formats strfmt.Registry) error {
	if swag.IsZero(m.EntpName) { // not required
		return nil
	}

	if err := validate.Pattern("entpName", "body", m.EntpName, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *Entitlement) validatePlugins(formats strfmt.Registry) error {
	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	if m.Plugins != nil {
		if err := m.Plugins.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugins")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plugins")
			}
			return err
		}
	}

	return nil
}

func (m *Entitlement) validateUserCount(formats strfmt.Registry) error {
	if swag.IsZero(m.UserCount) { // not required
		return nil
	}

	if m.UserCount != nil {
		if err := m.UserCount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userCount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userCount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this entitlement based on the context it is used
func (m *Entitlement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlugins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Entitlement) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Devices); i++ {

		if m.Devices[i] != nil {

			if swag.IsZero(m.Devices[i]) { // not required
				return nil
			}

			if err := m.Devices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Entitlement) contextValidatePlugins(ctx context.Context, formats strfmt.Registry) error {

	if m.Plugins != nil {

		if swag.IsZero(m.Plugins) { // not required
			return nil
		}

		if err := m.Plugins.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugins")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plugins")
			}
			return err
		}
	}

	return nil
}

func (m *Entitlement) contextValidateUserCount(ctx context.Context, formats strfmt.Registry) error {

	if m.UserCount != nil {

		if swag.IsZero(m.UserCount) { // not required
			return nil
		}

		if err := m.UserCount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userCount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userCount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Entitlement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Entitlement) UnmarshalBinary(b []byte) error {
	var res Entitlement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
