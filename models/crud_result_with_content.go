// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrudResultWithContent crud result with content
//
// swagger:model CrudResultWithContent
type CrudResultWithContent struct {

	// code
	Code *CrudResultCode `json:"code,omitempty"`

	// content
	Content *CrudContent `json:"content,omitempty"`

	// identifier
	Identifier *Identifier64 `json:"identifier,omitempty"`
}

// Validate validates this crud result with content
func (m *CrudResultWithContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrudResultWithContent) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if m.Code != nil {
		if err := m.Code.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResultWithContent) validateContent(formats strfmt.Registry) error {
	if swag.IsZero(m.Content) { // not required
		return nil
	}

	if m.Content != nil {
		if err := m.Content.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("content")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResultWithContent) validateIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifier) { // not required
		return nil
	}

	if m.Identifier != nil {
		if err := m.Identifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this crud result with content based on the context it is used
func (m *CrudResultWithContent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrudResultWithContent) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if m.Code != nil {

		if swag.IsZero(m.Code) { // not required
			return nil
		}

		if err := m.Code.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResultWithContent) contextValidateContent(ctx context.Context, formats strfmt.Registry) error {

	if m.Content != nil {

		if swag.IsZero(m.Content) { // not required
			return nil
		}

		if err := m.Content.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("content")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResultWithContent) contextValidateIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.Identifier != nil {

		if swag.IsZero(m.Identifier) { // not required
			return nil
		}

		if err := m.Identifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrudResultWithContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrudResultWithContent) UnmarshalBinary(b []byte) error {
	var res CrudResultWithContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
