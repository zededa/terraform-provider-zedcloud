// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyVersion policy version
//
// swagger:model PolicyVersion
type PolicyVersion struct {

	// accepted at
	// Format: date-time
	AcceptedAt strfmt.DateTime `json:"AcceptedAt,omitempty"`

	// accepted by
	AcceptedBy string `json:"AcceptedBy,omitempty"`

	// effective from
	// Format: date-time
	EffectiveFrom strfmt.DateTime `json:"EffectiveFrom,omitempty"`

	// policy
	Policy string `json:"Policy,omitempty"`

	// version
	Version string `json:"Version,omitempty"`
}

// Validate validates this policy version
func (m *PolicyVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveFrom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyVersion) validateAcceptedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("AcceptedAt", "body", "date-time", m.AcceptedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PolicyVersion) validateEffectiveFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("EffectiveFrom", "body", "date-time", m.EffectiveFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this policy version based on context it is used
func (m *PolicyVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyVersion) UnmarshalBinary(b []byte) error {
	var res PolicyVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
