// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AAASuccessResponseLogin AAA was successful
//
// swagger:model AAASuccessResponseLogin
type AAASuccessResponseLogin struct {

	// api token
	APIToken *Token64 `json:"apiToken,omitempty"`

	// detailed user
	DetailedUser *DetailedUser `json:"detailedUser,omitempty"`

	// enterprise
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// enterprise Id
	EnterpriseID *Identifier64 `json:"enterpriseId,omitempty"`

	// is j w t valid
	IsJWTValid bool `json:"isJWTValid,omitempty"`

	// login token
	LoginToken *Token64 `json:"loginToken,omitempty"`

	// password expiry notification period in seconds
	PasswordExpiryNotificationPeriodInSeconds int64 `json:"passwordExpiryNotificationPeriodInSeconds,omitempty"`

	// password expiry time
	// Format: date-time
	PasswordExpiryTime strfmt.DateTime `json:"passwordExpiryTime,omitempty"`

	// BEGIN: Only valid when a certain verbosity level is requested
	Policies []*Policy `json:"policies"`

	// realm
	Realm *Realm `json:"realm,omitempty"`

	// realm Id
	RealmID *Identifier64 `json:"realmId,omitempty"`

	// role
	Role *Role `json:"role,omitempty"`

	// simple user
	SimpleUser *SimpleUser `json:"simpleUser,omitempty"`

	// token
	Token *Token64 `json:"token,omitempty"`

	// user Id
	UserID *Identifier64 `json:"userId,omitempty"`
}

// Validate validates this a a a success response login
func (m *AAASuccessResponseLogin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterprise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterpriseID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordExpiryTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealmID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimpleUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAASuccessResponseLogin) validateAPIToken(formats strfmt.Registry) error {
	if swag.IsZero(m.APIToken) { // not required
		return nil
	}

	if m.APIToken != nil {
		if err := m.APIToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateDetailedUser(formats strfmt.Registry) error {
	if swag.IsZero(m.DetailedUser) { // not required
		return nil
	}

	if m.DetailedUser != nil {
		if err := m.DetailedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detailedUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("detailedUser")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateEnterprise(formats strfmt.Registry) error {
	if swag.IsZero(m.Enterprise) { // not required
		return nil
	}

	if m.Enterprise != nil {
		if err := m.Enterprise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterprise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enterprise")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateEnterpriseID(formats strfmt.Registry) error {
	if swag.IsZero(m.EnterpriseID) { // not required
		return nil
	}

	if m.EnterpriseID != nil {
		if err := m.EnterpriseID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterpriseId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enterpriseId")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateLoginToken(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginToken) { // not required
		return nil
	}

	if m.LoginToken != nil {
		if err := m.LoginToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validatePasswordExpiryTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordExpiryTime) { // not required
		return nil
	}

	if err := validate.FormatOf("passwordExpiryTime", "body", "date-time", m.PasswordExpiryTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AAASuccessResponseLogin) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AAASuccessResponseLogin) validateRealm(formats strfmt.Registry) error {
	if swag.IsZero(m.Realm) { // not required
		return nil
	}

	if m.Realm != nil {
		if err := m.Realm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realm")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateRealmID(formats strfmt.Registry) error {
	if swag.IsZero(m.RealmID) { // not required
		return nil
	}

	if m.RealmID != nil {
		if err := m.RealmID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realmId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realmId")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateSimpleUser(formats strfmt.Registry) error {
	if swag.IsZero(m.SimpleUser) { // not required
		return nil
	}

	if m.SimpleUser != nil {
		if err := m.SimpleUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simpleUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simpleUser")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateToken(formats strfmt.Registry) error {
	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if m.Token != nil {
		if err := m.Token.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) validateUserID(formats strfmt.Registry) error {
	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if m.UserID != nil {
		if err := m.UserID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a a a success response login based on the context it is used
func (m *AAASuccessResponseLogin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPIToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetailedUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnterprise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnterpriseID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRealm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRealmID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSimpleUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAASuccessResponseLogin) contextValidateAPIToken(ctx context.Context, formats strfmt.Registry) error {

	if m.APIToken != nil {

		if swag.IsZero(m.APIToken) { // not required
			return nil
		}

		if err := m.APIToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("apiToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("apiToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateDetailedUser(ctx context.Context, formats strfmt.Registry) error {

	if m.DetailedUser != nil {

		if swag.IsZero(m.DetailedUser) { // not required
			return nil
		}

		if err := m.DetailedUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detailedUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("detailedUser")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateEnterprise(ctx context.Context, formats strfmt.Registry) error {

	if m.Enterprise != nil {

		if swag.IsZero(m.Enterprise) { // not required
			return nil
		}

		if err := m.Enterprise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterprise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enterprise")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateEnterpriseID(ctx context.Context, formats strfmt.Registry) error {

	if m.EnterpriseID != nil {

		if swag.IsZero(m.EnterpriseID) { // not required
			return nil
		}

		if err := m.EnterpriseID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterpriseId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enterpriseId")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateLoginToken(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginToken != nil {

		if swag.IsZero(m.LoginToken) { // not required
			return nil
		}

		if err := m.LoginToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Policies); i++ {

		if m.Policies[i] != nil {

			if swag.IsZero(m.Policies[i]) { // not required
				return nil
			}

			if err := m.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateRealm(ctx context.Context, formats strfmt.Registry) error {

	if m.Realm != nil {

		if swag.IsZero(m.Realm) { // not required
			return nil
		}

		if err := m.Realm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realm")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateRealmID(ctx context.Context, formats strfmt.Registry) error {

	if m.RealmID != nil {

		if swag.IsZero(m.RealmID) { // not required
			return nil
		}

		if err := m.RealmID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realmId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realmId")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {

		if swag.IsZero(m.Role) { // not required
			return nil
		}

		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateSimpleUser(ctx context.Context, formats strfmt.Registry) error {

	if m.SimpleUser != nil {

		if swag.IsZero(m.SimpleUser) { // not required
			return nil
		}

		if err := m.SimpleUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("simpleUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("simpleUser")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateToken(ctx context.Context, formats strfmt.Registry) error {

	if m.Token != nil {

		if swag.IsZero(m.Token) { // not required
			return nil
		}

		if err := m.Token.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token")
			}
			return err
		}
	}

	return nil
}

func (m *AAASuccessResponseLogin) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if m.UserID != nil {

		if swag.IsZero(m.UserID) { // not required
			return nil
		}

		if err := m.UserID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AAASuccessResponseLogin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AAASuccessResponseLogin) UnmarshalBinary(b []byte) error {
	var res AAASuccessResponseLogin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
