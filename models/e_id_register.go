// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EIDRegister EID Register detail
//
// # EID Register
//
// swagger:model EIDRegister
type EIDRegister struct {

	// app certificate
	// Required: true
	// Format: byte
	AppCert *string `json:"AppCert"`

	// App private key
	// Required: true
	// Format: byte
	AppPrivateKey *string `json:"AppPrivateKey"`

	// App public key
	// Required: true
	// Format: byte
	AppPublicKey *string `json:"AppPublicKey"`

	// Display name
	// Required: true
	DisplayName *string `json:"DisplayName"`

	// EID
	// Required: true
	EID *string `json:"EID"`

	// EID hash length
	// Required: true
	EIDHashLen *int64 `json:"EIDHashLen"`

	// Lisp Instance
	// Required: true
	LispInstance *int64 `json:"LispInstance"`

	// time CreateTime     time.Time
	//
	// Lisp Map Server
	// Required: true
	LispMapServers []*LispServer `json:"LispMapServers"`

	// Lisp Signature
	// Required: true
	LispSignature *string `json:"LispSignature"`

	// UUID
	// Required: true
	UUID *string `json:"UUID"`
}

// Validate validates this e ID register
func (m *EIDRegister) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppPrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppPublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEIDHashLen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLispInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLispMapServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLispSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EIDRegister) validateAppCert(formats strfmt.Registry) error {

	if err := validate.Required("AppCert", "body", m.AppCert); err != nil {
		return err
	}

	return nil
}

func (m *EIDRegister) validateAppPrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("AppPrivateKey", "body", m.AppPrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *EIDRegister) validateAppPublicKey(formats strfmt.Registry) error {

	if err := validate.Required("AppPublicKey", "body", m.AppPublicKey); err != nil {
		return err
	}

	return nil
}

func (m *EIDRegister) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("DisplayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *EIDRegister) validateEID(formats strfmt.Registry) error {

	if err := validate.Required("EID", "body", m.EID); err != nil {
		return err
	}

	return nil
}

func (m *EIDRegister) validateEIDHashLen(formats strfmt.Registry) error {

	if err := validate.Required("EIDHashLen", "body", m.EIDHashLen); err != nil {
		return err
	}

	return nil
}

func (m *EIDRegister) validateLispInstance(formats strfmt.Registry) error {

	if err := validate.Required("LispInstance", "body", m.LispInstance); err != nil {
		return err
	}

	return nil
}

func (m *EIDRegister) validateLispMapServers(formats strfmt.Registry) error {

	if err := validate.Required("LispMapServers", "body", m.LispMapServers); err != nil {
		return err
	}

	for i := 0; i < len(m.LispMapServers); i++ {
		if swag.IsZero(m.LispMapServers[i]) { // not required
			continue
		}

		if m.LispMapServers[i] != nil {
			if err := m.LispMapServers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LispMapServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("LispMapServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EIDRegister) validateLispSignature(formats strfmt.Registry) error {

	if err := validate.Required("LispSignature", "body", m.LispSignature); err != nil {
		return err
	}

	return nil
}

func (m *EIDRegister) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("UUID", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this e ID register based on the context it is used
func (m *EIDRegister) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLispMapServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EIDRegister) contextValidateLispMapServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LispMapServers); i++ {

		if m.LispMapServers[i] != nil {
			if err := m.LispMapServers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LispMapServers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("LispMapServers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EIDRegister) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EIDRegister) UnmarshalBinary(b []byte) error {
	var res EIDRegister
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
