// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Scope scope
//
// swagger:model Scope
type Scope struct {

	// Application access permission, this will be deprecated in further release - please use accessEdgeApp and accessAppInstance for granular permission access scope.
	AccessApp string `json:"accessApp,omitempty"`

	// Application Instance access permission
	AccessAppInstance string `json:"accessAppInstance,omitempty"`

	// Device access permission
	AccessDevice string `json:"accessDevice,omitempty"`

	// Edge app access permission
	AccessEdgeApp string `json:"accessEdgeApp,omitempty"`

	// Enterprise access permission
	AccessEnterprise string `json:"accessEnterprise,omitempty"`

	// Storage access permission
	AccessStorage string `json:"accessStorage,omitempty"`

	// User access permission
	AccessUser string `json:"accessUser,omitempty"`

	// List of enterprise filters
	EnterpriseFilter []string `json:"enterpriseFilter"`

	// List of project filters
	ProjectFilter []string `json:"projectFilter"`

	// Unique system defined scope ID
	// Read Only: true
	// Pattern: [0-9A-Za-z_=-]{28}
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this scope
func (m *Scope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Scope) validateUUID(formats strfmt.Registry) error {
	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.Pattern("uuid", "body", m.UUID, `[0-9A-Za-z_=-]{28}`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this scope based on the context it is used
func (m *Scope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Scope) contextValidateUUID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "uuid", "body", string(m.UUID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Scope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Scope) UnmarshalBinary(b []byte) error {
	var res Scope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
