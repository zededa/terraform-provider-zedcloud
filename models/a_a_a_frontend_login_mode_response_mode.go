// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AAAFrontendLoginModeResponseMode a a a frontend login mode response mode
//
// swagger:model AAA_Frontend_LoginModeResponseMode
type AAAFrontendLoginModeResponseMode string

func NewAAAFrontendLoginModeResponseMode(value AAAFrontendLoginModeResponseMode) *AAAFrontendLoginModeResponseMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AAAFrontendLoginModeResponseMode.
func (m AAAFrontendLoginModeResponseMode) Pointer() *AAAFrontendLoginModeResponseMode {
	return &m
}

const (

	// AAAFrontendLoginModeResponseModeLOCAL captures enum value "LOCAL"
	AAAFrontendLoginModeResponseModeLOCAL AAAFrontendLoginModeResponseMode = "LOCAL"

	// AAAFrontendLoginModeResponseModeEXTERNAL captures enum value "EXTERNAL"
	AAAFrontendLoginModeResponseModeEXTERNAL AAAFrontendLoginModeResponseMode = "EXTERNAL"
)

// for schema
var aAAFrontendLoginModeResponseModeEnum []interface{}

func init() {
	var res []AAAFrontendLoginModeResponseMode
	if err := json.Unmarshal([]byte(`["LOCAL","EXTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aAAFrontendLoginModeResponseModeEnum = append(aAAFrontendLoginModeResponseModeEnum, v)
	}
}

func (m AAAFrontendLoginModeResponseMode) validateAAAFrontendLoginModeResponseModeEnum(path, location string, value AAAFrontendLoginModeResponseMode) error {
	if err := validate.EnumCase(path, location, value, aAAFrontendLoginModeResponseModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this a a a frontend login mode response mode
func (m AAAFrontendLoginModeResponseMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAAAFrontendLoginModeResponseModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this a a a frontend login mode response mode based on context it is used
func (m AAAFrontendLoginModeResponseMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
