// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PluginType plugin type
//
// swagger:model PluginType
type PluginType string

func NewPluginType(value PluginType) *PluginType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PluginType.
func (m PluginType) Pointer() *PluginType {
	return &m
}

const (

	// PluginTypePLUGINTYPEUNSPECIFIED captures enum value "PLUGIN_TYPE_UNSPECIFIED"
	PluginTypePLUGINTYPEUNSPECIFIED PluginType = "PLUGIN_TYPE_UNSPECIFIED"

	// PluginTypePLUGINTYPESPLUNK captures enum value "PLUGIN_TYPE_SPLUNK"
	PluginTypePLUGINTYPESPLUNK PluginType = "PLUGIN_TYPE_SPLUNK"

	// PluginTypePLUGINTYPEHTTP captures enum value "PLUGIN_TYPE_HTTP"
	PluginTypePLUGINTYPEHTTP PluginType = "PLUGIN_TYPE_HTTP"

	// PluginTypePLUGINTYPERANCHER captures enum value "PLUGIN_TYPE_RANCHER"
	PluginTypePLUGINTYPERANCHER PluginType = "PLUGIN_TYPE_RANCHER"

	// PluginTypePLUGINTYPEVMWAREVCO captures enum value "PLUGIN_TYPE_VMWARE_VCO"
	PluginTypePLUGINTYPEVMWAREVCO PluginType = "PLUGIN_TYPE_VMWARE_VCO"

	// PluginTypePLUGINTYPEVMWARETMC captures enum value "PLUGIN_TYPE_VMWARE_TMC"
	PluginTypePLUGINTYPEVMWARETMC PluginType = "PLUGIN_TYPE_VMWARE_TMC"
)

// for schema
var pluginTypeEnum []interface{}

func init() {
	var res []PluginType
	if err := json.Unmarshal([]byte(`["PLUGIN_TYPE_UNSPECIFIED","PLUGIN_TYPE_SPLUNK","PLUGIN_TYPE_HTTP","PLUGIN_TYPE_RANCHER","PLUGIN_TYPE_VMWARE_VCO","PLUGIN_TYPE_VMWARE_TMC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pluginTypeEnum = append(pluginTypeEnum, v)
	}
}

func (m PluginType) validatePluginTypeEnum(path, location string, value PluginType) error {
	if err := validate.EnumCase(path, location, value, pluginTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this plugin type
func (m PluginType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePluginTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this plugin type based on context it is used
func (m PluginType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
