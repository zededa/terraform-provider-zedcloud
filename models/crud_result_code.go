// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CrudResultCode Responses to the action requests
//
// swagger:model CrudResultCode
type CrudResultCode string

func NewCrudResultCode(value CrudResultCode) *CrudResultCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CrudResultCode.
func (m CrudResultCode) Pointer() *CrudResultCode {
	return &m
}

const (

	// CrudResultCodeCrudResultCodeINVALID captures enum value "CrudResultCode__INVALID__"
	CrudResultCodeCrudResultCodeINVALID CrudResultCode = "CrudResultCode__INVALID__"

	// CrudResultCodeCrudResultCodeSuccess captures enum value "CrudResultCodeSuccess"
	CrudResultCodeCrudResultCodeSuccess CrudResultCode = "CrudResultCodeSuccess"

	// CrudResultCodeCrudResultCodeAuthentication captures enum value "CrudResultCodeAuthentication"
	CrudResultCodeCrudResultCodeAuthentication CrudResultCode = "CrudResultCodeAuthentication"

	// CrudResultCodeCrudResultCodeAlreadyExists captures enum value "CrudResultCodeAlreadyExists"
	CrudResultCodeCrudResultCodeAlreadyExists CrudResultCode = "CrudResultCodeAlreadyExists"

	// CrudResultCodeCrudResultCodeException captures enum value "CrudResultCodeException"
	CrudResultCodeCrudResultCodeException CrudResultCode = "CrudResultCodeException"

	// CrudResultCodeCrudResultCodeHasDependencies captures enum value "CrudResultCodeHasDependencies"
	CrudResultCodeCrudResultCodeHasDependencies CrudResultCode = "CrudResultCodeHasDependencies"

	// CrudResultCodeCrudResultCodeIllegalArgument captures enum value "CrudResultCodeIllegalArgument"
	CrudResultCodeCrudResultCodeIllegalArgument CrudResultCode = "CrudResultCodeIllegalArgument"

	// CrudResultCodeCrudResultCodeIllegalRequest captures enum value "CrudResultCodeIllegalRequest"
	CrudResultCodeCrudResultCodeIllegalRequest CrudResultCode = "CrudResultCodeIllegalRequest"

	// CrudResultCodeCrudResultCodeIncomplete captures enum value "CrudResultCodeIncomplete"
	CrudResultCodeCrudResultCodeIncomplete CrudResultCode = "CrudResultCodeIncomplete"

	// CrudResultCodeCrudResultCodeInternalError captures enum value "CrudResultCodeInternalError"
	CrudResultCodeCrudResultCodeInternalError CrudResultCode = "CrudResultCodeInternalError"

	// CrudResultCodeCrudResultCodeNotFound captures enum value "CrudResultCodeNotFound"
	CrudResultCodeCrudResultCodeNotFound CrudResultCode = "CrudResultCodeNotFound"

	// CrudResultCodeCrudResultCodeNotIdentified captures enum value "CrudResultCodeNotIdentified"
	CrudResultCodeCrudResultCodeNotIdentified CrudResultCode = "CrudResultCodeNotIdentified"

	// CrudResultCodeCrudResultCodePermissionDenied captures enum value "CrudResultCodePermissionDenied"
	CrudResultCodeCrudResultCodePermissionDenied CrudResultCode = "CrudResultCodePermissionDenied"

	// CrudResultCodeCrudResultCodeQueryExpired captures enum value "CrudResultCodeQueryExpired"
	CrudResultCodeCrudResultCodeQueryExpired CrudResultCode = "CrudResultCodeQueryExpired"

	// CrudResultCodeCrudResultCodeUnknown captures enum value "CrudResultCodeUnknown"
	CrudResultCodeCrudResultCodeUnknown CrudResultCode = "CrudResultCodeUnknown"
)

// for schema
var crudResultCodeEnum []interface{}

func init() {
	var res []CrudResultCode
	if err := json.Unmarshal([]byte(`["CrudResultCode__INVALID__","CrudResultCodeSuccess","CrudResultCodeAuthentication","CrudResultCodeAlreadyExists","CrudResultCodeException","CrudResultCodeHasDependencies","CrudResultCodeIllegalArgument","CrudResultCodeIllegalRequest","CrudResultCodeIncomplete","CrudResultCodeInternalError","CrudResultCodeNotFound","CrudResultCodeNotIdentified","CrudResultCodePermissionDenied","CrudResultCodeQueryExpired","CrudResultCodeUnknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		crudResultCodeEnum = append(crudResultCodeEnum, v)
	}
}

func (m CrudResultCode) validateCrudResultCodeEnum(path, location string, value CrudResultCode) error {
	if err := validate.EnumCase(path, location, value, crudResultCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this crud result code
func (m CrudResultCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCrudResultCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this crud result code based on context it is used
func (m CrudResultCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
