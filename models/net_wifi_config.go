// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Wifi net wifi config
//
// swagger:model Wifi
type Wifi struct {

	// crypto
	Crypto *NetWifiConfigNetcryptoblock `json:"crypto,omitempty"`

	// crypto key
	CryptoKey string `json:"cryptoKey,omitempty"`

	// encrypted secrets
	EncryptedSecrets map[string]string `json:"encryptedSecrets,omitempty"`

	// identity
	Identity string `json:"identity,omitempty"`

	// key scheme
	KeyScheme *NetworkWiFiKeyScheme `json:"keyScheme,omitempty"`

	// priority
	Priority int32 `json:"priority,omitempty"`

	// secret
	Secret *NetWifiConfigSecrets `json:"secret,omitempty"`

	// wifi s s ID
	WifiSSID string `json:"wifiSSID,omitempty"`
}

// Validate validates this net wifi config
func (m *Wifi) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCrypto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wifi) validateCrypto(formats strfmt.Registry) error {
	if swag.IsZero(m.Crypto) { // not required
		return nil
	}

	if m.Crypto != nil {
		if err := m.Crypto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crypto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crypto")
			}
			return err
		}
	}

	return nil
}

func (m *Wifi) validateKeyScheme(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyScheme) { // not required
		return nil
	}

	if m.KeyScheme != nil {
		if err := m.KeyScheme.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyScheme")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyScheme")
			}
			return err
		}
	}

	return nil
}

func (m *Wifi) validateSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.Secret) { // not required
		return nil
	}

	if m.Secret != nil {
		if err := m.Secret.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this net wifi config based on the context it is used
func (m *Wifi) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCrypto(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyScheme(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecret(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Wifi) contextValidateCrypto(ctx context.Context, formats strfmt.Registry) error {

	if m.Crypto != nil {
		if err := m.Crypto.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crypto")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("crypto")
			}
			return err
		}
	}

	return nil
}

func (m *Wifi) contextValidateKeyScheme(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyScheme != nil {
		if err := m.KeyScheme.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("keyScheme")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("keyScheme")
			}
			return err
		}
	}

	return nil
}

func (m *Wifi) contextValidateSecret(ctx context.Context, formats strfmt.Registry) error {

	if m.Secret != nil {
		if err := m.Secret.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secret")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secret")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Wifi) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Wifi) UnmarshalBinary(b []byte) error {
	var res Wifi
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
