// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VolumeInstConfig volume inst config
//
// swagger:model VolumeInstConfig
type VolumeInstConfig struct {

	// Access mode
	Accessmode *VolumeInstanceAccessMode `json:"accessmode,omitempty"`

	// user defined key-value pairs of a block storage, will be used for targeting content tree
	BlockStorageTags map[string]string `json:"blockStorageTags,omitempty"`

	// flag to keep the contents of the volume unencrypted (in clear text)
	Cleartext bool `json:"cleartext,omitempty"`

	// content tree ID
	ContentTreeID string `json:"contentTreeId,omitempty"`

	// user defined key-value pairs of a content tree that will be used for targeting by block storage
	ContentTreeTargetCondition map[string]string `json:"contentTreeTargetCondition,omitempty"`

	// name of the image
	Image string `json:"image,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// flag to enable the volume to be attached to multiple app instances
	Multiattach bool `json:"multiattach,omitempty"`

	// Purge Counter information
	Purge *ZedCloudOpsCmd `json:"purge,omitempty"`

	// size of volume
	SizeBytes uint64 `json:"sizeBytes,omitempty"`

	// type of Volume Instance
	Type *VolumeInstanceType `json:"type,omitempty"`
}

// Validate validates this volume inst config
func (m *VolumeInstConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessmode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeInstConfig) validateAccessmode(formats strfmt.Registry) error {
	if swag.IsZero(m.Accessmode) { // not required
		return nil
	}

	if m.Accessmode != nil {
		if err := m.Accessmode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessmode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessmode")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeInstConfig) validatePurge(formats strfmt.Registry) error {
	if swag.IsZero(m.Purge) { // not required
		return nil
	}

	if m.Purge != nil {
		if err := m.Purge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purge")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeInstConfig) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume inst config based on the context it is used
func (m *VolumeInstConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessmode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePurge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeInstConfig) contextValidateAccessmode(ctx context.Context, formats strfmt.Registry) error {

	if m.Accessmode != nil {
		if err := m.Accessmode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessmode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessmode")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeInstConfig) contextValidatePurge(ctx context.Context, formats strfmt.Registry) error {

	if m.Purge != nil {
		if err := m.Purge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("purge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("purge")
			}
			return err
		}
	}

	return nil
}

func (m *VolumeInstConfig) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeInstConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeInstConfig) UnmarshalBinary(b []byte) error {
	var res VolumeInstConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
