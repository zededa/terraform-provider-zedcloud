// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AAANotifyResponse a a a notify response
//
// swagger:model AAANotifyResponse
type AAANotifyResponse struct {

	// login
	Login *AAASuccessResponseLogin `json:"login,omitempty"`

	// logout
	Logout *AAASuccessResponseLogout `json:"logout,omitempty"`

	// type
	Type *AAANotifyResponseType `json:"type,omitempty"`
}

// Validate validates this a a a notify response
func (m *AAANotifyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAANotifyResponse) validateLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.Login) { // not required
		return nil
	}

	if m.Login != nil {
		if err := m.Login.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login")
			}
			return err
		}
	}

	return nil
}

func (m *AAANotifyResponse) validateLogout(formats strfmt.Registry) error {
	if swag.IsZero(m.Logout) { // not required
		return nil
	}

	if m.Logout != nil {
		if err := m.Logout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logout")
			}
			return err
		}
	}

	return nil
}

func (m *AAANotifyResponse) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a a a notify response based on the context it is used
func (m *AAANotifyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLogin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAANotifyResponse) contextValidateLogin(ctx context.Context, formats strfmt.Registry) error {

	if m.Login != nil {

		if swag.IsZero(m.Login) { // not required
			return nil
		}

		if err := m.Login.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login")
			}
			return err
		}
	}

	return nil
}

func (m *AAANotifyResponse) contextValidateLogout(ctx context.Context, formats strfmt.Registry) error {

	if m.Logout != nil {

		if swag.IsZero(m.Logout) { // not required
			return nil
		}

		if err := m.Logout.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logout")
			}
			return err
		}
	}

	return nil
}

func (m *AAANotifyResponse) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AAANotifyResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AAANotifyResponse) UnmarshalBinary(b []byte) error {
	var res AAANotifyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
