// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CrudContentEncoding crud content encoding
//
// swagger:model CrudContentEncoding
type CrudContentEncoding string

func NewCrudContentEncoding(value CrudContentEncoding) *CrudContentEncoding {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CrudContentEncoding.
func (m CrudContentEncoding) Pointer() *CrudContentEncoding {
	return &m
}

const (

	// CrudContentEncodingCrudPayloadEncodingINVALID captures enum value "CrudPayloadEncoding__INVALID__"
	CrudContentEncodingCrudPayloadEncodingINVALID CrudContentEncoding = "CrudPayloadEncoding__INVALID__"

	// CrudContentEncodingCrudPayloadEncodingProtobuf captures enum value "CrudPayloadEncodingProtobuf"
	CrudContentEncodingCrudPayloadEncodingProtobuf CrudContentEncoding = "CrudPayloadEncodingProtobuf"

	// CrudContentEncodingCrudPayloadEncodingJSON captures enum value "CrudPayloadEncodingJSON"
	CrudContentEncodingCrudPayloadEncodingJSON CrudContentEncoding = "CrudPayloadEncodingJSON"
)

// for schema
var crudContentEncodingEnum []interface{}

func init() {
	var res []CrudContentEncoding
	if err := json.Unmarshal([]byte(`["CrudPayloadEncoding__INVALID__","CrudPayloadEncodingProtobuf","CrudPayloadEncodingJSON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		crudContentEncodingEnum = append(crudContentEncodingEnum, v)
	}
}

func (m CrudContentEncoding) validateCrudContentEncodingEnum(path, location string, value CrudContentEncoding) error {
	if err := validate.EnumCase(path, location, value, crudContentEncodingEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this crud content encoding
func (m CrudContentEncoding) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCrudContentEncodingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this crud content encoding based on context it is used
func (m CrudContentEncoding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
