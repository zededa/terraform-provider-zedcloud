// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AAAFrontendLoginWithPasswordRequest Login request
//
// # User either a combination of (username, realm) or (usernameAtRealm) to specify login details
//
// swagger:model AAA_Frontend_LoginWithPasswordRequest
type AAAFrontendLoginWithPasswordRequest struct {

	// enterprise name
	EnterpriseName string `json:"enterpriseName,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// realm
	Realm string `json:"realm,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// username at realm
	UsernameAtRealm string `json:"usernameAtRealm,omitempty"`

	// verbose detailed user
	VerboseDetailedUser bool `json:"verboseDetailedUser,omitempty"`

	// verbose enterprise
	VerboseEnterprise bool `json:"verboseEnterprise,omitempty"`

	// How verbal should the response be
	VerbosePolicy bool `json:"verbosePolicy,omitempty"`

	// verbose realm
	VerboseRealm bool `json:"verboseRealm,omitempty"`

	// verbose simple user
	VerboseSimpleUser bool `json:"verboseSimpleUser,omitempty"`
}

// Validate validates this a a a frontend login with password request
func (m *AAAFrontendLoginWithPasswordRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this a a a frontend login with password request based on context it is used
func (m *AAAFrontendLoginWithPasswordRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AAAFrontendLoginWithPasswordRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AAAFrontendLoginWithPasswordRequest) UnmarshalBinary(b []byte) error {
	var res AAAFrontendLoginWithPasswordRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
