// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AAAFrontendGenerateTokenResponseCause a a a frontend generate token response cause
//
// swagger:model AAA_Frontend_GenerateTokenResponseCause
type AAAFrontendGenerateTokenResponseCause string

func NewAAAFrontendGenerateTokenResponseCause(value AAAFrontendGenerateTokenResponseCause) *AAAFrontendGenerateTokenResponseCause {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AAAFrontendGenerateTokenResponseCause.
func (m AAAFrontendGenerateTokenResponseCause) Pointer() *AAAFrontendGenerateTokenResponseCause {
	return &m
}

const (

	// AAAFrontendGenerateTokenResponseCauseUNSPECIFIED captures enum value "UNSPECIFIED"
	AAAFrontendGenerateTokenResponseCauseUNSPECIFIED AAAFrontendGenerateTokenResponseCause = "UNSPECIFIED"

	// AAAFrontendGenerateTokenResponseCauseOK captures enum value "OK"
	AAAFrontendGenerateTokenResponseCauseOK AAAFrontendGenerateTokenResponseCause = "OK"

	// AAAFrontendGenerateTokenResponseCauseUSERUNKNOWN captures enum value "USER_UNKNOWN"
	AAAFrontendGenerateTokenResponseCauseUSERUNKNOWN AAAFrontendGenerateTokenResponseCause = "USER_UNKNOWN"

	// AAAFrontendGenerateTokenResponseCauseEXCEPTION captures enum value "EXCEPTION"
	AAAFrontendGenerateTokenResponseCauseEXCEPTION AAAFrontendGenerateTokenResponseCause = "EXCEPTION"
)

// for schema
var aAAFrontendGenerateTokenResponseCauseEnum []interface{}

func init() {
	var res []AAAFrontendGenerateTokenResponseCause
	if err := json.Unmarshal([]byte(`["UNSPECIFIED","OK","USER_UNKNOWN","EXCEPTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aAAFrontendGenerateTokenResponseCauseEnum = append(aAAFrontendGenerateTokenResponseCauseEnum, v)
	}
}

func (m AAAFrontendGenerateTokenResponseCause) validateAAAFrontendGenerateTokenResponseCauseEnum(path, location string, value AAAFrontendGenerateTokenResponseCause) error {
	if err := validate.EnumCase(path, location, value, aAAFrontendGenerateTokenResponseCauseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this a a a frontend generate token response cause
func (m AAAFrontendGenerateTokenResponseCause) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAAAFrontendGenerateTokenResponseCauseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this a a a frontend generate token response cause based on context it is used
func (m AAAFrontendGenerateTokenResponseCause) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
