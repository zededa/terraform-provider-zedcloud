// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AAAResponse BEGIN: Responses
//
// swagger:model AAAResponse
type AAAResponse struct {

	// failure
	Failure *AAAFailureResponse `json:"failure,omitempty"`

	// mode
	Mode *AAALoginModeResponse `json:"mode,omitempty"`

	// notify
	Notify *AAANotifyResponse `json:"notify,omitempty"`

	// redirect
	Redirect *AAARedirectResponse `json:"redirect,omitempty"`

	// result
	Result *ZsrvResponse `json:"result,omitempty"`

	// success
	Success *AAASuccessResponse `json:"success,omitempty"`

	// totp URL
	TotpURL *TOTPEnrolmentURL `json:"totpURL,omitempty"`

	// type
	Type *AAAResponseType `json:"type,omitempty"`
}

// Validate validates this a a a response
func (m *AAAResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotpURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAAResponse) validateFailure(formats strfmt.Registry) error {
	if swag.IsZero(m.Failure) { // not required
		return nil
	}

	if m.Failure != nil {
		if err := m.Failure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failure")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) validateNotify(formats strfmt.Registry) error {
	if swag.IsZero(m.Notify) { // not required
		return nil
	}

	if m.Notify != nil {
		if err := m.Notify.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notify")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notify")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) validateRedirect(formats strfmt.Registry) error {
	if swag.IsZero(m.Redirect) { // not required
		return nil
	}

	if m.Redirect != nil {
		if err := m.Redirect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redirect")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) validateSuccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Success) { // not required
		return nil
	}

	if m.Success != nil {
		if err := m.Success.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("success")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("success")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) validateTotpURL(formats strfmt.Registry) error {
	if swag.IsZero(m.TotpURL) { // not required
		return nil
	}

	if m.TotpURL != nil {
		if err := m.TotpURL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totpURL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totpURL")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a a a response based on the context it is used
func (m *AAAResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFailure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotify(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedirect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotpURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAAResponse) contextValidateFailure(ctx context.Context, formats strfmt.Registry) error {

	if m.Failure != nil {

		if swag.IsZero(m.Failure) { // not required
			return nil
		}

		if err := m.Failure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("failure")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if m.Mode != nil {

		if swag.IsZero(m.Mode) { // not required
			return nil
		}

		if err := m.Mode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) contextValidateNotify(ctx context.Context, formats strfmt.Registry) error {

	if m.Notify != nil {

		if swag.IsZero(m.Notify) { // not required
			return nil
		}

		if err := m.Notify.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notify")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notify")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) contextValidateRedirect(ctx context.Context, formats strfmt.Registry) error {

	if m.Redirect != nil {

		if swag.IsZero(m.Redirect) { // not required
			return nil
		}

		if err := m.Redirect.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("redirect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("redirect")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {

		if swag.IsZero(m.Result) { // not required
			return nil
		}

		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) contextValidateSuccess(ctx context.Context, formats strfmt.Registry) error {

	if m.Success != nil {

		if swag.IsZero(m.Success) { // not required
			return nil
		}

		if err := m.Success.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("success")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("success")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) contextValidateTotpURL(ctx context.Context, formats strfmt.Registry) error {

	if m.TotpURL != nil {

		if swag.IsZero(m.TotpURL) { // not required
			return nil
		}

		if err := m.TotpURL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totpURL")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totpURL")
			}
			return err
		}
	}

	return nil
}

func (m *AAAResponse) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AAAResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AAAResponse) UnmarshalBinary(b []byte) error {
	var res AAAResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
