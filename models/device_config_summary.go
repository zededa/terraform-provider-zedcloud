// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceConfigSummary Device Configuration payload summary
//
// # Device Configuration request paylod holds the device properties
//
// swagger:model DeviceConfigSummary
type DeviceConfigSummary struct {

	// administrative state of device
	AdminState *AdminState `json:"adminState,omitempty"`

	// base images
	BaseImage []*BaseOSImage `json:"baseImage"`

	// System defined universally unique clusterInstance ID, unique across the enterprise.
	// Max Length: 256
	// Min Length: 3
	// Pattern: [a-zA-Z0-9][a-zA-Z0-9_.-]+
	ClusterID string `json:"clusterID,omitempty"`

	// debug knob details for the device
	DebugKnob *DebugKnobDetail `json:"debugKnob,omitempty"`

	// user defined tag for the device, which is used while deploying policies.
	DeploymentTag string `json:"deploymentTag,omitempty"`

	// user specified description
	Description string `json:"description,omitempty"`

	// system generated unique id for a device
	// Read Only: true
	// Pattern: [0-9A-Za-z-]+
	ID string `json:"id,omitempty"`

	// System Interface list
	Interfaces []*SystemInterface `json:"interfaces"`

	// device model
	// Required: true
	ModelID *string `json:"modelId"`

	// user specified device name
	// Required: true
	Name *string `json:"name"`

	// project name
	// Required: true
	ProjectID *string `json:"projectId"`

	// Device serial number
	Serialno string `json:"serialno,omitempty"`

	// Tags are name/value pairs that enable you to categorize resources. Tag names are case insensitive with max_length 512 and min_length 3. Tag values are case sensitive with max_length 256 and min_length 3.
	Tags map[string]string `json:"tags,omitempty"`

	// user specified title
	// Required: true
	Title *string `json:"title"`

	// device model arch type
	Utype *ModelArchType `json:"utype,omitempty"`
}

// Validate validates this device config summary
func (m *DeviceConfigSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebugKnob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUtype(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceConfigSummary) validateAdminState(formats strfmt.Registry) error {
	if swag.IsZero(m.AdminState) { // not required
		return nil
	}

	if m.AdminState != nil {
		if err := m.AdminState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminState")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfigSummary) validateBaseImage(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseImage) { // not required
		return nil
	}

	for i := 0; i < len(m.BaseImage); i++ {
		if swag.IsZero(m.BaseImage[i]) { // not required
			continue
		}

		if m.BaseImage[i] != nil {
			if err := m.BaseImage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("baseImage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("baseImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfigSummary) validateClusterID(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := validate.MinLength("clusterID", "body", m.ClusterID, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("clusterID", "body", m.ClusterID, 256); err != nil {
		return err
	}

	if err := validate.Pattern("clusterID", "body", m.ClusterID, `[a-zA-Z0-9][a-zA-Z0-9_.-]+`); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigSummary) validateDebugKnob(formats strfmt.Registry) error {
	if swag.IsZero(m.DebugKnob) { // not required
		return nil
	}

	if m.DebugKnob != nil {
		if err := m.DebugKnob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debugKnob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("debugKnob")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfigSummary) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.Pattern("id", "body", m.ID, `[0-9A-Za-z-]+`); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigSummary) validateInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.Interfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Interfaces); i++ {
		if swag.IsZero(m.Interfaces[i]) { // not required
			continue
		}

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfigSummary) validateModelID(formats strfmt.Registry) error {

	if err := validate.Required("modelId", "body", m.ModelID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigSummary) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigSummary) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigSummary) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigSummary) validateUtype(formats strfmt.Registry) error {
	if swag.IsZero(m.Utype) { // not required
		return nil
	}

	if m.Utype != nil {
		if err := m.Utype.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("utype")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("utype")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this device config summary based on the context it is used
func (m *DeviceConfigSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdminState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBaseImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDebugKnob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUtype(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceConfigSummary) contextValidateAdminState(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminState != nil {
		if err := m.AdminState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminState")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfigSummary) contextValidateBaseImage(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BaseImage); i++ {

		if m.BaseImage[i] != nil {
			if err := m.BaseImage[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("baseImage" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("baseImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfigSummary) contextValidateDebugKnob(ctx context.Context, formats strfmt.Registry) error {

	if m.DebugKnob != nil {
		if err := m.DebugKnob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debugKnob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("debugKnob")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceConfigSummary) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DeviceConfigSummary) contextValidateInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Interfaces); i++ {

		if m.Interfaces[i] != nil {
			if err := m.Interfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("interfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceConfigSummary) contextValidateUtype(ctx context.Context, formats strfmt.Registry) error {

	if m.Utype != nil {
		if err := m.Utype.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("utype")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("utype")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceConfigSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceConfigSummary) UnmarshalBinary(b []byte) error {
	var res DeviceConfigSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
