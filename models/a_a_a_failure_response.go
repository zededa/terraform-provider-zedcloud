// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AAAFailureResponse a a a failure response
//
// swagger:model AAAFailureResponse
type AAAFailureResponse struct {

	// credential
	Credential *AAAFailureResponseCredentialChange `json:"credential,omitempty"`

	// details
	Details *AAAFailureResponseSessionDetails `json:"details,omitempty"`

	// generate token
	GenerateToken *AAAFailureResponseGenerateToken `json:"generateToken,omitempty"`

	// login
	Login *AAAFailureResponseLogin `json:"login,omitempty"`

	// logout
	Logout *AAAFailureResponseLogout `json:"logout,omitempty"`

	// query session details
	QuerySessionDetails *AAAFailureResponseQueryAllSessionDetails `json:"querySessionDetails,omitempty"`

	// refresh
	Refresh *AAAFailureTokenRefresh `json:"refresh,omitempty"`

	// type
	Type *AAAFailureResponseType `json:"type,omitempty"`
}

// Validate validates this a a a failure response
func (m *AAAFailureResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerateToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuerySessionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefresh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAAFailureResponse) validateCredential(formats strfmt.Registry) error {
	if swag.IsZero(m.Credential) { // not required
		return nil
	}

	if m.Credential != nil {
		if err := m.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if m.Details != nil {
		if err := m.Details.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) validateGenerateToken(formats strfmt.Registry) error {
	if swag.IsZero(m.GenerateToken) { // not required
		return nil
	}

	if m.GenerateToken != nil {
		if err := m.GenerateToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generateToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generateToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) validateLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.Login) { // not required
		return nil
	}

	if m.Login != nil {
		if err := m.Login.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) validateLogout(formats strfmt.Registry) error {
	if swag.IsZero(m.Logout) { // not required
		return nil
	}

	if m.Logout != nil {
		if err := m.Logout.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logout")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) validateQuerySessionDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.QuerySessionDetails) { // not required
		return nil
	}

	if m.QuerySessionDetails != nil {
		if err := m.QuerySessionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("querySessionDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("querySessionDetails")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) validateRefresh(formats strfmt.Registry) error {
	if swag.IsZero(m.Refresh) { // not required
		return nil
	}

	if m.Refresh != nil {
		if err := m.Refresh.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refresh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refresh")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this a a a failure response based on the context it is used
func (m *AAAFailureResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenerateToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuerySessionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefresh(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AAAFailureResponse) contextValidateCredential(ctx context.Context, formats strfmt.Registry) error {

	if m.Credential != nil {

		if swag.IsZero(m.Credential) { // not required
			return nil
		}

		if err := m.Credential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) contextValidateDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.Details != nil {

		if swag.IsZero(m.Details) { // not required
			return nil
		}

		if err := m.Details.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("details")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) contextValidateGenerateToken(ctx context.Context, formats strfmt.Registry) error {

	if m.GenerateToken != nil {

		if swag.IsZero(m.GenerateToken) { // not required
			return nil
		}

		if err := m.GenerateToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generateToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generateToken")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) contextValidateLogin(ctx context.Context, formats strfmt.Registry) error {

	if m.Login != nil {

		if swag.IsZero(m.Login) { // not required
			return nil
		}

		if err := m.Login.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) contextValidateLogout(ctx context.Context, formats strfmt.Registry) error {

	if m.Logout != nil {

		if swag.IsZero(m.Logout) { // not required
			return nil
		}

		if err := m.Logout.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logout")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logout")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) contextValidateQuerySessionDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.QuerySessionDetails != nil {

		if swag.IsZero(m.QuerySessionDetails) { // not required
			return nil
		}

		if err := m.QuerySessionDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("querySessionDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("querySessionDetails")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) contextValidateRefresh(ctx context.Context, formats strfmt.Registry) error {

	if m.Refresh != nil {

		if swag.IsZero(m.Refresh) { // not required
			return nil
		}

		if err := m.Refresh.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refresh")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refresh")
			}
			return err
		}
	}

	return nil
}

func (m *AAAFailureResponse) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if swag.IsZero(m.Type) { // not required
			return nil
		}

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AAAFailureResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AAAFailureResponse) UnmarshalBinary(b []byte) error {
	var res AAAFailureResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
