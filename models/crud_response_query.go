// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CrudResponseQuery crud response query
//
// swagger:model CrudResponseQuery
type CrudResponseQuery struct {

	// allowed enterprise list
	AllowedEnterpriseList *AllowedEnterpriseList `json:"allowedEnterpriseList,omitempty"`

	// clazz
	Clazz *ModelClazz `json:"clazz,omitempty"`

	// Was there anything that matches
	Code *CrudResultCode `json:"code,omitempty"`

	// credentials
	Credentials *Credentials `json:"credentials,omitempty"`

	// doc policies
	DocPolicies *DocPolicies `json:"docPolicies,omitempty"`

	// enterprises
	Enterprises *Enterprises `json:"enterprises,omitempty"`

	// Global statistics
	GlobalStatistics []*CrudStatisticsContainer `json:"globalStatistics"`

	// List of the results
	List []*CrudResultWithContent `json:"list"`

	// policies
	Policies *Policies `json:"policies,omitempty"`

	// The index of the first result
	Position int64 `json:"position,omitempty"`

	// profiles
	Profiles *AuthorizationProfiles `json:"profiles,omitempty"`

	// Global statistics
	QueryStatistics []*CrudStatisticsContainer `json:"queryStatistics"`

	// The unique id of the query
	QueryToken *OpaqueToken64 `json:"queryToken,omitempty"`

	// realms
	Realms *Realms `json:"realms,omitempty"`

	// roles
	Roles *Roles `json:"roles,omitempty"`

	// The number of results returned, could be less than the requested size
	Size int64 `json:"size,omitempty"`

	// The total number of result items for this query
	Total int64 `json:"total,omitempty"`

	// user summary report
	UserSummaryReport *UserSummaryReport `json:"userSummaryReport,omitempty"`

	// user usage per enterprise list
	UserUsagePerEnterpriseList *UserUsagePerEnterpriseList `json:"userUsagePerEnterpriseList,omitempty"`

	// users
	Users *DetailedUsers `json:"users,omitempty"`
}

// Validate validates this crud response query
func (m *CrudResponseQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedEnterpriseList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClazz(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnterprises(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserSummaryReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUsagePerEnterpriseList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrudResponseQuery) validateAllowedEnterpriseList(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowedEnterpriseList) { // not required
		return nil
	}

	if m.AllowedEnterpriseList != nil {
		if err := m.AllowedEnterpriseList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowedEnterpriseList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowedEnterpriseList")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateClazz(formats strfmt.Registry) error {
	if swag.IsZero(m.Clazz) { // not required
		return nil
	}

	if m.Clazz != nil {
		if err := m.Clazz.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clazz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clazz")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if m.Code != nil {
		if err := m.Code.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateDocPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.DocPolicies) { // not required
		return nil
	}

	if m.DocPolicies != nil {
		if err := m.DocPolicies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("docPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("docPolicies")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateEnterprises(formats strfmt.Registry) error {
	if swag.IsZero(m.Enterprises) { // not required
		return nil
	}

	if m.Enterprises != nil {
		if err := m.Enterprises.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterprises")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enterprises")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateGlobalStatistics(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.GlobalStatistics); i++ {
		if swag.IsZero(m.GlobalStatistics[i]) { // not required
			continue
		}

		if m.GlobalStatistics[i] != nil {
			if err := m.GlobalStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("globalStatistics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("globalStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrudResponseQuery) validateList(formats strfmt.Registry) error {
	if swag.IsZero(m.List) { // not required
		return nil
	}

	for i := 0; i < len(m.List); i++ {
		if swag.IsZero(m.List[i]) { // not required
			continue
		}

		if m.List[i] != nil {
			if err := m.List[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrudResponseQuery) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if m.Policies != nil {
		if err := m.Policies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Profiles) { // not required
		return nil
	}

	if m.Profiles != nil {
		if err := m.Profiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profiles")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateQueryStatistics(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QueryStatistics); i++ {
		if swag.IsZero(m.QueryStatistics[i]) { // not required
			continue
		}

		if m.QueryStatistics[i] != nil {
			if err := m.QueryStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queryStatistics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queryStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrudResponseQuery) validateQueryToken(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryToken) { // not required
		return nil
	}

	if m.QueryToken != nil {
		if err := m.QueryToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queryToken")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateRealms(formats strfmt.Registry) error {
	if swag.IsZero(m.Realms) { // not required
		return nil
	}

	if m.Realms != nil {
		if err := m.Realms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realms")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if m.Roles != nil {
		if err := m.Roles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateUserSummaryReport(formats strfmt.Registry) error {
	if swag.IsZero(m.UserSummaryReport) { // not required
		return nil
	}

	if m.UserSummaryReport != nil {
		if err := m.UserSummaryReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userSummaryReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userSummaryReport")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateUserUsagePerEnterpriseList(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUsagePerEnterpriseList) { // not required
		return nil
	}

	if m.UserUsagePerEnterpriseList != nil {
		if err := m.UserUsagePerEnterpriseList.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userUsagePerEnterpriseList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userUsagePerEnterpriseList")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if m.Users != nil {
		if err := m.Users.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this crud response query based on the context it is used
func (m *CrudResponseQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowedEnterpriseList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClazz(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDocPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnterprises(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGlobalStatistics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryStatistics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRealms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserSummaryReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUsagePerEnterpriseList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrudResponseQuery) contextValidateAllowedEnterpriseList(ctx context.Context, formats strfmt.Registry) error {

	if m.AllowedEnterpriseList != nil {

		if swag.IsZero(m.AllowedEnterpriseList) { // not required
			return nil
		}

		if err := m.AllowedEnterpriseList.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("allowedEnterpriseList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("allowedEnterpriseList")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateClazz(ctx context.Context, formats strfmt.Registry) error {

	if m.Clazz != nil {

		if swag.IsZero(m.Clazz) { // not required
			return nil
		}

		if err := m.Clazz.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clazz")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clazz")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	if m.Code != nil {

		if swag.IsZero(m.Code) { // not required
			return nil
		}

		if err := m.Code.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("code")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateDocPolicies(ctx context.Context, formats strfmt.Registry) error {

	if m.DocPolicies != nil {

		if swag.IsZero(m.DocPolicies) { // not required
			return nil
		}

		if err := m.DocPolicies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("docPolicies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("docPolicies")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateEnterprises(ctx context.Context, formats strfmt.Registry) error {

	if m.Enterprises != nil {

		if swag.IsZero(m.Enterprises) { // not required
			return nil
		}

		if err := m.Enterprises.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enterprises")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enterprises")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateGlobalStatistics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GlobalStatistics); i++ {

		if m.GlobalStatistics[i] != nil {

			if swag.IsZero(m.GlobalStatistics[i]) { // not required
				return nil
			}

			if err := m.GlobalStatistics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("globalStatistics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("globalStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrudResponseQuery) contextValidateList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.List); i++ {

		if m.List[i] != nil {

			if swag.IsZero(m.List[i]) { // not required
				return nil
			}

			if err := m.List[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("list" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("list" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrudResponseQuery) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	if m.Policies != nil {

		if swag.IsZero(m.Policies) { // not required
			return nil
		}

		if err := m.Policies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateProfiles(ctx context.Context, formats strfmt.Registry) error {

	if m.Profiles != nil {

		if swag.IsZero(m.Profiles) { // not required
			return nil
		}

		if err := m.Profiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("profiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("profiles")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateQueryStatistics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.QueryStatistics); i++ {

		if m.QueryStatistics[i] != nil {

			if swag.IsZero(m.QueryStatistics[i]) { // not required
				return nil
			}

			if err := m.QueryStatistics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("queryStatistics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("queryStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CrudResponseQuery) contextValidateQueryToken(ctx context.Context, formats strfmt.Registry) error {

	if m.QueryToken != nil {

		if swag.IsZero(m.QueryToken) { // not required
			return nil
		}

		if err := m.QueryToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queryToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("queryToken")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateRealms(ctx context.Context, formats strfmt.Registry) error {

	if m.Realms != nil {

		if swag.IsZero(m.Realms) { // not required
			return nil
		}

		if err := m.Realms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("realms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("realms")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	if m.Roles != nil {

		if swag.IsZero(m.Roles) { // not required
			return nil
		}

		if err := m.Roles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("roles")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateUserSummaryReport(ctx context.Context, formats strfmt.Registry) error {

	if m.UserSummaryReport != nil {

		if swag.IsZero(m.UserSummaryReport) { // not required
			return nil
		}

		if err := m.UserSummaryReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userSummaryReport")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userSummaryReport")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateUserUsagePerEnterpriseList(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUsagePerEnterpriseList != nil {

		if swag.IsZero(m.UserUsagePerEnterpriseList) { // not required
			return nil
		}

		if err := m.UserUsagePerEnterpriseList.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userUsagePerEnterpriseList")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userUsagePerEnterpriseList")
			}
			return err
		}
	}

	return nil
}

func (m *CrudResponseQuery) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if m.Users != nil {

		if swag.IsZero(m.Users) { // not required
			return nil
		}

		if err := m.Users.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("users")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("users")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrudResponseQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrudResponseQuery) UnmarshalBinary(b []byte) error {
	var res CrudResponseQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
