// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PatchEnvelopeAction patch envelope action
//
// swagger:model PatchEnvelopeAction
type PatchEnvelopeAction string

func NewPatchEnvelopeAction(value PatchEnvelopeAction) *PatchEnvelopeAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PatchEnvelopeAction.
func (m PatchEnvelopeAction) Pointer() *PatchEnvelopeAction {
	return &m
}

const (

	// PatchEnvelopeActionPATCHENVELOPEACTIONUNSPECIFIED captures enum value "PATCH_ENVELOPE_ACTION_UNSPECIFIED"
	PatchEnvelopeActionPATCHENVELOPEACTIONUNSPECIFIED PatchEnvelopeAction = "PATCH_ENVELOPE_ACTION_UNSPECIFIED"

	// PatchEnvelopeActionPATCHENVELOPEACTIONSTORE captures enum value "PATCH_ENVELOPE_ACTION_STORE"
	PatchEnvelopeActionPATCHENVELOPEACTIONSTORE PatchEnvelopeAction = "PATCH_ENVELOPE_ACTION_STORE"

	// PatchEnvelopeActionPATCHENVELOPEACTIONACTIVATE captures enum value "PATCH_ENVELOPE_ACTION_ACTIVATE"
	PatchEnvelopeActionPATCHENVELOPEACTIONACTIVATE PatchEnvelopeAction = "PATCH_ENVELOPE_ACTION_ACTIVATE"
)

// for schema
var patchEnvelopeActionEnum []interface{}

func init() {
	var res []PatchEnvelopeAction
	if err := json.Unmarshal([]byte(`["PATCH_ENVELOPE_ACTION_UNSPECIFIED","PATCH_ENVELOPE_ACTION_STORE","PATCH_ENVELOPE_ACTION_ACTIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchEnvelopeActionEnum = append(patchEnvelopeActionEnum, v)
	}
}

func (m PatchEnvelopeAction) validatePatchEnvelopeActionEnum(path, location string, value PatchEnvelopeAction) error {
	if err := validate.EnumCase(path, location, value, patchEnvelopeActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this patch envelope action
func (m PatchEnvelopeAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePatchEnvelopeActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this patch envelope action based on context it is used
func (m PatchEnvelopeAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
