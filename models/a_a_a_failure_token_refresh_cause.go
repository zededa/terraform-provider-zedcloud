// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AAAFailureTokenRefreshCause Reason why token refresh failed
//
// swagger:model AAAFailureTokenRefreshCause
type AAAFailureTokenRefreshCause string

func NewAAAFailureTokenRefreshCause(value AAAFailureTokenRefreshCause) *AAAFailureTokenRefreshCause {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AAAFailureTokenRefreshCause.
func (m AAAFailureTokenRefreshCause) Pointer() *AAAFailureTokenRefreshCause {
	return &m
}

const (

	// AAAFailureTokenRefreshCauseINVALID captures enum value "__INVALID__"
	AAAFailureTokenRefreshCauseINVALID AAAFailureTokenRefreshCause = "__INVALID__"

	// AAAFailureTokenRefreshCauseAAAFailureTokenRefreshCauseExpired captures enum value "AAAFailureTokenRefreshCauseExpired"
	AAAFailureTokenRefreshCauseAAAFailureTokenRefreshCauseExpired AAAFailureTokenRefreshCause = "AAAFailureTokenRefreshCauseExpired"

	// AAAFailureTokenRefreshCauseAAAFailureTokenRefreshCauseUnknown captures enum value "AAAFailureTokenRefreshCauseUnknown"
	AAAFailureTokenRefreshCauseAAAFailureTokenRefreshCauseUnknown AAAFailureTokenRefreshCause = "AAAFailureTokenRefreshCauseUnknown"
)

// for schema
var aAAFailureTokenRefreshCauseEnum []interface{}

func init() {
	var res []AAAFailureTokenRefreshCause
	if err := json.Unmarshal([]byte(`["__INVALID__","AAAFailureTokenRefreshCauseExpired","AAAFailureTokenRefreshCauseUnknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aAAFailureTokenRefreshCauseEnum = append(aAAFailureTokenRefreshCauseEnum, v)
	}
}

func (m AAAFailureTokenRefreshCause) validateAAAFailureTokenRefreshCauseEnum(path, location string, value AAAFailureTokenRefreshCause) error {
	if err := validate.EnumCase(path, location, value, aAAFailureTokenRefreshCauseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this a a a failure token refresh cause
func (m AAAFailureTokenRefreshCause) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAAAFailureTokenRefreshCauseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this a a a failure token refresh cause based on context it is used
func (m AAAFailureTokenRefreshCause) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
